
Nixie_Rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b60  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001c18  08001c18  00011c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ca8  08001ca8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ca8  08001ca8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ca8  08001ca8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ca8  08001ca8  00011ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001cbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001cbc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000362a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001049  00000000  00000000  0002365e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  000246a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00024b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d1c  00000000  00000000  00024ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053ee  00000000  00000000  00037bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000758fa  00000000  00000000  0003cfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b28e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e04  00000000  00000000  000b2934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001c00 	.word	0x08001c00

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001c00 	.word	0x08001c00

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <writeNixie1Number>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void writeNixie1Number(int number){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

	switch(number%10){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	210a      	movs	r1, #10
 80003f8:	0018      	movs	r0, r3
 80003fa:	f7ff fff1 	bl	80003e0 <__aeabi_idivmod>
 80003fe:	000b      	movs	r3, r1
 8000400:	2b09      	cmp	r3, #9
 8000402:	d900      	bls.n	8000406 <writeNixie1Number+0x1a>
 8000404:	e126      	b.n	8000654 <writeNixie1Number+0x268>
 8000406:	009a      	lsls	r2, r3, #2
 8000408:	4ba3      	ldr	r3, [pc, #652]	; (8000698 <writeNixie1Number+0x2ac>)
 800040a:	18d3      	adds	r3, r2, r3
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 8000410:	23a0      	movs	r3, #160	; 0xa0
 8000412:	05db      	lsls	r3, r3, #23
 8000414:	2200      	movs	r2, #0
 8000416:	2110      	movs	r1, #16
 8000418:	0018      	movs	r0, r3
 800041a:	f000 feb3 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 800041e:	23a0      	movs	r3, #160	; 0xa0
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2200      	movs	r2, #0
 8000424:	2140      	movs	r1, #64	; 0x40
 8000426:	0018      	movs	r0, r3
 8000428:	f000 feac 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 800042c:	23a0      	movs	r3, #160	; 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	2200      	movs	r2, #0
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fea5 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 800043a:	23a0      	movs	r3, #160	; 0xa0
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2200      	movs	r2, #0
 8000440:	2120      	movs	r1, #32
 8000442:	0018      	movs	r0, r3
 8000444:	f000 fe9e 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 8000448:	e121      	b.n	800068e <writeNixie1Number+0x2a2>
		case 1:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 800044a:	23a0      	movs	r3, #160	; 0xa0
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2201      	movs	r2, #1
 8000450:	2110      	movs	r1, #16
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fe96 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 8000458:	23a0      	movs	r3, #160	; 0xa0
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	2200      	movs	r2, #0
 800045e:	2140      	movs	r1, #64	; 0x40
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fe8f 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 8000466:	23a0      	movs	r3, #160	; 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	2200      	movs	r2, #0
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fe88 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 8000474:	23a0      	movs	r3, #160	; 0xa0
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2200      	movs	r2, #0
 800047a:	2120      	movs	r1, #32
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fe81 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 8000482:	e104      	b.n	800068e <writeNixie1Number+0x2a2>
		case 2:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 8000484:	23a0      	movs	r3, #160	; 0xa0
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	2200      	movs	r2, #0
 800048a:	2110      	movs	r1, #16
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fe79 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 8000492:	23a0      	movs	r3, #160	; 0xa0
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	2201      	movs	r2, #1
 8000498:	2140      	movs	r1, #64	; 0x40
 800049a:	0018      	movs	r0, r3
 800049c:	f000 fe72 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 80004a0:	23a0      	movs	r3, #160	; 0xa0
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	2200      	movs	r2, #0
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fe6b 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 80004ae:	23a0      	movs	r3, #160	; 0xa0
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	2200      	movs	r2, #0
 80004b4:	2120      	movs	r1, #32
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fe64 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 80004bc:	e0e7      	b.n	800068e <writeNixie1Number+0x2a2>
		case 3:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2201      	movs	r2, #1
 80004c4:	2110      	movs	r1, #16
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fe5c 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 80004cc:	23a0      	movs	r3, #160	; 0xa0
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2201      	movs	r2, #1
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fe55 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2200      	movs	r2, #0
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fe4e 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 80004e8:	23a0      	movs	r3, #160	; 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2200      	movs	r2, #0
 80004ee:	2120      	movs	r1, #32
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fe47 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 80004f6:	e0ca      	b.n	800068e <writeNixie1Number+0x2a2>
		case 4:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2200      	movs	r2, #0
 80004fe:	2110      	movs	r1, #16
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fe3f 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 8000506:	23a0      	movs	r3, #160	; 0xa0
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2200      	movs	r2, #0
 800050c:	2140      	movs	r1, #64	; 0x40
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fe38 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2201      	movs	r2, #1
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fe31 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 8000522:	23a0      	movs	r3, #160	; 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fe2a 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 8000530:	e0ad      	b.n	800068e <writeNixie1Number+0x2a2>
		case 5:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 8000532:	23a0      	movs	r3, #160	; 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	2201      	movs	r2, #1
 8000538:	2110      	movs	r1, #16
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fe22 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 8000540:	23a0      	movs	r3, #160	; 0xa0
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fe1b 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 800054e:	23a0      	movs	r3, #160	; 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2201      	movs	r2, #1
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fe14 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 800055c:	23a0      	movs	r3, #160	; 0xa0
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	2200      	movs	r2, #0
 8000562:	2120      	movs	r1, #32
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fe0d 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 800056a:	e090      	b.n	800068e <writeNixie1Number+0x2a2>
		case 6:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 800056c:	23a0      	movs	r3, #160	; 0xa0
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2200      	movs	r2, #0
 8000572:	2110      	movs	r1, #16
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fe05 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 800057a:	23a0      	movs	r3, #160	; 0xa0
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	2201      	movs	r2, #1
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fdfe 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 8000588:	23a0      	movs	r3, #160	; 0xa0
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2201      	movs	r2, #1
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fdf7 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 8000596:	23a0      	movs	r3, #160	; 0xa0
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	2200      	movs	r2, #0
 800059c:	2120      	movs	r1, #32
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fdf0 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 80005a4:	e073      	b.n	800068e <writeNixie1Number+0x2a2>
		case 7:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 80005a6:	23a0      	movs	r3, #160	; 0xa0
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fde8 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 80005b4:	23a0      	movs	r3, #160	; 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	2201      	movs	r2, #1
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fde1 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fdda 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 80005d0:	23a0      	movs	r3, #160	; 0xa0
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	2200      	movs	r2, #0
 80005d6:	2120      	movs	r1, #32
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fdd3 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 80005de:	e056      	b.n	800068e <writeNixie1Number+0x2a2>
		case 8:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 80005e0:	23a0      	movs	r3, #160	; 0xa0
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fdcb 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2200      	movs	r2, #0
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fdc4 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 80005fc:	23a0      	movs	r3, #160	; 0xa0
 80005fe:	05db      	lsls	r3, r3, #23
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fdbd 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 1);
 800060a:	23a0      	movs	r3, #160	; 0xa0
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2201      	movs	r2, #1
 8000610:	2120      	movs	r1, #32
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fdb6 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 8000618:	e039      	b.n	800068e <writeNixie1Number+0x2a2>
		case 9:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 800061a:	23a0      	movs	r3, #160	; 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2201      	movs	r2, #1
 8000620:	2110      	movs	r1, #16
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fdae 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 8000628:	23a0      	movs	r3, #160	; 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fda7 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 8000636:	23a0      	movs	r3, #160	; 0xa0
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	2200      	movs	r2, #0
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fda0 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 1);
 8000644:	23a0      	movs	r3, #160	; 0xa0
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	2201      	movs	r2, #1
 800064a:	2120      	movs	r1, #32
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fd99 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 8000652:	e01c      	b.n	800068e <writeNixie1Number+0x2a2>
		default:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fd91 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	2140      	movs	r1, #64	; 0x40
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fd8a 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 8000670:	23a0      	movs	r3, #160	; 0xa0
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	2201      	movs	r2, #1
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fd83 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 1);
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2201      	movs	r2, #1
 8000684:	2120      	movs	r1, #32
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fd7c 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 800068c:	46c0      	nop			; (mov r8, r8)

	}

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	08001c18 	.word	0x08001c18

0800069c <writeNixie2Number>:

void writeNixie2Number(int number){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

	switch(number%10){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	210a      	movs	r1, #10
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff fe99 	bl	80003e0 <__aeabi_idivmod>
 80006ae:	000b      	movs	r3, r1
 80006b0:	2b09      	cmp	r3, #9
 80006b2:	d900      	bls.n	80006b6 <writeNixie2Number+0x1a>
 80006b4:	e126      	b.n	8000904 <writeNixie2Number+0x268>
 80006b6:	009a      	lsls	r2, r3, #2
 80006b8:	4ba3      	ldr	r3, [pc, #652]	; (8000948 <writeNixie2Number+0x2ac>)
 80006ba:	18d3      	adds	r3, r2, r3
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 80006c0:	23a0      	movs	r3, #160	; 0xa0
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fd5b 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2200      	movs	r2, #0
 80006d4:	2104      	movs	r1, #4
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fd54 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 80006dc:	23a0      	movs	r3, #160	; 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	2200      	movs	r2, #0
 80006e2:	2108      	movs	r1, #8
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fd4d 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 80006ea:	23a0      	movs	r3, #160	; 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	2200      	movs	r2, #0
 80006f0:	2102      	movs	r1, #2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fd46 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 80006f8:	e121      	b.n	800093e <writeNixie2Number+0x2a2>
		case 1:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 80006fa:	23a0      	movs	r3, #160	; 0xa0
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	2201      	movs	r2, #1
 8000700:	2101      	movs	r1, #1
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fd3e 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	2200      	movs	r2, #0
 800070e:	2104      	movs	r1, #4
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fd37 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 8000716:	23a0      	movs	r3, #160	; 0xa0
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	2200      	movs	r2, #0
 800071c:	2108      	movs	r1, #8
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fd30 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 8000724:	23a0      	movs	r3, #160	; 0xa0
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	2200      	movs	r2, #0
 800072a:	2102      	movs	r1, #2
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fd29 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 8000732:	e104      	b.n	800093e <writeNixie2Number+0x2a2>
		case 2:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	2200      	movs	r2, #0
 800073a:	2101      	movs	r1, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fd21 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2201      	movs	r2, #1
 8000748:	2104      	movs	r1, #4
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fd1a 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 8000750:	23a0      	movs	r3, #160	; 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2200      	movs	r2, #0
 8000756:	2108      	movs	r1, #8
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fd13 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	2200      	movs	r2, #0
 8000764:	2102      	movs	r1, #2
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fd0c 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 800076c:	e0e7      	b.n	800093e <writeNixie2Number+0x2a2>
		case 3:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 800076e:	23a0      	movs	r3, #160	; 0xa0
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fd04 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	2201      	movs	r2, #1
 8000782:	2104      	movs	r1, #4
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fcfd 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 800078a:	23a0      	movs	r3, #160	; 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	2200      	movs	r2, #0
 8000790:	2108      	movs	r1, #8
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fcf6 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	2200      	movs	r2, #0
 800079e:	2102      	movs	r1, #2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fcef 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 80007a6:	e0ca      	b.n	800093e <writeNixie2Number+0x2a2>
		case 4:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 80007a8:	23a0      	movs	r3, #160	; 0xa0
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fce7 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2200      	movs	r2, #0
 80007bc:	2104      	movs	r1, #4
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fce0 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2201      	movs	r2, #1
 80007ca:	2108      	movs	r1, #8
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fcd9 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 80007d2:	23a0      	movs	r3, #160	; 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	2200      	movs	r2, #0
 80007d8:	2102      	movs	r1, #2
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fcd2 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 80007e0:	e0ad      	b.n	800093e <writeNixie2Number+0x2a2>
		case 5:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 80007e2:	23a0      	movs	r3, #160	; 0xa0
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	2201      	movs	r2, #1
 80007e8:	2101      	movs	r1, #1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fcca 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fcc3 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	2201      	movs	r2, #1
 8000804:	2108      	movs	r1, #8
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fcbc 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 800080c:	23a0      	movs	r3, #160	; 0xa0
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	2200      	movs	r2, #0
 8000812:	2102      	movs	r1, #2
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fcb5 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 800081a:	e090      	b.n	800093e <writeNixie2Number+0x2a2>
		case 6:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2200      	movs	r2, #0
 8000822:	2101      	movs	r1, #1
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fcad 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 800082a:	23a0      	movs	r3, #160	; 0xa0
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	2201      	movs	r2, #1
 8000830:	2104      	movs	r1, #4
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fca6 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2201      	movs	r2, #1
 800083e:	2108      	movs	r1, #8
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fc9f 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2200      	movs	r2, #0
 800084c:	2102      	movs	r1, #2
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fc98 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 8000854:	e073      	b.n	800093e <writeNixie2Number+0x2a2>
		case 7:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2201      	movs	r2, #1
 800085c:	2101      	movs	r1, #1
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fc90 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2201      	movs	r2, #1
 800086a:	2104      	movs	r1, #4
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fc89 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2201      	movs	r2, #1
 8000878:	2108      	movs	r1, #8
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fc82 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 8000880:	23a0      	movs	r3, #160	; 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fc7b 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 800088e:	e056      	b.n	800093e <writeNixie2Number+0x2a2>
		case 8:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fc73 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2200      	movs	r2, #0
 80008a4:	2104      	movs	r1, #4
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fc6c 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	2200      	movs	r2, #0
 80008b2:	2108      	movs	r1, #8
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fc65 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 1);
 80008ba:	23a0      	movs	r3, #160	; 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	2201      	movs	r2, #1
 80008c0:	2102      	movs	r1, #2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fc5e 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 80008c8:	e039      	b.n	800093e <writeNixie2Number+0x2a2>
		case 9:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 80008ca:	23a0      	movs	r3, #160	; 0xa0
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	2201      	movs	r2, #1
 80008d0:	2101      	movs	r1, #1
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 fc56 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2200      	movs	r2, #0
 80008de:	2104      	movs	r1, #4
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fc4f 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fc48 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 1);
 80008f4:	23a0      	movs	r3, #160	; 0xa0
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2201      	movs	r2, #1
 80008fa:	2102      	movs	r1, #2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fc41 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 8000902:	e01c      	b.n	800093e <writeNixie2Number+0x2a2>
		default:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 8000904:	23a0      	movs	r3, #160	; 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	2201      	movs	r2, #1
 800090a:	2101      	movs	r1, #1
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fc39 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	2201      	movs	r2, #1
 8000918:	2104      	movs	r1, #4
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fc32 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	2201      	movs	r2, #1
 8000926:	2108      	movs	r1, #8
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fc2b 	bl	8001184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 1);
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2201      	movs	r2, #1
 8000934:	2102      	movs	r1, #2
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fc24 	bl	8001184 <HAL_GPIO_WritePin>
			break;
 800093c:	46c0      	nop			; (mov r8, r8)

	}

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	08001c40 	.word	0x08001c40

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f000 f955 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f832 	bl	80009be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f000 f879 	bl	8000a50 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  int seconds = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_GPIO_WritePin(GPIOA, NIXIE_SHUTDOWN_Pin, 0);
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	0159      	lsls	r1, r3, #5
 8000966:	23a0      	movs	r3, #160	; 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2200      	movs	r2, #0
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fc09 	bl	8001184 <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8000972:	2064      	movs	r0, #100	; 0x64
 8000974:	f000 f9ca 	bl	8000d0c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	011a      	lsls	r2, r3, #4
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fc1b 	bl	80011be <HAL_GPIO_TogglePin>
	seconds++;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3301      	adds	r3, #1
 800098c:	607b      	str	r3, [r7, #4]

	if (seconds == 100){
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b64      	cmp	r3, #100	; 0x64
 8000992:	d101      	bne.n	8000998 <main+0x4c>
		seconds = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
	}


	writeNixie2Number(seconds % 10);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	210a      	movs	r1, #10
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fd1f 	bl	80003e0 <__aeabi_idivmod>
 80009a2:	000b      	movs	r3, r1
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fe79 	bl	800069c <writeNixie2Number>
	writeNixie1Number(seconds / 10);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	210a      	movs	r1, #10
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fc30 	bl	8000214 <__divsi3>
 80009b4:	0003      	movs	r3, r0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff fd18 	bl	80003ec <writeNixie1Number>
	HAL_GPIO_WritePin(GPIOA, NIXIE_SHUTDOWN_Pin, 0);
 80009bc:	e7d1      	b.n	8000962 <main+0x16>

080009be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009be:	b590      	push	{r4, r7, lr}
 80009c0:	b093      	sub	sp, #76	; 0x4c
 80009c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c4:	2414      	movs	r4, #20
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2334      	movs	r3, #52	; 0x34
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f001 f90e 	bl	8001bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	0018      	movs	r0, r3
 80009d8:	2310      	movs	r3, #16
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f001 f907 	bl	8001bf0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fc04 	bl	80011f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2202      	movs	r2, #2
 80009f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	0052      	lsls	r2, r2, #1
 80009f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2240      	movs	r2, #64	; 0x40
 8000a06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fc2f 	bl	8001274 <HAL_RCC_OscConfig>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000a1a:	f000 f881 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2100      	movs	r1, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 ff2a 	bl	8001894 <HAL_RCC_ClockConfig>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a44:	f000 f86c 	bl	8000b20 <Error_Handler>
  }
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b013      	add	sp, #76	; 0x4c
 8000a4e:	bd90      	pop	{r4, r7, pc}

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f001 f8c6 	bl	8001bf0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <MX_GPIO_Init+0xc8>)
 8000a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_GPIO_Init+0xc8>)
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <MX_GPIO_Init+0xc8>)
 8000a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a74:	2201      	movs	r2, #1
 8000a76:	4013      	ands	r3, r2
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin|IN_17_2_D_Pin|IN_17_2_B_Pin|IN_17_2_C_Pin
 8000a7c:	4927      	ldr	r1, [pc, #156]	; (8000b1c <MX_GPIO_Init+0xcc>)
 8000a7e:	23a0      	movs	r3, #160	; 0xa0
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	2201      	movs	r2, #1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fb7d 	bl	8001184 <HAL_GPIO_WritePin>
                          |IN_17_1_A_Pin|IN_17_1_D_Pin|IN_17_1_B_Pin|IN_17_1_C_Pin
                          |NIXIE_SHUTDOWN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	0119      	lsls	r1, r3, #4
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2200      	movs	r2, #0
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fb75 	bl	8001184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN_17_2_A_Pin IN_17_2_D_Pin IN_17_2_B_Pin IN_17_2_C_Pin
                           IN_17_1_A_Pin IN_17_1_D_Pin IN_17_1_B_Pin IN_17_1_C_Pin */
  GPIO_InitStruct.Pin = IN_17_2_A_Pin|IN_17_2_D_Pin|IN_17_2_B_Pin|IN_17_2_C_Pin
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	601a      	str	r2, [r3, #0]
                          |IN_17_1_A_Pin|IN_17_1_D_Pin|IN_17_1_B_Pin|IN_17_1_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2211      	movs	r2, #17
 8000aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2202      	movs	r2, #2
 8000ab0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	1d3a      	adds	r2, r7, #4
 8000ab4:	23a0      	movs	r3, #160	; 0xa0
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f9fe 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLINK_Pin */
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2201      	movs	r2, #1
 8000acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 8000ada:	1d3a      	adds	r2, r7, #4
 8000adc:	23a0      	movs	r3, #160	; 0xa0
 8000ade:	05db      	lsls	r3, r3, #23
 8000ae0:	0011      	movs	r1, r2
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f9ea 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : NIXIE_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = NIXIE_SHUTDOWN_Pin;
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	0152      	lsls	r2, r2, #5
 8000aee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2211      	movs	r2, #17
 8000af4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2201      	movs	r2, #1
 8000afa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NIXIE_SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000b02:	1d3a      	adds	r2, r7, #4
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f9d6 	bl	8000ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b006      	add	sp, #24
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	000010ff 	.word	0x000010ff

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	2201      	movs	r2, #1
 8000b44:	4013      	ands	r3, r2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0549      	lsls	r1, r1, #21
 8000b54:	430a      	orrs	r2, r1
 8000b56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_MspInit+0x44>)
 8000b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	055b      	lsls	r3, r3, #21
 8000b60:	4013      	ands	r3, r2
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f89c 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff fff7 	bl	8000ba2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bda:	f000 ffe5 	bl	8001ba8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bde:	f7ff feb5 	bl	800094c <main>

08000be2 <LoopForever>:

LoopForever:
  b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   r0, =_estack
 8000be4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf0:	08001cb0 	.word	0x08001cb0
  ldr r2, =_sbss
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf8:	2000002c 	.word	0x2000002c

08000bfc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_Init+0x3c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_Init+0x3c>)
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	0049      	lsls	r1, r1, #1
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f810 	bl	8000c40 <HAL_InitTick>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e001      	b.n	8000c30 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff ff7e 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_InitTick+0x88>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d02b      	beq.n	8000cb0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_InitTick+0x8c>)
 8000c5a:	681c      	ldr	r4, [r3, #0]
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_InitTick+0x88>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	0019      	movs	r1, r3
 8000c62:	23fa      	movs	r3, #250	; 0xfa
 8000c64:	0098      	lsls	r0, r3, #2
 8000c66:	f7ff fa4b 	bl	8000100 <__udivsi3>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	0020      	movs	r0, r4
 8000c70:	f7ff fa46 	bl	8000100 <__udivsi3>
 8000c74:	0003      	movs	r3, r0
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f913 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d112      	bne.n	8000ca6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d80a      	bhi.n	8000c9c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 f8f2 	bl	8000e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_InitTick+0x90>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e00d      	b.n	8000cb8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e008      	b.n	8000cb8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	e003      	b.n	8000cb8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	781b      	ldrb	r3, [r3, #0]
}
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b005      	add	sp, #20
 8000cc4:	bd90      	pop	{r4, r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x1c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	18d2      	adds	r2, r2, r3
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce6:	601a      	str	r2, [r3, #0]
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000028 	.word	0x20000028

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <HAL_GetTick+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000028 	.word	0x20000028

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff fff0 	bl	8000cf8 <HAL_GetTick>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	f7ff ffe0 	bl	8000cf8 <HAL_GetTick>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b004      	add	sp, #16
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	20000008 	.word	0x20000008

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b7f      	cmp	r3, #127	; 0x7f
 8000d68:	d828      	bhi.n	8000dbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <__NVIC_SetPriority+0xd4>)
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	33c0      	adds	r3, #192	; 0xc0
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	589b      	ldr	r3, [r3, r2]
 8000d7a:	1dfa      	adds	r2, r7, #7
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	2203      	movs	r2, #3
 8000d82:	400a      	ands	r2, r1
 8000d84:	00d2      	lsls	r2, r2, #3
 8000d86:	21ff      	movs	r1, #255	; 0xff
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	401a      	ands	r2, r3
 8000d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	019b      	lsls	r3, r3, #6
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	401a      	ands	r2, r3
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	2303      	movs	r3, #3
 8000da2:	4003      	ands	r3, r0
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	481f      	ldr	r0, [pc, #124]	; (8000e28 <__NVIC_SetPriority+0xd4>)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	430a      	orrs	r2, r1
 8000db4:	33c0      	adds	r3, #192	; 0xc0
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dba:	e031      	b.n	8000e20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <__NVIC_SetPriority+0xd8>)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	3b08      	subs	r3, #8
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	3306      	adds	r3, #6
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	1dfa      	adds	r2, r7, #7
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	0011      	movs	r1, r2
 8000ddc:	2203      	movs	r2, #3
 8000dde:	400a      	ands	r2, r1
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	21ff      	movs	r1, #255	; 0xff
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	401a      	ands	r2, r3
 8000dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	22ff      	movs	r2, #255	; 0xff
 8000df4:	401a      	ands	r2, r3
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	4003      	ands	r3, r0
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <__NVIC_SetPriority+0xd8>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	001c      	movs	r4, r3
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	4023      	ands	r3, r4
 8000e10:	3b08      	subs	r3, #8
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	430a      	orrs	r2, r1
 8000e16:	3306      	adds	r3, #6
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	18c3      	adds	r3, r0, r3
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b003      	add	sp, #12
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	1e5a      	subs	r2, r3, #1
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	045b      	lsls	r3, r3, #17
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d301      	bcc.n	8000e48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e44:	2301      	movs	r3, #1
 8000e46:	e010      	b.n	8000e6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <SysTick_Config+0x44>)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e50:	2301      	movs	r3, #1
 8000e52:	425b      	negs	r3, r3
 8000e54:	2103      	movs	r1, #3
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff ff7c 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x44>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x44>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	210f      	movs	r1, #15
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	1c02      	adds	r2, r0, #0
 8000e88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b004      	add	sp, #16
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ffbf 	bl	8000e30 <SysTick_Config>
 8000eb2:	0003      	movs	r3, r0
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eca:	e147      	b.n	800115c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <HAL_GPIO_Init+0x28>
 8000ee2:	e138      	b.n	8001156 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x40>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	2201      	movs	r2, #1
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2203      	movs	r2, #3
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d017      	beq.n	8000f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d123      	bne.n	8000fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	58d3      	ldr	r3, [r2, r3]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	4013      	ands	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	6939      	ldr	r1, [r7, #16]
 8000fec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	43da      	mvns	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	401a      	ands	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	23c0      	movs	r3, #192	; 0xc0
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	d100      	bne.n	8001030 <HAL_GPIO_Init+0x174>
 800102e:	e092      	b.n	8001156 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001030:	4a50      	ldr	r2, [pc, #320]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3318      	adds	r3, #24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	589b      	ldr	r3, [r3, r2]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2203      	movs	r2, #3
 8001042:	4013      	ands	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	220f      	movs	r2, #15
 8001048:	409a      	lsls	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	23a0      	movs	r3, #160	; 0xa0
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	429a      	cmp	r2, r3
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x1ca>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a45      	ldr	r2, [pc, #276]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x1c6>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a44      	ldr	r2, [pc, #272]	; (800117c <HAL_GPIO_Init+0x2c0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x1c2>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a43      	ldr	r2, [pc, #268]	; (8001180 <HAL_GPIO_Init+0x2c4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x1be>
 8001076:	2303      	movs	r3, #3
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x1cc>
 800107a:	2305      	movs	r3, #5
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x1cc>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x1cc>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x1cc>
 8001086:	2300      	movs	r3, #0
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	2103      	movs	r1, #3
 800108c:	400a      	ands	r2, r1
 800108e:	00d2      	lsls	r2, r2, #3
 8001090:	4093      	lsls	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001098:	4936      	ldr	r1, [pc, #216]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3318      	adds	r3, #24
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	035b      	lsls	r3, r3, #13
 80010be:	4013      	ands	r3, r2
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43da      	mvns	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	039b      	lsls	r3, r3, #14
 80010e8:	4013      	ands	r3, r2
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 80010fc:	2384      	movs	r3, #132	; 0x84
 80010fe:	58d3      	ldr	r3, [r2, r3]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43da      	mvns	r2, r3
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001120:	4914      	ldr	r1, [pc, #80]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 8001122:	2284      	movs	r2, #132	; 0x84
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	58d3      	ldr	r3, [r2, r3]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	025b      	lsls	r3, r3, #9
 8001142:	4013      	ands	r3, r2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800114e:	4909      	ldr	r1, [pc, #36]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	40da      	lsrs	r2, r3
 8001164:	1e13      	subs	r3, r2, #0
 8001166:	d000      	beq.n	800116a <HAL_GPIO_Init+0x2ae>
 8001168:	e6b0      	b.n	8000ecc <HAL_GPIO_Init+0x10>
  }
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b006      	add	sp, #24
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021800 	.word	0x40021800
 8001178:	50000400 	.word	0x50000400
 800117c:	50000800 	.word	0x50000800
 8001180:	50000c00 	.word	0x50000c00

08001184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	0008      	movs	r0, r1
 800118e:	0011      	movs	r1, r2
 8001190:	1cbb      	adds	r3, r7, #2
 8001192:	1c02      	adds	r2, r0, #0
 8001194:	801a      	strh	r2, [r3, #0]
 8001196:	1c7b      	adds	r3, r7, #1
 8001198:	1c0a      	adds	r2, r1, #0
 800119a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800119c:	1c7b      	adds	r3, r7, #1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a4:	1cbb      	adds	r3, r7, #2
 80011a6:	881a      	ldrh	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ac:	e003      	b.n	80011b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ae:	1cbb      	adds	r3, r7, #2
 80011b0:	881a      	ldrh	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	000a      	movs	r2, r1
 80011c8:	1cbb      	adds	r3, r7, #2
 80011ca:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011d2:	1cbb      	adds	r3, r7, #2
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	4013      	ands	r3, r2
 80011da:	041a      	lsls	r2, r3, #16
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	1cb9      	adds	r1, r7, #2
 80011e2:	8809      	ldrh	r1, [r1, #0]
 80011e4:	400b      	ands	r3, r1
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001202:	4013      	ands	r3, r2
 8001204:	0019      	movs	r1, r3
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	430a      	orrs	r2, r1
 800120c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	429a      	cmp	r2, r3
 8001216:	d11f      	bne.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	0013      	movs	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	189b      	adds	r3, r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4912      	ldr	r1, [pc, #72]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001226:	0018      	movs	r0, r3
 8001228:	f7fe ff6a 	bl	8000100 <__udivsi3>
 800122c:	0003      	movs	r3, r0
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001232:	e008      	b.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3b01      	subs	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e001      	b.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e009      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	401a      	ands	r2, r3
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	429a      	cmp	r2, r3
 8001256:	d0ed      	beq.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	40007000 	.word	0x40007000
 8001268:	fffff9ff 	.word	0xfffff9ff
 800126c:	20000000 	.word	0x20000000
 8001270:	000f4240 	.word	0x000f4240

08001274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e2f3      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4013      	ands	r3, r2
 800128e:	d100      	bne.n	8001292 <HAL_RCC_OscConfig+0x1e>
 8001290:	e07c      	b.n	800138c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001292:	4bc3      	ldr	r3, [pc, #780]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2238      	movs	r2, #56	; 0x38
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129c:	4bc0      	ldr	r3, [pc, #768]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2203      	movs	r2, #3
 80012a2:	4013      	ands	r3, r2
 80012a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d102      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3e>
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d002      	beq.n	80012b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d10b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	4bb9      	ldr	r3, [pc, #740]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	d062      	beq.n	800138a <HAL_RCC_OscConfig+0x116>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d15e      	bne.n	800138a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e2ce      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	025b      	lsls	r3, r3, #9
 80012d8:	429a      	cmp	r2, r3
 80012da:	d107      	bne.n	80012ec <HAL_RCC_OscConfig+0x78>
 80012dc:	4bb0      	ldr	r3, [pc, #704]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4baf      	ldr	r3, [pc, #700]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	0249      	lsls	r1, r1, #9
 80012e6:	430a      	orrs	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e020      	b.n	800132e <HAL_RCC_OscConfig+0xba>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	02db      	lsls	r3, r3, #11
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d10e      	bne.n	8001316 <HAL_RCC_OscConfig+0xa2>
 80012f8:	4ba9      	ldr	r3, [pc, #676]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4ba8      	ldr	r3, [pc, #672]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	02c9      	lsls	r1, r1, #11
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	4ba6      	ldr	r3, [pc, #664]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4ba5      	ldr	r3, [pc, #660]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0249      	lsls	r1, r1, #9
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e00b      	b.n	800132e <HAL_RCC_OscConfig+0xba>
 8001316:	4ba2      	ldr	r3, [pc, #648]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4ba1      	ldr	r3, [pc, #644]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800131c:	49a1      	ldr	r1, [pc, #644]	; (80015a4 <HAL_RCC_OscConfig+0x330>)
 800131e:	400a      	ands	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	4b9f      	ldr	r3, [pc, #636]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b9e      	ldr	r3, [pc, #632]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001328:	499f      	ldr	r1, [pc, #636]	; (80015a8 <HAL_RCC_OscConfig+0x334>)
 800132a:	400a      	ands	r2, r1
 800132c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d014      	beq.n	8001360 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001336:	f7ff fcdf 	bl	8000cf8 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fcda 	bl	8000cf8 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e28d      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001352:	4b93      	ldr	r3, [pc, #588]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	029b      	lsls	r3, r3, #10
 800135a:	4013      	ands	r3, r2
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0xcc>
 800135e:	e015      	b.n	800138c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fcca 	bl	8000cf8 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136a:	f7ff fcc5 	bl	8000cf8 <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b64      	cmp	r3, #100	; 0x64
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e278      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800137c:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	029b      	lsls	r3, r3, #10
 8001384:	4013      	ands	r3, r2
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0xf6>
 8001388:	e000      	b.n	800138c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2202      	movs	r2, #2
 8001392:	4013      	ands	r3, r2
 8001394:	d100      	bne.n	8001398 <HAL_RCC_OscConfig+0x124>
 8001396:	e099      	b.n	80014cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001398:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2238      	movs	r2, #56	; 0x38
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a2:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2203      	movs	r2, #3
 80013a8:	4013      	ands	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d102      	bne.n	80013b8 <HAL_RCC_OscConfig+0x144>
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d002      	beq.n	80013be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d135      	bne.n	800142a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013be:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4013      	ands	r3, r2
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x162>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e24b      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a74      	ldr	r2, [pc, #464]	; (80015ac <HAL_RCC_OscConfig+0x338>)
 80013dc:	4013      	ands	r3, r2
 80013de:	0019      	movs	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	021a      	lsls	r2, r3, #8
 80013e6:	4b6e      	ldr	r3, [pc, #440]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80013e8:	430a      	orrs	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013f2:	4b6b      	ldr	r3, [pc, #428]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <HAL_RCC_OscConfig+0x33c>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	0019      	movs	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001406:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0adb      	lsrs	r3, r3, #11
 800140c:	2207      	movs	r2, #7
 800140e:	4013      	ands	r3, r2
 8001410:	4a68      	ldr	r2, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001412:	40da      	lsrs	r2, r3
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x344>)
 8001416:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x348>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fc0f 	bl	8000c40 <HAL_InitTick>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d051      	beq.n	80014ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e221      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d030      	beq.n	8001494 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001432:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a5e      	ldr	r2, [pc, #376]	; (80015b0 <HAL_RCC_OscConfig+0x33c>)
 8001438:	4013      	ands	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001446:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	0049      	lsls	r1, r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fc50 	bl	8000cf8 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc4b 	bl	8000cf8 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1fe      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001470:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4013      	ands	r3, r2
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b48      	ldr	r3, [pc, #288]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_RCC_OscConfig+0x338>)
 8001482:	4013      	ands	r3, r2
 8001484:	0019      	movs	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	021a      	lsls	r2, r3, #8
 800148c:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	e01b      	b.n	80014cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001494:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800149a:	4949      	ldr	r1, [pc, #292]	; (80015c0 <HAL_RCC_OscConfig+0x34c>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc2a 	bl	8000cf8 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc25 	bl	8000cf8 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1d8      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014bc:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x236>
 80014c8:	e000      	b.n	80014cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2208      	movs	r2, #8
 80014d2:	4013      	ands	r3, r2
 80014d4:	d047      	beq.n	8001566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2238      	movs	r2, #56	; 0x38
 80014dc:	4013      	ands	r3, r2
 80014de:	2b18      	cmp	r3, #24
 80014e0:	d10a      	bne.n	80014f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d03c      	beq.n	8001566 <HAL_RCC_OscConfig+0x2f2>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d138      	bne.n	8001566 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e1ba      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d019      	beq.n	8001534 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001502:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001506:	2101      	movs	r1, #1
 8001508:	430a      	orrs	r2, r1
 800150a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fbf4 	bl	8000cf8 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fbef 	bl	8000cf8 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1a2      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800152a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152c:	2202      	movs	r2, #2
 800152e:	4013      	ands	r3, r2
 8001530:	d0f1      	beq.n	8001516 <HAL_RCC_OscConfig+0x2a2>
 8001532:	e018      	b.n	8001566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001536:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800153a:	2101      	movs	r1, #1
 800153c:	438a      	bics	r2, r1
 800153e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fbda 	bl	8000cf8 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fbd5 	bl	8000cf8 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e188      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	2202      	movs	r2, #2
 8001562:	4013      	ands	r3, r2
 8001564:	d1f1      	bne.n	800154a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2204      	movs	r2, #4
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x2fe>
 8001570:	e0c6      	b.n	8001700 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	231f      	movs	r3, #31
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2238      	movs	r2, #56	; 0x38
 8001580:	4013      	ands	r3, r2
 8001582:	2b20      	cmp	r3, #32
 8001584:	d11e      	bne.n	80015c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_RCC_OscConfig+0x32c>)
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	2202      	movs	r2, #2
 800158c:	4013      	ands	r3, r2
 800158e:	d100      	bne.n	8001592 <HAL_RCC_OscConfig+0x31e>
 8001590:	e0b6      	b.n	8001700 <HAL_RCC_OscConfig+0x48c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d000      	beq.n	800159c <HAL_RCC_OscConfig+0x328>
 800159a:	e0b1      	b.n	8001700 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e166      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	fffeffff 	.word	0xfffeffff
 80015a8:	fffbffff 	.word	0xfffbffff
 80015ac:	ffff80ff 	.word	0xffff80ff
 80015b0:	ffffc7ff 	.word	0xffffc7ff
 80015b4:	00f42400 	.word	0x00f42400
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000004 	.word	0x20000004
 80015c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015c4:	4bac      	ldr	r3, [pc, #688]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80015c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	055b      	lsls	r3, r3, #21
 80015cc:	4013      	ands	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_OscConfig+0x360>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x362>
 80015d4:	2300      	movs	r3, #0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d011      	beq.n	80015fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4ba7      	ldr	r3, [pc, #668]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80015dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015de:	4ba6      	ldr	r3, [pc, #664]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0549      	lsls	r1, r1, #21
 80015e4:	430a      	orrs	r2, r1
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015e8:	4ba3      	ldr	r3, [pc, #652]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80015ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	055b      	lsls	r3, r3, #21
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015f6:	231f      	movs	r3, #31
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fe:	4b9f      	ldr	r3, [pc, #636]	; (800187c <HAL_RCC_OscConfig+0x608>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4013      	ands	r3, r2
 8001608:	d11a      	bne.n	8001640 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800160a:	4b9c      	ldr	r3, [pc, #624]	; (800187c <HAL_RCC_OscConfig+0x608>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b9b      	ldr	r3, [pc, #620]	; (800187c <HAL_RCC_OscConfig+0x608>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0049      	lsls	r1, r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb6e 	bl	8000cf8 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff fb69 	bl	8000cf8 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e11c      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001634:	4b91      	ldr	r3, [pc, #580]	; (800187c <HAL_RCC_OscConfig+0x608>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4013      	ands	r3, r2
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x3e2>
 8001648:	4b8b      	ldr	r3, [pc, #556]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800164a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800164c:	4b8a      	ldr	r3, [pc, #552]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800164e:	2101      	movs	r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	65da      	str	r2, [r3, #92]	; 0x5c
 8001654:	e01c      	b.n	8001690 <HAL_RCC_OscConfig+0x41c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x404>
 800165e:	4b86      	ldr	r3, [pc, #536]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001662:	4b85      	ldr	r3, [pc, #532]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001664:	2104      	movs	r1, #4
 8001666:	430a      	orrs	r2, r1
 8001668:	65da      	str	r2, [r3, #92]	; 0x5c
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800166c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800166e:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001670:	2101      	movs	r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	65da      	str	r2, [r3, #92]	; 0x5c
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0x41c>
 8001678:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800167a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800167c:	4b7e      	ldr	r3, [pc, #504]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800167e:	2101      	movs	r1, #1
 8001680:	438a      	bics	r2, r1
 8001682:	65da      	str	r2, [r3, #92]	; 0x5c
 8001684:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001688:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800168a:	2104      	movs	r1, #4
 800168c:	438a      	bics	r2, r1
 800168e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d014      	beq.n	80016c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb2e 	bl	8000cf8 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a0:	e009      	b.n	80016b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fb29 	bl	8000cf8 <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a74      	ldr	r2, [pc, #464]	; (8001880 <HAL_RCC_OscConfig+0x60c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0db      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b6:	4b70      	ldr	r3, [pc, #448]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x42e>
 80016c0:	e013      	b.n	80016ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff fb19 	bl	8000cf8 <HAL_GetTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ca:	e009      	b.n	80016e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7ff fb14 	bl	8000cf8 <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	4a6a      	ldr	r2, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x60c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0c6      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e0:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016ea:	231f      	movs	r3, #31
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016f4:	4b60      	ldr	r3, [pc, #384]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80016f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016f8:	4b5f      	ldr	r3, [pc, #380]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80016fa:	4962      	ldr	r1, [pc, #392]	; (8001884 <HAL_RCC_OscConfig+0x610>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x496>
 8001708:	e0b0      	b.n	800186c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2238      	movs	r2, #56	; 0x38
 8001710:	4013      	ands	r3, r2
 8001712:	2b10      	cmp	r3, #16
 8001714:	d100      	bne.n	8001718 <HAL_RCC_OscConfig+0x4a4>
 8001716:	e078      	b.n	800180a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d153      	bne.n	80017c8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b55      	ldr	r3, [pc, #340]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b54      	ldr	r3, [pc, #336]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001726:	4958      	ldr	r1, [pc, #352]	; (8001888 <HAL_RCC_OscConfig+0x614>)
 8001728:	400a      	ands	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fae4 	bl	8000cf8 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fadf 	bl	8000cf8 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e092      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001748:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	049b      	lsls	r3, r3, #18
 8001750:	4013      	ands	r3, r2
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001754:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4a4c      	ldr	r2, [pc, #304]	; (800188c <HAL_RCC_OscConfig+0x618>)
 800175a:	4013      	ands	r3, r2
 800175c:	0019      	movs	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	431a      	orrs	r2, r3
 800177c:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 800177e:	430a      	orrs	r2, r1
 8001780:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0449      	lsls	r1, r1, #17
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001790:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	0549      	lsls	r1, r1, #21
 800179a:	430a      	orrs	r2, r1
 800179c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff faab 	bl	8000cf8 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff faa6 	bl	8000cf8 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e059      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ba:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	049b      	lsls	r3, r3, #18
 80017c2:	4013      	ands	r3, r2
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x534>
 80017c6:	e051      	b.n	800186c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80017ce:	492e      	ldr	r1, [pc, #184]	; (8001888 <HAL_RCC_OscConfig+0x614>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fa90 	bl	8000cf8 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff fa8b 	bl	8000cf8 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e03e      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	049b      	lsls	r3, r3, #18
 80017f8:	4013      	ands	r3, r2
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001802:	4923      	ldr	r1, [pc, #140]	; (8001890 <HAL_RCC_OscConfig+0x61c>)
 8001804:	400a      	ands	r2, r1
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	e030      	b.n	800186c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e02b      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_RCC_OscConfig+0x604>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2203      	movs	r2, #3
 8001820:	401a      	ands	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	429a      	cmp	r2, r3
 8001828:	d11e      	bne.n	8001868 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2270      	movs	r2, #112	; 0x70
 800182e:	401a      	ands	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d117      	bne.n	8001868 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	23fe      	movs	r3, #254	; 0xfe
 800183c:	01db      	lsls	r3, r3, #7
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d10e      	bne.n	8001868 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	23f8      	movs	r3, #248	; 0xf8
 800184e:	039b      	lsls	r3, r3, #14
 8001850:	401a      	ands	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d106      	bne.n	8001868 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	0f5b      	lsrs	r3, r3, #29
 800185e:	075a      	lsls	r2, r3, #29
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b008      	add	sp, #32
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40021000 	.word	0x40021000
 800187c:	40007000 	.word	0x40007000
 8001880:	00001388 	.word	0x00001388
 8001884:	efffffff 	.word	0xefffffff
 8001888:	feffffff 	.word	0xfeffffff
 800188c:	1fc1808c 	.word	0x1fc1808c
 8001890:	effefffc 	.word	0xeffefffc

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0e9      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b76      	ldr	r3, [pc, #472]	; (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2207      	movs	r2, #7
 80018ae:	4013      	ands	r3, r2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d91e      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b73      	ldr	r3, [pc, #460]	; (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2207      	movs	r2, #7
 80018bc:	4393      	bics	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	4b70      	ldr	r3, [pc, #448]	; (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018c8:	f7ff fa16 	bl	8000cf8 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d2:	f7ff fa11 	bl	8000cf8 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a6a      	ldr	r2, [pc, #424]	; (8001a88 <HAL_RCC_ClockConfig+0x1f4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0ca      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2207      	movs	r2, #7
 80018ec:	4013      	ands	r3, r2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1ee      	bne.n	80018d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d015      	beq.n	800192a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2204      	movs	r2, #4
 8001904:	4013      	ands	r3, r2
 8001906:	d006      	beq.n	8001916 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001908:	4b60      	ldr	r3, [pc, #384]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	4b5f      	ldr	r3, [pc, #380]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 800190e:	21e0      	movs	r1, #224	; 0xe0
 8001910:	01c9      	lsls	r1, r1, #7
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001916:	4b5d      	ldr	r3, [pc, #372]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4a5d      	ldr	r2, [pc, #372]	; (8001a90 <HAL_RCC_ClockConfig+0x1fc>)
 800191c:	4013      	ands	r3, r2
 800191e:	0019      	movs	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	d057      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d107      	bne.n	800194c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	029b      	lsls	r3, r3, #10
 8001944:	4013      	ands	r3, r2
 8001946:	d12b      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e097      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d107      	bne.n	8001964 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001954:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	049b      	lsls	r3, r3, #18
 800195c:	4013      	ands	r3, r2
 800195e:	d11f      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e08b      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d107      	bne.n	800197c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4013      	ands	r3, r2
 8001976:	d113      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e07f      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d106      	bne.n	8001992 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001984:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001988:	2202      	movs	r2, #2
 800198a:	4013      	ands	r3, r2
 800198c:	d108      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e074      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001992:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e06d      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019a0:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2207      	movs	r2, #7
 80019a6:	4393      	bics	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b4:	f7ff f9a0 	bl	8000cf8 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019bc:	e009      	b.n	80019d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019be:	f7ff f99b 	bl	8000cf8 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_RCC_ClockConfig+0x1f4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e054      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2238      	movs	r2, #56	; 0x38
 80019d8:	401a      	ands	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1ec      	bne.n	80019be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2207      	movs	r2, #7
 80019ea:	4013      	ands	r3, r2
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d21e      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2207      	movs	r2, #7
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a04:	f7ff f978 	bl	8000cf8 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a0c:	e009      	b.n	8001a22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0e:	f7ff f973 	bl	8000cf8 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_RCC_ClockConfig+0x1f4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e02c      	b.n	8001a7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2207      	movs	r2, #7
 8001a28:	4013      	ands	r3, r2
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2204      	movs	r2, #4
 8001a36:	4013      	ands	r3, r2
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <HAL_RCC_ClockConfig+0x200>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a4e:	f000 f829 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8001a52:	0001      	movs	r1, r0
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_RCC_ClockConfig+0x204>)
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	58d3      	ldr	r3, [r2, r3]
 8001a64:	221f      	movs	r2, #31
 8001a66:	4013      	ands	r3, r2
 8001a68:	000a      	movs	r2, r1
 8001a6a:	40da      	lsrs	r2, r3
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_ClockConfig+0x208>)
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_ClockConfig+0x20c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff f8e3 	bl	8000c40 <HAL_InitTick>
 8001a7a:	0003      	movs	r3, r0
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b004      	add	sp, #16
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40022000 	.word	0x40022000
 8001a88:	00001388 	.word	0x00001388
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	fffff0ff 	.word	0xfffff0ff
 8001a94:	ffff8fff 	.word	0xffff8fff
 8001a98:	08001c68 	.word	0x08001c68
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2238      	movs	r2, #56	; 0x38
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0adb      	lsrs	r3, r3, #11
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	2201      	movs	r2, #1
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	4835      	ldr	r0, [pc, #212]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001aca:	f7fe fb19 	bl	8000100 <__udivsi3>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e05d      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad4:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2238      	movs	r2, #56	; 0x38
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e054      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2238      	movs	r2, #56	; 0x38
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d138      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2203      	movs	r2, #3
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	2207      	movs	r2, #7
 8001b04:	4013      	ands	r3, r2
 8001b06:	3301      	adds	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d10d      	bne.n	8001b2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	4824      	ldr	r0, [pc, #144]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b14:	f7fe faf4 	bl	8000100 <__udivsi3>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	227f      	movs	r2, #127	; 0x7f
 8001b24:	4013      	ands	r3, r2
 8001b26:	434b      	muls	r3, r1
 8001b28:	617b      	str	r3, [r7, #20]
        break;
 8001b2a:	e00d      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	481c      	ldr	r0, [pc, #112]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b30:	f7fe fae6 	bl	8000100 <__udivsi3>
 8001b34:	0003      	movs	r3, r0
 8001b36:	0019      	movs	r1, r3
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	227f      	movs	r2, #127	; 0x7f
 8001b40:	4013      	ands	r3, r2
 8001b42:	434b      	muls	r3, r1
 8001b44:	617b      	str	r3, [r7, #20]
        break;
 8001b46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0f5b      	lsrs	r3, r3, #29
 8001b4e:	2207      	movs	r2, #7
 8001b50:	4013      	ands	r3, r2
 8001b52:	3301      	adds	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f7fe fad1 	bl	8000100 <__udivsi3>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	e015      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2238      	movs	r2, #56	; 0x38
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d103      	bne.n	8001b78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2238      	movs	r2, #56	; 0x38
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b18      	cmp	r3, #24
 8001b82:	d103      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b84:	23fa      	movs	r3, #250	; 0xfa
 8001b86:	01db      	lsls	r3, r3, #7
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e001      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b90:	693b      	ldr	r3, [r7, #16]
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b006      	add	sp, #24
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	00f42400 	.word	0x00f42400
 8001ba4:	007a1200 	.word	0x007a1200

08001ba8 <__libc_init_array>:
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	2600      	movs	r6, #0
 8001bac:	4d0c      	ldr	r5, [pc, #48]	; (8001be0 <__libc_init_array+0x38>)
 8001bae:	4c0d      	ldr	r4, [pc, #52]	; (8001be4 <__libc_init_array+0x3c>)
 8001bb0:	1b64      	subs	r4, r4, r5
 8001bb2:	10a4      	asrs	r4, r4, #2
 8001bb4:	42a6      	cmp	r6, r4
 8001bb6:	d109      	bne.n	8001bcc <__libc_init_array+0x24>
 8001bb8:	2600      	movs	r6, #0
 8001bba:	f000 f821 	bl	8001c00 <_init>
 8001bbe:	4d0a      	ldr	r5, [pc, #40]	; (8001be8 <__libc_init_array+0x40>)
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <__libc_init_array+0x44>)
 8001bc2:	1b64      	subs	r4, r4, r5
 8001bc4:	10a4      	asrs	r4, r4, #2
 8001bc6:	42a6      	cmp	r6, r4
 8001bc8:	d105      	bne.n	8001bd6 <__libc_init_array+0x2e>
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
 8001bcc:	00b3      	lsls	r3, r6, #2
 8001bce:	58eb      	ldr	r3, [r5, r3]
 8001bd0:	4798      	blx	r3
 8001bd2:	3601      	adds	r6, #1
 8001bd4:	e7ee      	b.n	8001bb4 <__libc_init_array+0xc>
 8001bd6:	00b3      	lsls	r3, r6, #2
 8001bd8:	58eb      	ldr	r3, [r5, r3]
 8001bda:	4798      	blx	r3
 8001bdc:	3601      	adds	r6, #1
 8001bde:	e7f2      	b.n	8001bc6 <__libc_init_array+0x1e>
 8001be0:	08001ca8 	.word	0x08001ca8
 8001be4:	08001ca8 	.word	0x08001ca8
 8001be8:	08001ca8 	.word	0x08001ca8
 8001bec:	08001cac 	.word	0x08001cac

08001bf0 <memset>:
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	1882      	adds	r2, r0, r2
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <memset+0xa>
 8001bf8:	4770      	bx	lr
 8001bfa:	7019      	strb	r1, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	e7f9      	b.n	8001bf4 <memset+0x4>

08001c00 <_init>:
 8001c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c06:	bc08      	pop	{r3}
 8001c08:	469e      	mov	lr, r3
 8001c0a:	4770      	bx	lr

08001c0c <_fini>:
 8001c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c12:	bc08      	pop	{r3}
 8001c14:	469e      	mov	lr, r3
 8001c16:	4770      	bx	lr
