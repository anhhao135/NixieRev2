
Nixie_Rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002964  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aac  08002aac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002aac  08002aac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aac  08002aac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ab0  08002ab0  00012ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002ac0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002ac0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bf5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001851  00000000  00000000  00027c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  00029480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  00029c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000137ef  00000000  00000000  0002a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a077  00000000  00000000  0003db17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078f7d  00000000  00000000  00047b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a84  00000000  00000000  000c0b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002a04 	.word	0x08002a04

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002a04 	.word	0x08002a04

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <GetSeconds>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int GetSeconds(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, PCF85363A_I2C_ADDR, PCF85363A_REG_SECS, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80003f2:	4814      	ldr	r0, [pc, #80]	; (8000444 <GetSeconds+0x58>)
 80003f4:	2301      	movs	r3, #1
 80003f6:	425b      	negs	r3, r3
 80003f8:	9302      	str	r3, [sp, #8]
 80003fa:	2301      	movs	r3, #1
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	1d7b      	adds	r3, r7, #5
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2301      	movs	r3, #1
 8000404:	2201      	movs	r2, #1
 8000406:	21a2      	movs	r1, #162	; 0xa2
 8000408:	f001 f88c 	bl	8001524 <HAL_I2C_Mem_Read>

	uint8_t tens = (data & 0b01110000) >> 4;
 800040c:	1d7b      	adds	r3, r7, #5
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	111b      	asrs	r3, r3, #4
 8000412:	b2da      	uxtb	r2, r3
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	2107      	movs	r1, #7
 8000418:	400a      	ands	r2, r1
 800041a:	701a      	strb	r2, [r3, #0]
	uint8_t digits = data & 0b00001111;
 800041c:	1d7b      	adds	r3, r7, #5
 800041e:	781a      	ldrb	r2, [r3, #0]
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	210f      	movs	r1, #15
 8000424:	400a      	ands	r2, r1
 8000426:	701a      	strb	r2, [r3, #0]
	return tens * 10 + digits;
 8000428:	1dfb      	adds	r3, r7, #7
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	0013      	movs	r3, r2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	189b      	adds	r3, r3, r2
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	001a      	movs	r2, r3
 8000436:	1dbb      	adds	r3, r7, #6
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	18d3      	adds	r3, r2, r3
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b002      	add	sp, #8
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000028 	.word	0x20000028

08000448 <IMURead>:

int IMURead(){
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, IMU_I2C_ADDR, IMU_REG_WHOAMI, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800044e:	4809      	ldr	r0, [pc, #36]	; (8000474 <IMURead+0x2c>)
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	9302      	str	r3, [sp, #8]
 8000456:	2301      	movs	r3, #1
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2301      	movs	r3, #1
 8000460:	2275      	movs	r2, #117	; 0x75
 8000462:	21d0      	movs	r1, #208	; 0xd0
 8000464:	f001 f85e 	bl	8001524 <HAL_I2C_Mem_Read>

	return data;
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	781b      	ldrb	r3, [r3, #0]
}
 800046c:	0018      	movs	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000028 	.word	0x20000028

08000478 <writeNixie1Number>:


void writeNixie1Number(int number){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]

	switch(number%10){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	210a      	movs	r1, #10
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff ffab 	bl	80003e0 <__aeabi_idivmod>
 800048a:	000b      	movs	r3, r1
 800048c:	2b09      	cmp	r3, #9
 800048e:	d900      	bls.n	8000492 <writeNixie1Number+0x1a>
 8000490:	e126      	b.n	80006e0 <writeNixie1Number+0x268>
 8000492:	009a      	lsls	r2, r3, #2
 8000494:	4ba3      	ldr	r3, [pc, #652]	; (8000724 <writeNixie1Number+0x2ac>)
 8000496:	18d3      	adds	r3, r2, r3
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 800049c:	23a0      	movs	r3, #160	; 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2200      	movs	r2, #0
 80004a2:	2110      	movs	r1, #16
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 ff6f 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2200      	movs	r2, #0
 80004b0:	2140      	movs	r1, #64	; 0x40
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 ff68 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2200      	movs	r2, #0
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 ff61 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 80004c6:	23a0      	movs	r3, #160	; 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	2200      	movs	r2, #0
 80004cc:	2120      	movs	r1, #32
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 ff5a 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80004d4:	e121      	b.n	800071a <writeNixie1Number+0x2a2>
		case 1:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 80004d6:	23a0      	movs	r3, #160	; 0xa0
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	2201      	movs	r2, #1
 80004dc:	2110      	movs	r1, #16
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 ff52 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2200      	movs	r2, #0
 80004ea:	2140      	movs	r1, #64	; 0x40
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 ff4b 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 80004f2:	23a0      	movs	r3, #160	; 0xa0
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2200      	movs	r2, #0
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 ff44 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 8000500:	23a0      	movs	r3, #160	; 0xa0
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	2200      	movs	r2, #0
 8000506:	2120      	movs	r1, #32
 8000508:	0018      	movs	r0, r3
 800050a:	f000 ff3d 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 800050e:	e104      	b.n	800071a <writeNixie1Number+0x2a2>
		case 2:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2200      	movs	r2, #0
 8000516:	2110      	movs	r1, #16
 8000518:	0018      	movs	r0, r3
 800051a:	f000 ff35 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 800051e:	23a0      	movs	r3, #160	; 0xa0
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2201      	movs	r2, #1
 8000524:	2140      	movs	r1, #64	; 0x40
 8000526:	0018      	movs	r0, r3
 8000528:	f000 ff2e 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 800052c:	23a0      	movs	r3, #160	; 0xa0
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2200      	movs	r2, #0
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	0018      	movs	r0, r3
 8000536:	f000 ff27 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	f000 ff20 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 8000548:	e0e7      	b.n	800071a <writeNixie1Number+0x2a2>
		case 3:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 800054a:	23a0      	movs	r3, #160	; 0xa0
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	0018      	movs	r0, r3
 8000554:	f000 ff18 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 8000558:	23a0      	movs	r3, #160	; 0xa0
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	2201      	movs	r2, #1
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	0018      	movs	r0, r3
 8000562:	f000 ff11 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 8000566:	23a0      	movs	r3, #160	; 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	2200      	movs	r2, #0
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0018      	movs	r0, r3
 8000570:	f000 ff0a 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 8000574:	23a0      	movs	r3, #160	; 0xa0
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	2200      	movs	r2, #0
 800057a:	2120      	movs	r1, #32
 800057c:	0018      	movs	r0, r3
 800057e:	f000 ff03 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 8000582:	e0ca      	b.n	800071a <writeNixie1Number+0x2a2>
		case 4:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 8000584:	23a0      	movs	r3, #160	; 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fefb 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	2200      	movs	r2, #0
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fef4 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	2201      	movs	r2, #1
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 feed 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 80005ae:	23a0      	movs	r3, #160	; 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fee6 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80005bc:	e0ad      	b.n	800071a <writeNixie1Number+0x2a2>
		case 5:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2201      	movs	r2, #1
 80005c4:	2110      	movs	r1, #16
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 fede 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 80005cc:	23a0      	movs	r3, #160	; 0xa0
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 fed7 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 80005da:	23a0      	movs	r3, #160	; 0xa0
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	2201      	movs	r2, #1
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fed0 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 80005e8:	23a0      	movs	r3, #160	; 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fec9 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80005f6:	e090      	b.n	800071a <writeNixie1Number+0x2a2>
		case 6:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 80005f8:	23a0      	movs	r3, #160	; 0xa0
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	2200      	movs	r2, #0
 80005fe:	2110      	movs	r1, #16
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fec1 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	2201      	movs	r2, #1
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	0018      	movs	r0, r3
 8000610:	f000 feba 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 8000614:	23a0      	movs	r3, #160	; 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	2201      	movs	r2, #1
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0018      	movs	r0, r3
 800061e:	f000 feb3 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	0018      	movs	r0, r3
 800062c:	f000 feac 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 8000630:	e073      	b.n	800071a <writeNixie1Number+0x2a2>
		case 7:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2201      	movs	r2, #1
 8000638:	2110      	movs	r1, #16
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fea4 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2201      	movs	r2, #1
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fe9d 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2201      	movs	r2, #1
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fe96 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 0);
 800065c:	23a0      	movs	r3, #160	; 0xa0
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fe8f 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 800066a:	e056      	b.n	800071a <writeNixie1Number+0x2a2>
		case 8:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 0);
 800066c:	23a0      	movs	r3, #160	; 0xa0
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2200      	movs	r2, #0
 8000672:	2110      	movs	r1, #16
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fe87 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 800067a:	23a0      	movs	r3, #160	; 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fe80 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	2200      	movs	r2, #0
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fe79 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 1);
 8000696:	23a0      	movs	r3, #160	; 0xa0
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2201      	movs	r2, #1
 800069c:	2120      	movs	r1, #32
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fe72 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80006a4:	e039      	b.n	800071a <writeNixie1Number+0x2a2>
		case 9:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 80006a6:	23a0      	movs	r3, #160	; 0xa0
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fe6a 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 0);
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	2200      	movs	r2, #0
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fe63 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 0);
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fe5c 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 1);
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2201      	movs	r2, #1
 80006d6:	2120      	movs	r1, #32
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 fe55 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80006de:	e01c      	b.n	800071a <writeNixie1Number+0x2a2>
		default:
			HAL_GPIO_WritePin(GPIOA, IN_17_1_A_Pin, 1);
 80006e0:	23a0      	movs	r3, #160	; 0xa0
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	2201      	movs	r2, #1
 80006e6:	2110      	movs	r1, #16
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fe4d 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_B_Pin, 1);
 80006ee:	23a0      	movs	r3, #160	; 0xa0
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2201      	movs	r2, #1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fe46 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_C_Pin, 1);
 80006fc:	23a0      	movs	r3, #160	; 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	2201      	movs	r2, #1
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fe3f 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_1_D_Pin, 1);
 800070a:	23a0      	movs	r3, #160	; 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	2201      	movs	r2, #1
 8000710:	2120      	movs	r1, #32
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fe38 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 8000718:	46c0      	nop			; (mov r8, r8)

	}

}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	08002a1c 	.word	0x08002a1c

08000728 <writeNixie2Number>:

void writeNixie2Number(int number){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

	switch(number%10){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	210a      	movs	r1, #10
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff fe53 	bl	80003e0 <__aeabi_idivmod>
 800073a:	000b      	movs	r3, r1
 800073c:	2b09      	cmp	r3, #9
 800073e:	d900      	bls.n	8000742 <writeNixie2Number+0x1a>
 8000740:	e126      	b.n	8000990 <writeNixie2Number+0x268>
 8000742:	009a      	lsls	r2, r3, #2
 8000744:	4ba3      	ldr	r3, [pc, #652]	; (80009d4 <writeNixie2Number+0x2ac>)
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 800074c:	23a0      	movs	r3, #160	; 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2200      	movs	r2, #0
 8000752:	2101      	movs	r1, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fe17 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2200      	movs	r2, #0
 8000760:	2104      	movs	r1, #4
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fe10 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	2200      	movs	r2, #0
 800076e:	2108      	movs	r1, #8
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fe09 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2200      	movs	r2, #0
 800077c:	2102      	movs	r1, #2
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fe02 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 8000784:	e121      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 1:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	2201      	movs	r2, #1
 800078c:	2101      	movs	r1, #1
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fdfa 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 8000794:	23a0      	movs	r3, #160	; 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2200      	movs	r2, #0
 800079a:	2104      	movs	r1, #4
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fdf3 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fdec 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 80007b0:	23a0      	movs	r3, #160	; 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	2200      	movs	r2, #0
 80007b6:	2102      	movs	r1, #2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fde5 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80007be:	e104      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 2:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fddd 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 80007ce:	23a0      	movs	r3, #160	; 0xa0
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	2201      	movs	r2, #1
 80007d4:	2104      	movs	r1, #4
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fdd6 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 80007dc:	23a0      	movs	r3, #160	; 0xa0
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	2200      	movs	r2, #0
 80007e2:	2108      	movs	r1, #8
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fdcf 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 80007ea:	23a0      	movs	r3, #160	; 0xa0
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2200      	movs	r2, #0
 80007f0:	2102      	movs	r1, #2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fdc8 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80007f8:	e0e7      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 3:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 80007fa:	23a0      	movs	r3, #160	; 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	2201      	movs	r2, #1
 8000800:	2101      	movs	r1, #1
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fdc0 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2201      	movs	r2, #1
 800080e:	2104      	movs	r1, #4
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fdb9 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fdb2 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 8000824:	23a0      	movs	r3, #160	; 0xa0
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	2200      	movs	r2, #0
 800082a:	2102      	movs	r1, #2
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fdab 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 8000832:	e0ca      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 4:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 8000834:	23a0      	movs	r3, #160	; 0xa0
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	2200      	movs	r2, #0
 800083a:	2101      	movs	r1, #1
 800083c:	0018      	movs	r0, r3
 800083e:	f000 fda3 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	2200      	movs	r2, #0
 8000848:	2104      	movs	r1, #4
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fd9c 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 8000850:	23a0      	movs	r3, #160	; 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	2201      	movs	r2, #1
 8000856:	2108      	movs	r1, #8
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fd95 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 800085e:	23a0      	movs	r3, #160	; 0xa0
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fd8e 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 800086c:	e0ad      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 5:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2201      	movs	r2, #1
 8000874:	2101      	movs	r1, #1
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fd86 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	2200      	movs	r2, #0
 8000882:	2104      	movs	r1, #4
 8000884:	0018      	movs	r0, r3
 8000886:	f000 fd7f 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	2201      	movs	r2, #1
 8000890:	2108      	movs	r1, #8
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fd78 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2200      	movs	r2, #0
 800089e:	2102      	movs	r1, #2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fd71 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80008a6:	e090      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 6:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 80008a8:	23a0      	movs	r3, #160	; 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2200      	movs	r2, #0
 80008ae:	2101      	movs	r1, #1
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fd69 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2201      	movs	r2, #1
 80008bc:	2104      	movs	r1, #4
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fd62 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2201      	movs	r2, #1
 80008ca:	2108      	movs	r1, #8
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fd5b 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fd54 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80008e0:	e073      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 7:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 80008e2:	23a0      	movs	r3, #160	; 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	2201      	movs	r2, #1
 80008e8:	2101      	movs	r1, #1
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fd4c 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 80008f0:	23a0      	movs	r3, #160	; 0xa0
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	2201      	movs	r2, #1
 80008f6:	2104      	movs	r1, #4
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 fd45 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 80008fe:	23a0      	movs	r3, #160	; 0xa0
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2201      	movs	r2, #1
 8000904:	2108      	movs	r1, #8
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fd3e 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 0);
 800090c:	23a0      	movs	r3, #160	; 0xa0
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fd37 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 800091a:	e056      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 8:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 0);
 800091c:	23a0      	movs	r3, #160	; 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	0018      	movs	r0, r3
 8000926:	f000 fd2f 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	2200      	movs	r2, #0
 8000930:	2104      	movs	r1, #4
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fd28 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2200      	movs	r2, #0
 800093e:	2108      	movs	r1, #8
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fd21 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 1);
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2201      	movs	r2, #1
 800094c:	2102      	movs	r1, #2
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fd1a 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 8000954:	e039      	b.n	80009ca <writeNixie2Number+0x2a2>
		case 9:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2201      	movs	r2, #1
 800095c:	2101      	movs	r1, #1
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fd12 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 0);
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2200      	movs	r2, #0
 800096a:	2104      	movs	r1, #4
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fd0b 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 0);
 8000972:	23a0      	movs	r3, #160	; 0xa0
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fd04 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 1);
 8000980:	23a0      	movs	r3, #160	; 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	2201      	movs	r2, #1
 8000986:	2102      	movs	r1, #2
 8000988:	0018      	movs	r0, r3
 800098a:	f000 fcfd 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 800098e:	e01c      	b.n	80009ca <writeNixie2Number+0x2a2>
		default:
			HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin, 1);
 8000990:	23a0      	movs	r3, #160	; 0xa0
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	2201      	movs	r2, #1
 8000996:	2101      	movs	r1, #1
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fcf5 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_B_Pin, 1);
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	2201      	movs	r2, #1
 80009a4:	2104      	movs	r1, #4
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fcee 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_C_Pin, 1);
 80009ac:	23a0      	movs	r3, #160	; 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	2201      	movs	r2, #1
 80009b2:	2108      	movs	r1, #8
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 fce7 	bl	8001388 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_17_2_D_Pin, 1);
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2201      	movs	r2, #1
 80009c0:	2102      	movs	r1, #2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fce0 	bl	8001388 <HAL_GPIO_WritePin>
			break;
 80009c8:	46c0      	nop			; (mov r8, r8)

	}

}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b002      	add	sp, #8
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	08002a44 	.word	0x08002a44

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fa11 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f83b 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 f8c3 	bl	8000b70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ea:	f000 f881 	bl	8000af0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  int seconds = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
  int IMUReadData = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]

  IMUReadData = IMURead();
 80009f6:	f7ff fd27 	bl	8000448 <IMURead>
 80009fa:	0003      	movs	r3, r0
 80009fc:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	seconds = GetSeconds();
 80009fe:	f7ff fcf5 	bl	80003ec <GetSeconds>
 8000a02:	0003      	movs	r3, r0
 8000a04:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_GPIO_WritePin(GPIOA, NIXIE_SHUTDOWN_Pin, 0);
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	0159      	lsls	r1, r3, #5
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fcb9 	bl	8001388 <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f000 fa7a 	bl	8000f10 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	011a      	lsls	r2, r3, #4
 8000a20:	23a0      	movs	r3, #160	; 0xa0
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	0011      	movs	r1, r2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fccb 	bl	80013c2 <HAL_GPIO_TogglePin>

	if (seconds == 100){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b64      	cmp	r3, #100	; 0x64
 8000a30:	d101      	bne.n	8000a36 <main+0x5e>
		seconds = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
	}


	writeNixie2Number(seconds % 10);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	210a      	movs	r1, #10
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f7ff fcd0 	bl	80003e0 <__aeabi_idivmod>
 8000a40:	000b      	movs	r3, r1
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fe70 	bl	8000728 <writeNixie2Number>
	writeNixie1Number(seconds / 10);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	210a      	movs	r1, #10
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff fbe1 	bl	8000214 <__divsi3>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fd0f 	bl	8000478 <writeNixie1Number>
	seconds = GetSeconds();
 8000a5a:	e7d0      	b.n	80009fe <main+0x26>

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b093      	sub	sp, #76	; 0x4c
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	2414      	movs	r4, #20
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	2334      	movs	r3, #52	; 0x34
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f001 ffc1 	bl	80029f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2310      	movs	r3, #16
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f001 ffba 	bl	80029f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 f991 	bl	8001dac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0052      	lsls	r2, r2, #1
 8000a96:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2240      	movs	r2, #64	; 0x40
 8000aa4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 f9bc 	bl	8001e2c <HAL_RCC_OscConfig>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000ab8:	f000 f8d2 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2207      	movs	r2, #7
 8000ac0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f001 fcb7 	bl	800244c <HAL_RCC_ClockConfig>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ae2:	f000 f8bd 	bl	8000c60 <Error_Handler>
  }
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b013      	add	sp, #76	; 0x4c
 8000aec:	bd90      	pop	{r4, r7, pc}
	...

08000af0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <MX_I2C1_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <MX_I2C1_Init+0x7c>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 fc63 	bl	80013f8 <HAL_I2C_Init>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b36:	f000 f893 	bl	8000c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f001 f89c 	bl	8001c7c <HAL_I2CEx_ConfigAnalogFilter>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b48:	f000 f88a 	bl	8000c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <MX_I2C1_Init+0x74>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 f8df 	bl	8001d14 <HAL_I2CEx_ConfigDigitalFilter>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 f881 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000028 	.word	0x20000028
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	2000090e 	.word	0x2000090e

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	240c      	movs	r4, #12
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	2314      	movs	r3, #20
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	f001 ff37 	bl	80029f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <MX_GPIO_Init+0xe8>)
 8000b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8a:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <MX_GPIO_Init+0xe8>)
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <MX_GPIO_Init+0xe8>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	2202      	movs	r2, #2
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_GPIO_Init+0xe8>)
 8000ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <MX_GPIO_Init+0xe8>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_GPIO_Init+0xe8>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_17_2_A_Pin|IN_17_2_D_Pin|IN_17_2_B_Pin|IN_17_2_C_Pin
 8000bb6:	4929      	ldr	r1, [pc, #164]	; (8000c5c <MX_GPIO_Init+0xec>)
 8000bb8:	23a0      	movs	r3, #160	; 0xa0
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fbe2 	bl	8001388 <HAL_GPIO_WritePin>
                          |IN_17_1_A_Pin|IN_17_1_D_Pin|IN_17_1_B_Pin|IN_17_1_C_Pin
                          |NIXIE_SHUTDOWN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	0119      	lsls	r1, r3, #4
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	2200      	movs	r2, #0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fbda 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN_17_2_A_Pin IN_17_2_D_Pin IN_17_2_B_Pin IN_17_2_C_Pin
                           IN_17_1_A_Pin IN_17_1_D_Pin IN_17_1_B_Pin IN_17_1_C_Pin */
  GPIO_InitStruct.Pin = IN_17_2_A_Pin|IN_17_2_D_Pin|IN_17_2_B_Pin|IN_17_2_C_Pin
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	601a      	str	r2, [r3, #0]
                          |IN_17_1_A_Pin|IN_17_1_D_Pin|IN_17_1_B_Pin|IN_17_1_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2211      	movs	r2, #17
 8000bde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2201      	movs	r2, #1
 8000be4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2202      	movs	r2, #2
 8000bea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	193a      	adds	r2, r7, r4
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fa63 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLINK_Pin */
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	000c      	movs	r4, r1
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	2201      	movs	r2, #1
 8000c0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 8000c18:	193a      	adds	r2, r7, r4
 8000c1a:	23a0      	movs	r3, #160	; 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fa4d 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NIXIE_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = NIXIE_SHUTDOWN_Pin;
 8000c26:	0021      	movs	r1, r4
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0152      	lsls	r2, r2, #5
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2211      	movs	r2, #17
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2201      	movs	r2, #1
 8000c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NIXIE_SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 8000c42:	187a      	adds	r2, r7, r1
 8000c44:	23a0      	movs	r3, #160	; 0xa0
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fa38 	bl	80010c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b009      	add	sp, #36	; 0x24
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	000010ff 	.word	0x000010ff

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	2201      	movs	r2, #1
 8000c84:	4013      	ands	r3, r2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	0549      	lsls	r1, r1, #21
 8000c94:	430a      	orrs	r2, r1
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	055b      	lsls	r3, r3, #21
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b091      	sub	sp, #68	; 0x44
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	232c      	movs	r3, #44	; 0x2c
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2314      	movs	r3, #20
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f001 fe94 	bl	80029f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	2414      	movs	r4, #20
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	2318      	movs	r3, #24
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f001 fe8c 	bl	80029f4 <memset>
  if(hi2c->Instance==I2C1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <HAL_I2C_MspInit+0xb8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d13e      	bne.n	8000d64 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2220      	movs	r2, #32
 8000cea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f001 fd33 	bl	8002760 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cfe:	f7ff ffaf 	bl	8000c60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_I2C_MspInit+0xbc>)
 8000d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_I2C_MspInit+0xbc>)
 8000d08:	2102      	movs	r1, #2
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_I2C_MspInit+0xbc>)
 8000d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d12:	2202      	movs	r2, #2
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1a:	212c      	movs	r1, #44	; 0x2c
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	22c0      	movs	r2, #192	; 0xc0
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2212      	movs	r2, #18
 8000d28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2202      	movs	r2, #2
 8000d34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2206      	movs	r2, #6
 8000d3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_I2C_MspInit+0xc0>)
 8000d40:	0019      	movs	r1, r3
 8000d42:	0010      	movs	r0, r2
 8000d44:	f000 f9bc 	bl	80010c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_I2C_MspInit+0xbc>)
 8000d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0xbc>)
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	0389      	lsls	r1, r1, #14
 8000d52:	430a      	orrs	r2, r1
 8000d54:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_I2C_MspInit+0xbc>)
 8000d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	039b      	lsls	r3, r3, #14
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b011      	add	sp, #68	; 0x44
 8000d6a:	bd90      	pop	{r4, r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	50000400 	.word	0x50000400

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f89c 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db4:	f7ff fff7 	bl	8000da6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	; (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dde:	f001 fde5 	bl	80029ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000de2:	f7ff fdf9 	bl	80009d8 <main>

08000de6 <LoopForever>:

LoopForever:
  b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df4:	08002ab4 	.word	0x08002ab4
  ldr r2, =_sbss
 8000df8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dfc:	20000080 	.word	0x20000080

08000e00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x3c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Init+0x3c>)
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	0049      	lsls	r1, r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 f810 	bl	8000e44 <HAL_InitTick>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e001      	b.n	8000e34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff ff1c 	bl	8000c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_InitTick+0x88>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d02b      	beq.n	8000eb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_InitTick+0x8c>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_InitTick+0x88>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	0019      	movs	r1, r3
 8000e66:	23fa      	movs	r3, #250	; 0xfa
 8000e68:	0098      	lsls	r0, r3, #2
 8000e6a:	f7ff f949 	bl	8000100 <__udivsi3>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	0019      	movs	r1, r3
 8000e72:	0020      	movs	r0, r4
 8000e74:	f7ff f944 	bl	8000100 <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 f913 	bl	80010a6 <HAL_SYSTICK_Config>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d112      	bne.n	8000eaa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d80a      	bhi.n	8000ea0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f8f2 	bl	800107c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_InitTick+0x90>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e00d      	b.n	8000ebc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e008      	b.n	8000ebc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e003      	b.n	8000ebc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b005      	add	sp, #20
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	18d2      	adds	r2, r2, r3
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_IncTick+0x20>)
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	2000007c 	.word	0x2000007c

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <HAL_GetTick+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	2000007c 	.word	0x2000007c

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff fff0 	bl	8000efc <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	001a      	movs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	189b      	adds	r3, r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	f7ff ffe0 	bl	8000efc <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6c:	d828      	bhi.n	8000fc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	; (800102c <__NVIC_SetPriority+0xd4>)
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	33c0      	adds	r3, #192	; 0xc0
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	589b      	ldr	r3, [r3, r2]
 8000f7e:	1dfa      	adds	r2, r7, #7
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	0011      	movs	r1, r2
 8000f84:	2203      	movs	r2, #3
 8000f86:	400a      	ands	r2, r1
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	21ff      	movs	r1, #255	; 0xff
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	000a      	movs	r2, r1
 8000f90:	43d2      	mvns	r2, r2
 8000f92:	401a      	ands	r2, r3
 8000f94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	019b      	lsls	r3, r3, #6
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	4003      	ands	r3, r0
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fac:	481f      	ldr	r0, [pc, #124]	; (800102c <__NVIC_SetPriority+0xd4>)
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	33c0      	adds	r3, #192	; 0xc0
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fbe:	e031      	b.n	8001024 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <__NVIC_SetPriority+0xd8>)
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	230f      	movs	r3, #15
 8000fca:	400b      	ands	r3, r1
 8000fcc:	3b08      	subs	r3, #8
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3306      	adds	r3, #6
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	18d3      	adds	r3, r2, r3
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1dfa      	adds	r2, r7, #7
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	0011      	movs	r1, r2
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	00d2      	lsls	r2, r2, #3
 8000fe6:	21ff      	movs	r1, #255	; 0xff
 8000fe8:	4091      	lsls	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	43d2      	mvns	r2, r2
 8000fee:	401a      	ands	r2, r3
 8000ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	019b      	lsls	r3, r3, #6
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	0018      	movs	r0, r3
 8001000:	2303      	movs	r3, #3
 8001002:	4003      	ands	r3, r0
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <__NVIC_SetPriority+0xd8>)
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	001c      	movs	r4, r3
 8001010:	230f      	movs	r3, #15
 8001012:	4023      	ands	r3, r4
 8001014:	3b08      	subs	r3, #8
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	430a      	orrs	r2, r1
 800101a:	3306      	adds	r3, #6
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	18c3      	adds	r3, r0, r3
 8001020:	3304      	adds	r3, #4
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b003      	add	sp, #12
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	045b      	lsls	r3, r3, #17
 8001044:	429a      	cmp	r2, r3
 8001046:	d301      	bcc.n	800104c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001048:	2301      	movs	r3, #1
 800104a:	e010      	b.n	800106e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <SysTick_Config+0x44>)
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	3a01      	subs	r2, #1
 8001052:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001054:	2301      	movs	r3, #1
 8001056:	425b      	negs	r3, r3
 8001058:	2103      	movs	r1, #3
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff ff7c 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x44>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x44>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	210f      	movs	r1, #15
 8001088:	187b      	adds	r3, r7, r1
 800108a:	1c02      	adds	r2, r0, #0
 800108c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	187b      	adds	r3, r7, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ffbf 	bl	8001034 <SysTick_Config>
 80010b6:	0003      	movs	r3, r0
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	e147      	b.n	8001360 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4091      	lsls	r1, r2
 80010da:	000a      	movs	r2, r1
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d100      	bne.n	80010e8 <HAL_GPIO_Init+0x28>
 80010e6:	e138      	b.n	800135a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d005      	beq.n	8001100 <HAL_GPIO_Init+0x40>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2203      	movs	r2, #3
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	409a      	lsls	r2, r3
 800110e:	0013      	movs	r3, r2
 8001110:	43da      	mvns	r2, r3
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	409a      	lsls	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	2201      	movs	r2, #1
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	4013      	ands	r3, r2
 800116a:	2b03      	cmp	r3, #3
 800116c:	d017      	beq.n	800119e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d123      	bne.n	80011f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	58d3      	ldr	r3, [r2, r3]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2207      	movs	r2, #7
 80011bc:	4013      	ands	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2107      	movs	r1, #7
 80011d6:	400b      	ands	r3, r1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	6939      	ldr	r1, [r7, #16]
 80011f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	401a      	ands	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	23c0      	movs	r3, #192	; 0xc0
 800122c:	029b      	lsls	r3, r3, #10
 800122e:	4013      	ands	r3, r2
 8001230:	d100      	bne.n	8001234 <HAL_GPIO_Init+0x174>
 8001232:	e092      	b.n	800135a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001234:	4a50      	ldr	r2, [pc, #320]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3318      	adds	r3, #24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	589b      	ldr	r3, [r3, r2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	220f      	movs	r2, #15
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	23a0      	movs	r3, #160	; 0xa0
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	429a      	cmp	r2, r3
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1ca>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a45      	ldr	r2, [pc, #276]	; (800137c <HAL_GPIO_Init+0x2bc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1c6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a44      	ldr	r2, [pc, #272]	; (8001380 <HAL_GPIO_Init+0x2c0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1c2>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a43      	ldr	r2, [pc, #268]	; (8001384 <HAL_GPIO_Init+0x2c4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1be>
 800127a:	2303      	movs	r3, #3
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x1cc>
 800127e:	2305      	movs	r3, #5
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x1cc>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x1cc>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x1cc>
 800128a:	2300      	movs	r3, #0
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	2103      	movs	r1, #3
 8001290:	400a      	ands	r2, r1
 8001292:	00d2      	lsls	r2, r2, #3
 8001294:	4093      	lsls	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800129c:	4936      	ldr	r1, [pc, #216]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3318      	adds	r3, #24
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	035b      	lsls	r3, r3, #13
 80012c2:	4013      	ands	r3, r2
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	039b      	lsls	r3, r3, #14
 80012ec:	4013      	ands	r3, r2
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 8001300:	2384      	movs	r3, #132	; 0x84
 8001302:	58d3      	ldr	r3, [r2, r3]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43da      	mvns	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	029b      	lsls	r3, r3, #10
 8001318:	4013      	ands	r3, r2
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001324:	4914      	ldr	r1, [pc, #80]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 8001326:	2284      	movs	r2, #132	; 0x84
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001352:	4909      	ldr	r1, [pc, #36]	; (8001378 <HAL_GPIO_Init+0x2b8>)
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	40da      	lsrs	r2, r3
 8001368:	1e13      	subs	r3, r2, #0
 800136a:	d000      	beq.n	800136e <HAL_GPIO_Init+0x2ae>
 800136c:	e6b0      	b.n	80010d0 <HAL_GPIO_Init+0x10>
  }
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b006      	add	sp, #24
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021800 	.word	0x40021800
 800137c:	50000400 	.word	0x50000400
 8001380:	50000800 	.word	0x50000800
 8001384:	50000c00 	.word	0x50000c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	0008      	movs	r0, r1
 8001392:	0011      	movs	r1, r2
 8001394:	1cbb      	adds	r3, r7, #2
 8001396:	1c02      	adds	r2, r0, #0
 8001398:	801a      	strh	r2, [r3, #0]
 800139a:	1c7b      	adds	r3, r7, #1
 800139c:	1c0a      	adds	r2, r1, #0
 800139e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	1c7b      	adds	r3, r7, #1
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	000a      	movs	r2, r1
 80013cc:	1cbb      	adds	r3, r7, #2
 80013ce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d6:	1cbb      	adds	r3, r7, #2
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	041a      	lsls	r2, r3, #16
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	1cb9      	adds	r1, r7, #2
 80013e6:	8809      	ldrh	r1, [r1, #0]
 80013e8:	400b      	ands	r3, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b004      	add	sp, #16
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e082      	b.n	8001510 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2241      	movs	r2, #65	; 0x41
 800140e:	5c9b      	ldrb	r3, [r3, r2]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2240      	movs	r2, #64	; 0x40
 800141a:	2100      	movs	r1, #0
 800141c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff fc47 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2241      	movs	r2, #65	; 0x41
 800142a:	2124      	movs	r1, #36	; 0x24
 800142c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	438a      	bics	r2, r1
 800143c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4934      	ldr	r1, [pc, #208]	; (8001518 <HAL_I2C_Init+0x120>)
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4931      	ldr	r1, [pc, #196]	; (800151c <HAL_I2C_Init+0x124>)
 8001458:	400a      	ands	r2, r1
 800145a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	0209      	lsls	r1, r1, #8
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e007      	b.n	8001486 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2184      	movs	r1, #132	; 0x84
 8001480:	0209      	lsls	r1, r1, #8
 8001482:	430a      	orrs	r2, r1
 8001484:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d104      	bne.n	8001498 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	491f      	ldr	r1, [pc, #124]	; (8001520 <HAL_I2C_Init+0x128>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	491a      	ldr	r1, [pc, #104]	; (800151c <HAL_I2C_Init+0x124>)
 80014b4:	400a      	ands	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69d9      	ldr	r1, [r3, #28]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2241      	movs	r2, #65	; 0x41
 80014fc:	2120      	movs	r1, #32
 80014fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2242      	movs	r2, #66	; 0x42
 800150a:	2100      	movs	r1, #0
 800150c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}
 8001518:	f0ffffff 	.word	0xf0ffffff
 800151c:	ffff7fff 	.word	0xffff7fff
 8001520:	02008000 	.word	0x02008000

08001524 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af02      	add	r7, sp, #8
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	000c      	movs	r4, r1
 800152e:	0010      	movs	r0, r2
 8001530:	0019      	movs	r1, r3
 8001532:	230a      	movs	r3, #10
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	1c22      	adds	r2, r4, #0
 8001538:	801a      	strh	r2, [r3, #0]
 800153a:	2308      	movs	r3, #8
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	1c02      	adds	r2, r0, #0
 8001540:	801a      	strh	r2, [r3, #0]
 8001542:	1dbb      	adds	r3, r7, #6
 8001544:	1c0a      	adds	r2, r1, #0
 8001546:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2241      	movs	r2, #65	; 0x41
 800154c:	5c9b      	ldrb	r3, [r3, r2]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b20      	cmp	r3, #32
 8001552:	d000      	beq.n	8001556 <HAL_I2C_Mem_Read+0x32>
 8001554:	e110      	b.n	8001778 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <HAL_I2C_Mem_Read+0x42>
 800155c:	232c      	movs	r3, #44	; 0x2c
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e103      	b.n	800177a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	5c9b      	ldrb	r3, [r3, r2]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_I2C_Mem_Read+0x5c>
 800157c:	2302      	movs	r3, #2
 800157e:	e0fc      	b.n	800177a <HAL_I2C_Mem_Read+0x256>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2240      	movs	r2, #64	; 0x40
 8001584:	2101      	movs	r1, #1
 8001586:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001588:	f7ff fcb8 	bl	8000efc <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	0219      	lsls	r1, r3, #8
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2319      	movs	r3, #25
 800159c:	2201      	movs	r2, #1
 800159e:	f000 f979 	bl	8001894 <I2C_WaitOnFlagUntilTimeout>
 80015a2:	1e03      	subs	r3, r0, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e7      	b.n	800177a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2241      	movs	r2, #65	; 0x41
 80015ae:	2122      	movs	r1, #34	; 0x22
 80015b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2242      	movs	r2, #66	; 0x42
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	222c      	movs	r2, #44	; 0x2c
 80015ca:	18ba      	adds	r2, r7, r2
 80015cc:	8812      	ldrh	r2, [r2, #0]
 80015ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015d6:	1dbb      	adds	r3, r7, #6
 80015d8:	881c      	ldrh	r4, [r3, #0]
 80015da:	2308      	movs	r3, #8
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	881a      	ldrh	r2, [r3, #0]
 80015e0:	230a      	movs	r3, #10
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	8819      	ldrh	r1, [r3, #0]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	0023      	movs	r3, r4
 80015f2:	f000 f8cb 	bl	800178c <I2C_RequestMemoryRead>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d005      	beq.n	8001606 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0b9      	b.n	800177a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160a:	b29b      	uxth	r3, r3
 800160c:	2bff      	cmp	r3, #255	; 0xff
 800160e:	d911      	bls.n	8001634 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	b2da      	uxtb	r2, r3
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	045c      	lsls	r4, r3, #17
 8001620:	230a      	movs	r3, #10
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	8819      	ldrh	r1, [r3, #0]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	4b56      	ldr	r3, [pc, #344]	; (8001784 <HAL_I2C_Mem_Read+0x260>)
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	0023      	movs	r3, r4
 800162e:	f000 faeb 	bl	8001c08 <I2C_TransferConfig>
 8001632:	e012      	b.n	800165a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001642:	b2da      	uxtb	r2, r3
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	049c      	lsls	r4, r3, #18
 8001648:	230a      	movs	r3, #10
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	8819      	ldrh	r1, [r3, #0]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <HAL_I2C_Mem_Read+0x260>)
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	0023      	movs	r3, r4
 8001656:	f000 fad7 	bl	8001c08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800165a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	0013      	movs	r3, r2
 8001664:	2200      	movs	r2, #0
 8001666:	2104      	movs	r1, #4
 8001668:	f000 f914 	bl	8001894 <I2C_WaitOnFlagUntilTimeout>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d001      	beq.n	8001674 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e082      	b.n	800177a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	3b01      	subs	r3, #1
 8001692:	b29a      	uxth	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03a      	beq.n	8001726 <HAL_I2C_Mem_Read+0x202>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d136      	bne.n	8001726 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	0013      	movs	r3, r2
 80016c2:	2200      	movs	r2, #0
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	f000 f8e5 	bl	8001894 <I2C_WaitOnFlagUntilTimeout>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e053      	b.n	800177a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d911      	bls.n	8001700 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	22ff      	movs	r2, #255	; 0xff
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	045c      	lsls	r4, r3, #17
 80016ec:	230a      	movs	r3, #10
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	8819      	ldrh	r1, [r3, #0]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	2300      	movs	r3, #0
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	0023      	movs	r3, r4
 80016fa:	f000 fa85 	bl	8001c08 <I2C_TransferConfig>
 80016fe:	e012      	b.n	8001726 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170e:	b2da      	uxtb	r2, r3
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	049c      	lsls	r4, r3, #18
 8001714:	230a      	movs	r3, #10
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	8819      	ldrh	r1, [r3, #0]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	2300      	movs	r3, #0
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	0023      	movs	r3, r4
 8001722:	f000 fa71 	bl	8001c08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d194      	bne.n	800165a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	0018      	movs	r0, r3
 8001738:	f000 f92a 	bl	8001990 <I2C_WaitOnSTOPFlagUntilTimeout>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e01a      	b.n	800177a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2220      	movs	r2, #32
 800174a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	490c      	ldr	r1, [pc, #48]	; (8001788 <HAL_I2C_Mem_Read+0x264>)
 8001758:	400a      	ands	r2, r1
 800175a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2241      	movs	r2, #65	; 0x41
 8001760:	2120      	movs	r1, #32
 8001762:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2242      	movs	r2, #66	; 0x42
 8001768:	2100      	movs	r1, #0
 800176a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	2100      	movs	r1, #0
 8001772:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	e000      	b.n	800177a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001778:	2302      	movs	r3, #2
  }
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b007      	add	sp, #28
 8001780:	bd90      	pop	{r4, r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	80002400 	.word	0x80002400
 8001788:	fe00e800 	.word	0xfe00e800

0800178c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	000c      	movs	r4, r1
 8001796:	0010      	movs	r0, r2
 8001798:	0019      	movs	r1, r3
 800179a:	250a      	movs	r5, #10
 800179c:	197b      	adds	r3, r7, r5
 800179e:	1c22      	adds	r2, r4, #0
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	2308      	movs	r3, #8
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	1c02      	adds	r2, r0, #0
 80017a8:	801a      	strh	r2, [r3, #0]
 80017aa:	1dbb      	adds	r3, r7, #6
 80017ac:	1c0a      	adds	r2, r1, #0
 80017ae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80017b0:	1dbb      	adds	r3, r7, #6
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	197b      	adds	r3, r7, r5
 80017b8:	8819      	ldrh	r1, [r3, #0]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <I2C_RequestMemoryRead+0xc0>)
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	f000 fa21 	bl	8001c08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c8:	6a39      	ldr	r1, [r7, #32]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 f8a0 	bl	8001912 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d001      	beq.n	80017da <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e033      	b.n	8001842 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017da:	1dbb      	adds	r3, r7, #6
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017e2:	2308      	movs	r3, #8
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
 80017f0:	e019      	b.n	8001826 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017f2:	2308      	movs	r3, #8
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001806:	6a39      	ldr	r1, [r7, #32]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f881 	bl	8001912 <I2C_WaitOnTXISFlagUntilTimeout>
 8001810:	1e03      	subs	r3, r0, #0
 8001812:	d001      	beq.n	8001818 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e014      	b.n	8001842 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001818:	2308      	movs	r3, #8
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001826:	6a3a      	ldr	r2, [r7, #32]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	0013      	movs	r3, r2
 8001830:	2200      	movs	r2, #0
 8001832:	2140      	movs	r1, #64	; 0x40
 8001834:	f000 f82e 	bl	8001894 <I2C_WaitOnFlagUntilTimeout>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d001      	beq.n	8001840 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bdb0      	pop	{r4, r5, r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	80002000 	.word	0x80002000

08001850 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	2b02      	cmp	r3, #2
 8001864:	d103      	bne.n	800186e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	2b01      	cmp	r3, #1
 800187a:	d007      	beq.n	800188c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2101      	movs	r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	619a      	str	r2, [r3, #24]
  }
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	1dfb      	adds	r3, r7, #7
 80018a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018a4:	e021      	b.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	d01e      	beq.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ac:	f7ff fb26 	bl	8000efc <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d302      	bcc.n	80018c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d113      	bne.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	2220      	movs	r2, #32
 80018c8:	431a      	orrs	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2241      	movs	r2, #65	; 0x41
 80018d2:	2120      	movs	r1, #32
 80018d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2242      	movs	r2, #66	; 0x42
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2240      	movs	r2, #64	; 0x40
 80018e2:	2100      	movs	r1, #0
 80018e4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	4013      	ands	r3, r2
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	425a      	negs	r2, r3
 80018fa:	4153      	adcs	r3, r2
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	001a      	movs	r2, r3
 8001900:	1dfb      	adds	r3, r7, #7
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d0ce      	beq.n	80018a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b004      	add	sp, #16
 8001910:	bd80      	pop	{r7, pc}

08001912 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800191e:	e02b      	b.n	8001978 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	0018      	movs	r0, r3
 8001928:	f000 f86e 	bl	8001a08 <I2C_IsErrorOccurred>
 800192c:	1e03      	subs	r3, r0, #0
 800192e:	d001      	beq.n	8001934 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e029      	b.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3301      	adds	r3, #1
 8001938:	d01e      	beq.n	8001978 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193a:	f7ff fadf 	bl	8000efc <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	d302      	bcc.n	8001950 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d113      	bne.n	8001978 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	2220      	movs	r2, #32
 8001956:	431a      	orrs	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2241      	movs	r2, #65	; 0x41
 8001960:	2120      	movs	r1, #32
 8001962:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2242      	movs	r2, #66	; 0x42
 8001968:	2100      	movs	r1, #0
 800196a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2240      	movs	r2, #64	; 0x40
 8001970:	2100      	movs	r1, #0
 8001972:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e007      	b.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2202      	movs	r2, #2
 8001980:	4013      	ands	r3, r2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d1cc      	bne.n	8001920 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}

08001990 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800199c:	e028      	b.n	80019f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 f82f 	bl	8001a08 <I2C_IsErrorOccurred>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d001      	beq.n	80019b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e026      	b.n	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b2:	f7ff faa3 	bl	8000efc <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d302      	bcc.n	80019c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d113      	bne.n	80019f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	2220      	movs	r2, #32
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2241      	movs	r2, #65	; 0x41
 80019d8:	2120      	movs	r1, #32
 80019da:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2242      	movs	r2, #66	; 0x42
 80019e0:	2100      	movs	r1, #0
 80019e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e007      	b.n	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2220      	movs	r2, #32
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	d1cf      	bne.n	800199e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b004      	add	sp, #16
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b08b      	sub	sp, #44	; 0x2c
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2327      	movs	r3, #39	; 0x27
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2210      	movs	r2, #16
 8001a30:	4013      	ands	r3, r2
 8001a32:	d100      	bne.n	8001a36 <I2C_IsErrorOccurred+0x2e>
 8001a34:	e082      	b.n	8001b3c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a3e:	e060      	b.n	8001b02 <I2C_IsErrorOccurred+0xfa>
 8001a40:	2427      	movs	r4, #39	; 0x27
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	193a      	adds	r2, r7, r4
 8001a46:	7812      	ldrb	r2, [r2, #0]
 8001a48:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	d058      	beq.n	8001b02 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a50:	f7ff fa54 	bl	8000efc <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d306      	bcc.n	8001a6e <I2C_IsErrorOccurred+0x66>
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	193a      	adds	r2, r7, r4
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d149      	bne.n	8001b02 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	4013      	ands	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a7c:	2013      	movs	r0, #19
 8001a7e:	183b      	adds	r3, r7, r0
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	2142      	movs	r1, #66	; 0x42
 8001a84:	5c52      	ldrb	r2, [r2, r1]
 8001a86:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	401a      	ands	r2, r3
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d126      	bne.n	8001aea <I2C_IsErrorOccurred+0xe2>
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	01db      	lsls	r3, r3, #7
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d021      	beq.n	8001aea <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001aa6:	183b      	adds	r3, r7, r0
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d01d      	beq.n	8001aea <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	01c9      	lsls	r1, r1, #7
 8001abc:	430a      	orrs	r2, r1
 8001abe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ac0:	f7ff fa1c 	bl	8000efc <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ac8:	e00f      	b.n	8001aea <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001aca:	f7ff fa17 	bl	8000efc <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b19      	cmp	r3, #25
 8001ad6:	d908      	bls.n	8001aea <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	2220      	movs	r2, #32
 8001adc:	4313      	orrs	r3, r2
 8001ade:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ae0:	2327      	movs	r3, #39	; 0x27
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]

              break;
 8001ae8:	e00b      	b.n	8001b02 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2220      	movs	r2, #32
 8001af2:	4013      	ands	r3, r2
 8001af4:	2127      	movs	r1, #39	; 0x27
 8001af6:	187a      	adds	r2, r7, r1
 8001af8:	1879      	adds	r1, r7, r1
 8001afa:	7809      	ldrb	r1, [r1, #0]
 8001afc:	7011      	strb	r1, [r2, #0]
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d1e3      	bne.n	8001aca <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	d004      	beq.n	8001b1a <I2C_IsErrorOccurred+0x112>
 8001b10:	2327      	movs	r3, #39	; 0x27
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d092      	beq.n	8001a40 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b1a:	2327      	movs	r3, #39	; 0x27
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4313      	orrs	r3, r2
 8001b32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b34:	2327      	movs	r3, #39	; 0x27
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d00c      	beq.n	8001b68 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	2201      	movs	r2, #1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	0052      	lsls	r2, r2, #1
 8001b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b60:	2327      	movs	r3, #39	; 0x27
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d00c      	beq.n	8001b8c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	2208      	movs	r2, #8
 8001b76:	4313      	orrs	r3, r2
 8001b78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b84:	2327      	movs	r3, #39	; 0x27
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d00c      	beq.n	8001bb0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ba8:	2327      	movs	r3, #39	; 0x27
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001bb0:	2327      	movs	r3, #39	; 0x27
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d01d      	beq.n	8001bf6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff fe47 	bl	8001850 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	490d      	ldr	r1, [pc, #52]	; (8001c04 <I2C_IsErrorOccurred+0x1fc>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2241      	movs	r2, #65	; 0x41
 8001be2:	2120      	movs	r1, #32
 8001be4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2242      	movs	r2, #66	; 0x42
 8001bea:	2100      	movs	r1, #0
 8001bec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001bf6:	2327      	movs	r3, #39	; 0x27
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b00b      	add	sp, #44	; 0x2c
 8001c02:	bd90      	pop	{r4, r7, pc}
 8001c04:	fe00e800 	.word	0xfe00e800

08001c08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	0008      	movs	r0, r1
 8001c12:	0011      	movs	r1, r2
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	240a      	movs	r4, #10
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
 8001c1e:	2009      	movs	r0, #9
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	1c0a      	adds	r2, r1, #0
 8001c24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	059b      	lsls	r3, r3, #22
 8001c2c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c2e:	183b      	adds	r3, r7, r0
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	0419      	lsls	r1, r3, #16
 8001c34:	23ff      	movs	r3, #255	; 0xff
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c3a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	4313      	orrs	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c52:	0d51      	lsrs	r1, r2, #21
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	400a      	ands	r2, r1
 8001c5a:	4907      	ldr	r1, [pc, #28]	; (8001c78 <I2C_TransferConfig+0x70>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	43d2      	mvns	r2, r2
 8001c60:	401a      	ands	r2, r3
 8001c62:	0011      	movs	r1, r2
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b007      	add	sp, #28
 8001c74:	bd90      	pop	{r4, r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	03ff63ff 	.word	0x03ff63ff

08001c7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2241      	movs	r2, #65	; 0x41
 8001c8a:	5c9b      	ldrb	r3, [r3, r2]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	d138      	bne.n	8001d04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	5c9b      	ldrb	r3, [r3, r2]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e032      	b.n	8001d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2241      	movs	r2, #65	; 0x41
 8001cac:	2124      	movs	r1, #36	; 0x24
 8001cae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4911      	ldr	r1, [pc, #68]	; (8001d10 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2101      	movs	r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2241      	movs	r2, #65	; 0x41
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e000      	b.n	8001d06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
  }
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	ffffefff 	.word	0xffffefff

08001d14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2241      	movs	r2, #65	; 0x41
 8001d22:	5c9b      	ldrb	r3, [r3, r2]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d139      	bne.n	8001d9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2240      	movs	r2, #64	; 0x40
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e033      	b.n	8001da0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2241      	movs	r2, #65	; 0x41
 8001d44:	2124      	movs	r1, #36	; 0x24
 8001d46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2101      	movs	r1, #1
 8001d54:	438a      	bics	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2241      	movs	r2, #65	; 0x41
 8001d8e:	2120      	movs	r1, #32
 8001d90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	2100      	movs	r1, #0
 8001d98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d9e:	2302      	movs	r3, #2
  }
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	fffff0ff 	.word	0xfffff0ff

08001dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d11f      	bne.n	8001e10 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	189b      	adds	r3, r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4912      	ldr	r1, [pc, #72]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7fe f98e 	bl	8000100 <__udivsi3>
 8001de4:	0003      	movs	r3, r0
 8001de6:	3301      	adds	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dea:	e008      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e001      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e009      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	401a      	ands	r2, r3
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d0ed      	beq.n	8001dec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b004      	add	sp, #16
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	fffff9ff 	.word	0xfffff9ff
 8001e24:	20000000 	.word	0x20000000
 8001e28:	000f4240 	.word	0x000f4240

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e2f3      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4013      	ands	r3, r2
 8001e46:	d100      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1e>
 8001e48:	e07c      	b.n	8001f44 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4a:	4bc3      	ldr	r3, [pc, #780]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2238      	movs	r2, #56	; 0x38
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e54:	4bc0      	ldr	r3, [pc, #768]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3e>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d002      	beq.n	8001e70 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4bb9      	ldr	r3, [pc, #740]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d062      	beq.n	8001f42 <HAL_RCC_OscConfig+0x116>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d15e      	bne.n	8001f42 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e2ce      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x78>
 8001e94:	4bb0      	ldr	r3, [pc, #704]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4baf      	ldr	r3, [pc, #700]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	2180      	movs	r1, #128	; 0x80
 8001e9c:	0249      	lsls	r1, r1, #9
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e020      	b.n	8001ee6 <HAL_RCC_OscConfig+0xba>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	23a0      	movs	r3, #160	; 0xa0
 8001eaa:	02db      	lsls	r3, r3, #11
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d10e      	bne.n	8001ece <HAL_RCC_OscConfig+0xa2>
 8001eb0:	4ba9      	ldr	r3, [pc, #676]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4ba8      	ldr	r3, [pc, #672]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	02c9      	lsls	r1, r1, #11
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	4ba6      	ldr	r3, [pc, #664]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4ba5      	ldr	r3, [pc, #660]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0249      	lsls	r1, r1, #9
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e00b      	b.n	8001ee6 <HAL_RCC_OscConfig+0xba>
 8001ece:	4ba2      	ldr	r3, [pc, #648]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4ba1      	ldr	r3, [pc, #644]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	49a1      	ldr	r1, [pc, #644]	; (800215c <HAL_RCC_OscConfig+0x330>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	4b9f      	ldr	r3, [pc, #636]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b9e      	ldr	r3, [pc, #632]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001ee0:	499f      	ldr	r1, [pc, #636]	; (8002160 <HAL_RCC_OscConfig+0x334>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d014      	beq.n	8001f18 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7ff f805 	bl	8000efc <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f800 	bl	8000efc <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e28d      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	4b93      	ldr	r3, [pc, #588]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	029b      	lsls	r3, r3, #10
 8001f12:	4013      	ands	r3, r2
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xcc>
 8001f16:	e015      	b.n	8001f44 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe fff0 	bl	8000efc <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f22:	f7fe ffeb 	bl	8000efc <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b64      	cmp	r3, #100	; 0x64
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e278      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f34:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0xf6>
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d100      	bne.n	8001f50 <HAL_RCC_OscConfig+0x124>
 8001f4e:	e099      	b.n	8002084 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f50:	4b81      	ldr	r3, [pc, #516]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2238      	movs	r2, #56	; 0x38
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4013      	ands	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d102      	bne.n	8001f70 <HAL_RCC_OscConfig+0x144>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d002      	beq.n	8001f76 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d135      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f76:	4b78      	ldr	r3, [pc, #480]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x162>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e24b      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	4b72      	ldr	r3, [pc, #456]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4a74      	ldr	r2, [pc, #464]	; (8002164 <HAL_RCC_OscConfig+0x338>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	021a      	lsls	r2, r3, #8
 8001f9e:	4b6e      	ldr	r3, [pc, #440]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d112      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001faa:	4b6b      	ldr	r3, [pc, #428]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6e      	ldr	r2, [pc, #440]	; (8002168 <HAL_RCC_OscConfig+0x33c>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	4b67      	ldr	r3, [pc, #412]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fbe:	4b66      	ldr	r3, [pc, #408]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0adb      	lsrs	r3, r3, #11
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	4a68      	ldr	r2, [pc, #416]	; (800216c <HAL_RCC_OscConfig+0x340>)
 8001fca:	40da      	lsrs	r2, r3
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x344>)
 8001fce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_OscConfig+0x348>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7fe ff35 	bl	8000e44 <HAL_InitTick>
 8001fda:	1e03      	subs	r3, r0, #0
 8001fdc:	d051      	beq.n	8002082 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e221      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d030      	beq.n	800204c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fea:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <HAL_RCC_OscConfig+0x33c>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b55      	ldr	r3, [pc, #340]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0049      	lsls	r1, r1, #1
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe ff76 	bl	8000efc <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7fe ff71 	bl	8000efc <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1fe      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4013      	ands	r3, r2
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b48      	ldr	r3, [pc, #288]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_RCC_OscConfig+0x338>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	021a      	lsls	r2, r3, #8
 8002044:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	e01b      	b.n	8002084 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002052:	4949      	ldr	r1, [pc, #292]	; (8002178 <HAL_RCC_OscConfig+0x34c>)
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe ff50 	bl	8000efc <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002062:	f7fe ff4b 	bl	8000efc <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1d8      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4013      	ands	r3, r2
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x236>
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002082:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2208      	movs	r2, #8
 800208a:	4013      	ands	r3, r2
 800208c:	d047      	beq.n	800211e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800208e:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2238      	movs	r2, #56	; 0x38
 8002094:	4013      	ands	r3, r2
 8002096:	2b18      	cmp	r3, #24
 8002098:	d10a      	bne.n	80020b0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d03c      	beq.n	800211e <HAL_RCC_OscConfig+0x2f2>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d138      	bne.n	800211e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e1ba      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d019      	beq.n	80020ec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 80020ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 80020be:	2101      	movs	r1, #1
 80020c0:	430a      	orrs	r2, r1
 80020c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe ff1a 	bl	8000efc <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ce:	f7fe ff15 	bl	8000efc <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1a2      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e4:	2202      	movs	r2, #2
 80020e6:	4013      	ands	r3, r2
 80020e8:	d0f1      	beq.n	80020ce <HAL_RCC_OscConfig+0x2a2>
 80020ea:	e018      	b.n	800211e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	438a      	bics	r2, r1
 80020f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe ff00 	bl	8000efc <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002102:	f7fe fefb 	bl	8000efc <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e188      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002118:	2202      	movs	r2, #2
 800211a:	4013      	ands	r3, r2
 800211c:	d1f1      	bne.n	8002102 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x2fe>
 8002128:	e0c6      	b.n	80022b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	231f      	movs	r3, #31
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2238      	movs	r2, #56	; 0x38
 8002138:	4013      	ands	r3, r2
 800213a:	2b20      	cmp	r3, #32
 800213c:	d11e      	bne.n	800217c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_OscConfig+0x32c>)
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d100      	bne.n	800214a <HAL_RCC_OscConfig+0x31e>
 8002148:	e0b6      	b.n	80022b8 <HAL_RCC_OscConfig+0x48c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d000      	beq.n	8002154 <HAL_RCC_OscConfig+0x328>
 8002152:	e0b1      	b.n	80022b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e166      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
 8002158:	40021000 	.word	0x40021000
 800215c:	fffeffff 	.word	0xfffeffff
 8002160:	fffbffff 	.word	0xfffbffff
 8002164:	ffff80ff 	.word	0xffff80ff
 8002168:	ffffc7ff 	.word	0xffffc7ff
 800216c:	00f42400 	.word	0x00f42400
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004
 8002178:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800217c:	4bac      	ldr	r3, [pc, #688]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 800217e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	055b      	lsls	r3, r3, #21
 8002184:	4013      	ands	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x360>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x362>
 800218c:	2300      	movs	r3, #0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d011      	beq.n	80021b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4ba7      	ldr	r3, [pc, #668]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002196:	4ba6      	ldr	r3, [pc, #664]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	0549      	lsls	r1, r1, #21
 800219c:	430a      	orrs	r2, r1
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
 80021a0:	4ba3      	ldr	r3, [pc, #652]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80021a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	055b      	lsls	r3, r3, #21
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021ae:	231f      	movs	r3, #31
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b6:	4b9f      	ldr	r3, [pc, #636]	; (8002434 <HAL_RCC_OscConfig+0x608>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	d11a      	bne.n	80021f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c2:	4b9c      	ldr	r3, [pc, #624]	; (8002434 <HAL_RCC_OscConfig+0x608>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b9b      	ldr	r3, [pc, #620]	; (8002434 <HAL_RCC_OscConfig+0x608>)
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0049      	lsls	r1, r1, #1
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fe94 	bl	8000efc <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021da:	f7fe fe8f 	bl	8000efc <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e11c      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ec:	4b91      	ldr	r3, [pc, #580]	; (8002434 <HAL_RCC_OscConfig+0x608>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4013      	ands	r3, r2
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x3e2>
 8002200:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002202:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002204:	4b8a      	ldr	r3, [pc, #552]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002206:	2101      	movs	r1, #1
 8002208:	430a      	orrs	r2, r1
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c
 800220c:	e01c      	b.n	8002248 <HAL_RCC_OscConfig+0x41c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x404>
 8002216:	4b86      	ldr	r3, [pc, #536]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 800221c:	2104      	movs	r1, #4
 800221e:	430a      	orrs	r2, r1
 8002220:	65da      	str	r2, [r3, #92]	; 0x5c
 8002222:	4b83      	ldr	r3, [pc, #524]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002228:	2101      	movs	r1, #1
 800222a:	430a      	orrs	r2, r1
 800222c:	65da      	str	r2, [r3, #92]	; 0x5c
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0x41c>
 8002230:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002234:	4b7e      	ldr	r3, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002236:	2101      	movs	r1, #1
 8002238:	438a      	bics	r2, r1
 800223a:	65da      	str	r2, [r3, #92]	; 0x5c
 800223c:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 800223e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002240:	4b7b      	ldr	r3, [pc, #492]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002242:	2104      	movs	r1, #4
 8002244:	438a      	bics	r2, r1
 8002246:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d014      	beq.n	800227a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fe54 	bl	8000efc <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002258:	e009      	b.n	800226e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe fe4f 	bl	8000efc <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	4a74      	ldr	r2, [pc, #464]	; (8002438 <HAL_RCC_OscConfig+0x60c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0db      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226e:	4b70      	ldr	r3, [pc, #448]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x42e>
 8002278:	e013      	b.n	80022a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fe3f 	bl	8000efc <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002282:	e009      	b.n	8002298 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002284:	f7fe fe3a 	bl	8000efc <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	4a6a      	ldr	r2, [pc, #424]	; (8002438 <HAL_RCC_OscConfig+0x60c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0c6      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002298:	4b65      	ldr	r3, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	2202      	movs	r2, #2
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022a2:	231f      	movs	r3, #31
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	4b60      	ldr	r3, [pc, #384]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80022ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b0:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80022b2:	4962      	ldr	r1, [pc, #392]	; (800243c <HAL_RCC_OscConfig+0x610>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d100      	bne.n	80022c2 <HAL_RCC_OscConfig+0x496>
 80022c0:	e0b0      	b.n	8002424 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c2:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2238      	movs	r2, #56	; 0x38
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d100      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4a4>
 80022ce:	e078      	b.n	80023c2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d153      	bne.n	8002380 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b55      	ldr	r3, [pc, #340]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b54      	ldr	r3, [pc, #336]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80022de:	4958      	ldr	r1, [pc, #352]	; (8002440 <HAL_RCC_OscConfig+0x614>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fe0a 	bl	8000efc <HAL_GetTick>
 80022e8:	0003      	movs	r3, r0
 80022ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fe05 	bl	8000efc <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e092      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	4b4b      	ldr	r3, [pc, #300]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	049b      	lsls	r3, r3, #18
 8002308:	4013      	ands	r3, r2
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b48      	ldr	r3, [pc, #288]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x618>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	431a      	orrs	r2, r3
 8002334:	4b3e      	ldr	r3, [pc, #248]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002336:	430a      	orrs	r2, r1
 8002338:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b3c      	ldr	r3, [pc, #240]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0449      	lsls	r1, r1, #17
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002348:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	0549      	lsls	r1, r1, #21
 8002352:	430a      	orrs	r2, r1
 8002354:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fdd1 	bl	8000efc <HAL_GetTick>
 800235a:	0003      	movs	r3, r0
 800235c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe fdcc 	bl	8000efc <HAL_GetTick>
 8002364:	0002      	movs	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e059      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002372:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	049b      	lsls	r3, r3, #18
 800237a:	4013      	ands	r3, r2
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x534>
 800237e:	e051      	b.n	8002424 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 8002386:	492e      	ldr	r1, [pc, #184]	; (8002440 <HAL_RCC_OscConfig+0x614>)
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fdb6 	bl	8000efc <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fdb1 	bl	8000efc <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e03e      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	049b      	lsls	r3, r3, #18
 80023b0:	4013      	ands	r3, r2
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80023ba:	4923      	ldr	r1, [pc, #140]	; (8002448 <HAL_RCC_OscConfig+0x61c>)
 80023bc:	400a      	ands	r2, r1
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	e030      	b.n	8002424 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e02b      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_RCC_OscConfig+0x604>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2203      	movs	r2, #3
 80023d8:	401a      	ands	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d11e      	bne.n	8002420 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2270      	movs	r2, #112	; 0x70
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d117      	bne.n	8002420 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	23fe      	movs	r3, #254	; 0xfe
 80023f4:	01db      	lsls	r3, r3, #7
 80023f6:	401a      	ands	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10e      	bne.n	8002420 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	23f8      	movs	r3, #248	; 0xf8
 8002406:	039b      	lsls	r3, r3, #14
 8002408:	401a      	ands	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d106      	bne.n	8002420 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	0f5b      	lsrs	r3, r3, #29
 8002416:	075a      	lsls	r2, r3, #29
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b008      	add	sp, #32
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	00001388 	.word	0x00001388
 800243c:	efffffff 	.word	0xefffffff
 8002440:	feffffff 	.word	0xfeffffff
 8002444:	1fc1808c 	.word	0x1fc1808c
 8002448:	effefffc 	.word	0xeffefffc

0800244c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0e9      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2207      	movs	r2, #7
 8002466:	4013      	ands	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d91e      	bls.n	80024ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b73      	ldr	r3, [pc, #460]	; (800263c <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2207      	movs	r2, #7
 8002474:	4393      	bics	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_ClockConfig+0x1f0>)
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002480:	f7fe fd3c 	bl	8000efc <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002488:	e009      	b.n	800249e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7fe fd37 	bl	8000efc <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_RCC_ClockConfig+0x1f4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0ca      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2207      	movs	r2, #7
 80024a4:	4013      	ands	r3, r2
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2202      	movs	r2, #2
 80024b2:	4013      	ands	r3, r2
 80024b4:	d015      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2204      	movs	r2, #4
 80024bc:	4013      	ands	r3, r2
 80024be:	d006      	beq.n	80024ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024c0:	4b60      	ldr	r3, [pc, #384]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	4b5f      	ldr	r3, [pc, #380]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 80024c6:	21e0      	movs	r1, #224	; 0xe0
 80024c8:	01c9      	lsls	r1, r1, #7
 80024ca:	430a      	orrs	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ce:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4a5d      	ldr	r2, [pc, #372]	; (8002648 <HAL_RCC_ClockConfig+0x1fc>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4b59      	ldr	r3, [pc, #356]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2201      	movs	r2, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d057      	beq.n	800259c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	029b      	lsls	r3, r3, #10
 80024fc:	4013      	ands	r3, r2
 80024fe:	d12b      	bne.n	8002558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e097      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d107      	bne.n	800251c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250c:	4b4d      	ldr	r3, [pc, #308]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	049b      	lsls	r3, r3, #18
 8002514:	4013      	ands	r3, r2
 8002516:	d11f      	bne.n	8002558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e08b      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002524:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4013      	ands	r3, r2
 800252e:	d113      	bne.n	8002558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e07f      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d106      	bne.n	800254a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253c:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 800253e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d108      	bne.n	8002558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e074      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254a:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e06d      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002558:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2207      	movs	r2, #7
 800255e:	4393      	bics	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4b37      	ldr	r3, [pc, #220]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 8002568:	430a      	orrs	r2, r1
 800256a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256c:	f7fe fcc6 	bl	8000efc <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002574:	e009      	b.n	800258a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002576:	f7fe fcc1 	bl	8000efc <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <HAL_RCC_ClockConfig+0x1f4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e054      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2238      	movs	r2, #56	; 0x38
 8002590:	401a      	ands	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	429a      	cmp	r2, r3
 800259a:	d1ec      	bne.n	8002576 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2207      	movs	r2, #7
 80025a2:	4013      	ands	r3, r2
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d21e      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2207      	movs	r2, #7
 80025b0:	4393      	bics	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025bc:	f7fe fc9e 	bl	8000efc <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025c4:	e009      	b.n	80025da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c6:	f7fe fc99 	bl	8000efc <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_RCC_ClockConfig+0x1f4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e02c      	b.n	8002634 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_ClockConfig+0x1f0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2207      	movs	r2, #7
 80025e0:	4013      	ands	r3, r2
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1ee      	bne.n	80025c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2204      	movs	r2, #4
 80025ee:	4013      	ands	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4a15      	ldr	r2, [pc, #84]	; (800264c <HAL_RCC_ClockConfig+0x200>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002606:	f000 f829 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800260a:	0001      	movs	r1, r0
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCC_ClockConfig+0x1f8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	220f      	movs	r2, #15
 8002614:	401a      	ands	r2, r3
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_RCC_ClockConfig+0x204>)
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	58d3      	ldr	r3, [r2, r3]
 800261c:	221f      	movs	r2, #31
 800261e:	4013      	ands	r3, r2
 8002620:	000a      	movs	r2, r1
 8002622:	40da      	lsrs	r2, r3
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_ClockConfig+0x208>)
 8002626:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x20c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0018      	movs	r0, r3
 800262e:	f7fe fc09 	bl	8000e44 <HAL_InitTick>
 8002632:	0003      	movs	r3, r0
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b004      	add	sp, #16
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40022000 	.word	0x40022000
 8002640:	00001388 	.word	0x00001388
 8002644:	40021000 	.word	0x40021000
 8002648:	fffff0ff 	.word	0xfffff0ff
 800264c:	ffff8fff 	.word	0xffff8fff
 8002650:	08002a6c 	.word	0x08002a6c
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004

0800265c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2238      	movs	r2, #56	; 0x38
 8002668:	4013      	ands	r3, r2
 800266a:	d10f      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0adb      	lsrs	r3, r3, #11
 8002672:	2207      	movs	r2, #7
 8002674:	4013      	ands	r3, r2
 8002676:	2201      	movs	r2, #1
 8002678:	409a      	lsls	r2, r3
 800267a:	0013      	movs	r3, r2
 800267c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	4835      	ldr	r0, [pc, #212]	; (8002758 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002682:	f7fd fd3d 	bl	8000100 <__udivsi3>
 8002686:	0003      	movs	r3, r0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e05d      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800268c:	4b31      	ldr	r3, [pc, #196]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2238      	movs	r2, #56	; 0x38
 8002692:	4013      	ands	r3, r2
 8002694:	2b08      	cmp	r3, #8
 8002696:	d102      	bne.n	800269e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_GetSysClockFreq+0x100>)
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e054      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269e:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2238      	movs	r2, #56	; 0x38
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d138      	bne.n	800271c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2203      	movs	r2, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	2207      	movs	r2, #7
 80026bc:	4013      	ands	r3, r2
 80026be:	3301      	adds	r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d10d      	bne.n	80026e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	4824      	ldr	r0, [pc, #144]	; (800275c <HAL_RCC_GetSysClockFreq+0x100>)
 80026cc:	f7fd fd18 	bl	8000100 <__udivsi3>
 80026d0:	0003      	movs	r3, r0
 80026d2:	0019      	movs	r1, r3
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	227f      	movs	r2, #127	; 0x7f
 80026dc:	4013      	ands	r3, r2
 80026de:	434b      	muls	r3, r1
 80026e0:	617b      	str	r3, [r7, #20]
        break;
 80026e2:	e00d      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	481c      	ldr	r0, [pc, #112]	; (8002758 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026e8:	f7fd fd0a 	bl	8000100 <__udivsi3>
 80026ec:	0003      	movs	r3, r0
 80026ee:	0019      	movs	r1, r3
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	227f      	movs	r2, #127	; 0x7f
 80026f8:	4013      	ands	r3, r2
 80026fa:	434b      	muls	r3, r1
 80026fc:	617b      	str	r3, [r7, #20]
        break;
 80026fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0f5b      	lsrs	r3, r3, #29
 8002706:	2207      	movs	r2, #7
 8002708:	4013      	ands	r3, r2
 800270a:	3301      	adds	r3, #1
 800270c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f7fd fcf5 	bl	8000100 <__udivsi3>
 8002716:	0003      	movs	r3, r0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	e015      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2238      	movs	r2, #56	; 0x38
 8002722:	4013      	ands	r3, r2
 8002724:	2b20      	cmp	r3, #32
 8002726:	d103      	bne.n	8002730 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	e00b      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2238      	movs	r2, #56	; 0x38
 8002736:	4013      	ands	r3, r2
 8002738:	2b18      	cmp	r3, #24
 800273a:	d103      	bne.n	8002744 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800273c:	23fa      	movs	r3, #250	; 0xfa
 800273e:	01db      	lsls	r3, r3, #7
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	e001      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002748:	693b      	ldr	r3, [r7, #16]
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b006      	add	sp, #24
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	40021000 	.word	0x40021000
 8002758:	00f42400 	.word	0x00f42400
 800275c:	007a1200 	.word	0x007a1200

08002760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002768:	2313      	movs	r3, #19
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002770:	2312      	movs	r3, #18
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	4013      	ands	r3, r2
 8002782:	d100      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002784:	e0a3      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2011      	movs	r0, #17
 8002788:	183b      	adds	r3, r7, r0
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b7f      	ldr	r3, [pc, #508]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	055b      	lsls	r3, r3, #21
 8002796:	4013      	ands	r3, r2
 8002798:	d110      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	4b7c      	ldr	r3, [pc, #496]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800279c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800279e:	4b7b      	ldr	r3, [pc, #492]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	0549      	lsls	r1, r1, #21
 80027a4:	430a      	orrs	r2, r1
 80027a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80027a8:	4b78      	ldr	r3, [pc, #480]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	055b      	lsls	r3, r3, #21
 80027b0:	4013      	ands	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	183b      	adds	r3, r7, r0
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027bc:	4b74      	ldr	r3, [pc, #464]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b73      	ldr	r3, [pc, #460]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027c2:	2180      	movs	r1, #128	; 0x80
 80027c4:	0049      	lsls	r1, r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ca:	f7fe fb97 	bl	8000efc <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027d2:	e00b      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d4:	f7fe fb92 	bl	8000efc <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d904      	bls.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027e2:	2313      	movs	r3, #19
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	2203      	movs	r2, #3
 80027e8:	701a      	strb	r2, [r3, #0]
        break;
 80027ea:	e005      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ec:	4b68      	ldr	r3, [pc, #416]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d0ed      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027f8:	2313      	movs	r3, #19
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d154      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002802:	4b62      	ldr	r3, [pc, #392]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002804:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002806:	23c0      	movs	r3, #192	; 0xc0
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4013      	ands	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d019      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	429a      	cmp	r2, r3
 800281c:	d014      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800281e:	4b5b      	ldr	r3, [pc, #364]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	4a5c      	ldr	r2, [pc, #368]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002824:	4013      	ands	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002828:	4b58      	ldr	r3, [pc, #352]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800282a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800282c:	4b57      	ldr	r3, [pc, #348]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	0249      	lsls	r1, r1, #9
 8002832:	430a      	orrs	r2, r1
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002836:	4b55      	ldr	r3, [pc, #340]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800283a:	4b54      	ldr	r3, [pc, #336]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800283c:	4956      	ldr	r1, [pc, #344]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800283e:	400a      	ands	r2, r1
 8002840:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002842:	4b52      	ldr	r3, [pc, #328]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2201      	movs	r2, #1
 800284c:	4013      	ands	r3, r2
 800284e:	d016      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fb54 	bl	8000efc <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002858:	e00c      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fb4f 	bl	8000efc <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	4a4d      	ldr	r2, [pc, #308]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d904      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800286a:	2313      	movs	r3, #19
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2203      	movs	r2, #3
 8002870:	701a      	strb	r2, [r3, #0]
            break;
 8002872:	e004      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002874:	4b45      	ldr	r3, [pc, #276]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	2202      	movs	r2, #2
 800287a:	4013      	ands	r3, r2
 800287c:	d0ed      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800287e:	2313      	movs	r3, #19
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002888:	4b40      	ldr	r3, [pc, #256]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	4a41      	ldr	r2, [pc, #260]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800288e:	4013      	ands	r3, r2
 8002890:	0019      	movs	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002898:	430a      	orrs	r2, r1
 800289a:	65da      	str	r2, [r3, #92]	; 0x5c
 800289c:	e00c      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800289e:	2312      	movs	r3, #18
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	2213      	movs	r2, #19
 80028a4:	18ba      	adds	r2, r7, r2
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e005      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	2312      	movs	r3, #18
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2213      	movs	r2, #19
 80028b2:	18ba      	adds	r2, r7, r2
 80028b4:	7812      	ldrb	r2, [r2, #0]
 80028b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b8:	2311      	movs	r3, #17
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028c8:	4935      	ldr	r1, [pc, #212]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028ca:	400a      	ands	r2, r1
 80028cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d8:	4b2c      	ldr	r3, [pc, #176]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	2203      	movs	r2, #3
 80028de:	4393      	bics	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028e8:	430a      	orrs	r2, r1
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2220      	movs	r2, #32
 80028f2:	4013      	ands	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	4a2a      	ldr	r2, [pc, #168]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002906:	430a      	orrs	r2, r1
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	01db      	lsls	r3, r3, #7
 8002912:	4013      	ands	r3, r2
 8002914:	d015      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	0899      	lsrs	r1, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002924:	430a      	orrs	r2, r1
 8002926:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	05db      	lsls	r3, r3, #23
 8002930:	429a      	cmp	r2, r3
 8002932:	d106      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	0249      	lsls	r1, r1, #9
 800293e:	430a      	orrs	r2, r1
 8002940:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d016      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002954:	4013      	ands	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800295e:	430a      	orrs	r2, r1
 8002960:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	01db      	lsls	r3, r3, #7
 800296a:	429a      	cmp	r2, r3
 800296c:	d106      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0249      	lsls	r1, r1, #9
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800297c:	2312      	movs	r3, #18
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781b      	ldrb	r3, [r3, #0]
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b006      	add	sp, #24
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	fffffcff 	.word	0xfffffcff
 8002998:	fffeffff 	.word	0xfffeffff
 800299c:	00001388 	.word	0x00001388
 80029a0:	efffffff 	.word	0xefffffff
 80029a4:	ffffcfff 	.word	0xffffcfff
 80029a8:	ffff3fff 	.word	0xffff3fff

080029ac <__libc_init_array>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	2600      	movs	r6, #0
 80029b0:	4d0c      	ldr	r5, [pc, #48]	; (80029e4 <__libc_init_array+0x38>)
 80029b2:	4c0d      	ldr	r4, [pc, #52]	; (80029e8 <__libc_init_array+0x3c>)
 80029b4:	1b64      	subs	r4, r4, r5
 80029b6:	10a4      	asrs	r4, r4, #2
 80029b8:	42a6      	cmp	r6, r4
 80029ba:	d109      	bne.n	80029d0 <__libc_init_array+0x24>
 80029bc:	2600      	movs	r6, #0
 80029be:	f000 f821 	bl	8002a04 <_init>
 80029c2:	4d0a      	ldr	r5, [pc, #40]	; (80029ec <__libc_init_array+0x40>)
 80029c4:	4c0a      	ldr	r4, [pc, #40]	; (80029f0 <__libc_init_array+0x44>)
 80029c6:	1b64      	subs	r4, r4, r5
 80029c8:	10a4      	asrs	r4, r4, #2
 80029ca:	42a6      	cmp	r6, r4
 80029cc:	d105      	bne.n	80029da <__libc_init_array+0x2e>
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
 80029d0:	00b3      	lsls	r3, r6, #2
 80029d2:	58eb      	ldr	r3, [r5, r3]
 80029d4:	4798      	blx	r3
 80029d6:	3601      	adds	r6, #1
 80029d8:	e7ee      	b.n	80029b8 <__libc_init_array+0xc>
 80029da:	00b3      	lsls	r3, r6, #2
 80029dc:	58eb      	ldr	r3, [r5, r3]
 80029de:	4798      	blx	r3
 80029e0:	3601      	adds	r6, #1
 80029e2:	e7f2      	b.n	80029ca <__libc_init_array+0x1e>
 80029e4:	08002aac 	.word	0x08002aac
 80029e8:	08002aac 	.word	0x08002aac
 80029ec:	08002aac 	.word	0x08002aac
 80029f0:	08002ab0 	.word	0x08002ab0

080029f4 <memset>:
 80029f4:	0003      	movs	r3, r0
 80029f6:	1882      	adds	r2, r0, r2
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d100      	bne.n	80029fe <memset+0xa>
 80029fc:	4770      	bx	lr
 80029fe:	7019      	strb	r1, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	e7f9      	b.n	80029f8 <memset+0x4>

08002a04 <_init>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr

08002a10 <_fini>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr
