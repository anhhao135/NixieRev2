
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd4  08003dd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dd4  08003dd4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dd4  08003dd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  2000000c  08003de8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08003de8  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111c2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299b  00000000  00000000  000311f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00033b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00034af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b521  00000000  00000000  00035930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139cb  00000000  00000000  00050e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982c7  00000000  00000000  0006481c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcae3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000378c  00000000  00000000  000fcb34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d64 	.word	0x08003d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d64 	.word	0x08003d64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <_ZN9PCF85363AC1ER19__I2C_HandleTypeDef>:
 */

#include "PCF85363A.h"


PCF85363A::PCF85363A(I2C_HandleTypeDef &i2cHandle) : handle(i2cHandle){}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	683a      	ldr	r2, [r7, #0]
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	0018      	movs	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}

0800040e <_ZN9PCF85363A12ReadRegisterEhRh>:

HAL_StatusTypeDef PCF85363A::ReadRegister(uint8_t reg, uint8_t &data){
 800040e:	b590      	push	{r4, r7, lr}
 8000410:	b089      	sub	sp, #36	; 0x24
 8000412:	af04      	add	r7, sp, #16
 8000414:	60f8      	str	r0, [r7, #12]
 8000416:	607a      	str	r2, [r7, #4]
 8000418:	240b      	movs	r4, #11
 800041a:	193b      	adds	r3, r7, r4
 800041c:	1c0a      	adds	r2, r1, #0
 800041e:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(&handle, PCF85363A_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	6818      	ldr	r0, [r3, #0]
 8000424:	193b      	adds	r3, r7, r4
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	b29a      	uxth	r2, r3
 800042a:	2301      	movs	r3, #1
 800042c:	425b      	negs	r3, r3
 800042e:	9302      	str	r3, [sp, #8]
 8000430:	2301      	movs	r3, #1
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2301      	movs	r3, #1
 800043a:	21a2      	movs	r1, #162	; 0xa2
 800043c:	f001 fab2 	bl	80019a4 <HAL_I2C_Mem_Read>
 8000440:	0003      	movs	r3, r0
}
 8000442:	0018      	movs	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	b005      	add	sp, #20
 8000448:	bd90      	pop	{r4, r7, pc}

0800044a <_ZN9PCF85363A10GetSecondsEv>:

HAL_StatusTypeDef PCF85363A::WriteRegister(uint8_t reg, uint8_t &data){
	return HAL_I2C_Mem_Write(&handle, PCF85363A_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
}

int PCF85363A::GetSeconds(){
 800044a:	b5b0      	push	{r4, r5, r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t data;
	status = ReadRegister(PCF85363A_REG_SECS, data);
 8000452:	250f      	movs	r5, #15
 8000454:	197c      	adds	r4, r7, r5
 8000456:	230c      	movs	r3, #12
 8000458:	18fa      	adds	r2, r7, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2101      	movs	r1, #1
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ffd5 	bl	800040e <_ZN9PCF85363A12ReadRegisterEhRh>
 8000464:	0003      	movs	r3, r0
 8000466:	7023      	strb	r3, [r4, #0]

	if (status != HAL_OK){
 8000468:	197b      	adds	r3, r7, r5
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <_ZN9PCF85363A10GetSecondsEv+0x2a>
		return 100;
 8000470:	2364      	movs	r3, #100	; 0x64
 8000472:	e01a      	b.n	80004aa <_ZN9PCF85363A10GetSecondsEv+0x60>
	}

	else {
		uint8_t tens = (data & 0b01110000) >> 4;
 8000474:	200c      	movs	r0, #12
 8000476:	183b      	adds	r3, r7, r0
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	091b      	lsrs	r3, r3, #4
 800047c:	b2da      	uxtb	r2, r3
 800047e:	240e      	movs	r4, #14
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2107      	movs	r1, #7
 8000484:	400a      	ands	r2, r1
 8000486:	701a      	strb	r2, [r3, #0]
		uint8_t digits = data & 0b00001111;
 8000488:	183b      	adds	r3, r7, r0
 800048a:	781a      	ldrb	r2, [r3, #0]
 800048c:	200d      	movs	r0, #13
 800048e:	183b      	adds	r3, r7, r0
 8000490:	210f      	movs	r1, #15
 8000492:	400a      	ands	r2, r1
 8000494:	701a      	strb	r2, [r3, #0]
		return tens * 10 + digits;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	781a      	ldrb	r2, [r3, #0]
 800049a:	0013      	movs	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	189b      	adds	r3, r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	001a      	movs	r2, r3
 80004a4:	183b      	adds	r3, r7, r0
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	18d3      	adds	r3, r2, r3
	}
}
 80004aa:	0018      	movs	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b004      	add	sp, #16
 80004b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080004b4 <_Z18writeSegmentNumberi>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void writeSegmentNumber(int number){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

	switch(number%10){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	210a      	movs	r1, #10
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff ff91 	bl	80003e8 <__aeabi_idivmod>
 80004c6:	000b      	movs	r3, r1
 80004c8:	2b09      	cmp	r3, #9
 80004ca:	d900      	bls.n	80004ce <_Z18writeSegmentNumberi+0x1a>
 80004cc:	e0fe      	b.n	80006cc <_Z18writeSegmentNumberi+0x218>
 80004ce:	009a      	lsls	r2, r3, #2
 80004d0:	4b8d      	ldr	r3, [pc, #564]	; (8000708 <_Z18writeSegmentNumberi+0x254>)
 80004d2:	18d3      	adds	r3, r2, r3
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_RESET);
 80004d8:	4b8c      	ldr	r3, [pc, #560]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80004da:	2200      	movs	r2, #0
 80004dc:	2101      	movs	r1, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 f992 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_RESET);
 80004e4:	4b89      	ldr	r3, [pc, #548]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	2102      	movs	r1, #2
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 f98c 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_RESET);
 80004f0:	4b86      	ldr	r3, [pc, #536]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	2104      	movs	r1, #4
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 f986 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_RESET);
 80004fc:	4b83      	ldr	r3, [pc, #524]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80004fe:	2200      	movs	r2, #0
 8000500:	2108      	movs	r1, #8
 8000502:	0018      	movs	r0, r3
 8000504:	f001 f980 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 8000508:	e0f9      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 1:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_SET);
 800050a:	4b80      	ldr	r3, [pc, #512]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800050c:	2201      	movs	r2, #1
 800050e:	2101      	movs	r1, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f001 f979 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_RESET);
 8000516:	4b7d      	ldr	r3, [pc, #500]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000518:	2200      	movs	r2, #0
 800051a:	2102      	movs	r1, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 f973 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_RESET);
 8000522:	4b7a      	ldr	r3, [pc, #488]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000524:	2200      	movs	r2, #0
 8000526:	2104      	movs	r1, #4
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f96d 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_RESET);
 800052e:	4b77      	ldr	r3, [pc, #476]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000530:	2200      	movs	r2, #0
 8000532:	2108      	movs	r1, #8
 8000534:	0018      	movs	r0, r3
 8000536:	f001 f967 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 800053a:	e0e0      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 2:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_RESET);
 800053c:	4b73      	ldr	r3, [pc, #460]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800053e:	2200      	movs	r2, #0
 8000540:	2101      	movs	r1, #1
 8000542:	0018      	movs	r0, r3
 8000544:	f001 f960 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_SET);
 8000548:	4b70      	ldr	r3, [pc, #448]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800054a:	2201      	movs	r2, #1
 800054c:	2102      	movs	r1, #2
 800054e:	0018      	movs	r0, r3
 8000550:	f001 f95a 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_RESET);
 8000554:	4b6d      	ldr	r3, [pc, #436]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000556:	2200      	movs	r2, #0
 8000558:	2104      	movs	r1, #4
 800055a:	0018      	movs	r0, r3
 800055c:	f001 f954 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_RESET);
 8000560:	4b6a      	ldr	r3, [pc, #424]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000562:	2200      	movs	r2, #0
 8000564:	2108      	movs	r1, #8
 8000566:	0018      	movs	r0, r3
 8000568:	f001 f94e 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 800056c:	e0c7      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 3:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_SET);
 800056e:	4b67      	ldr	r3, [pc, #412]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000570:	2201      	movs	r2, #1
 8000572:	2101      	movs	r1, #1
 8000574:	0018      	movs	r0, r3
 8000576:	f001 f947 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_SET);
 800057a:	4b64      	ldr	r3, [pc, #400]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800057c:	2201      	movs	r2, #1
 800057e:	2102      	movs	r1, #2
 8000580:	0018      	movs	r0, r3
 8000582:	f001 f941 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_RESET);
 8000586:	4b61      	ldr	r3, [pc, #388]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000588:	2200      	movs	r2, #0
 800058a:	2104      	movs	r1, #4
 800058c:	0018      	movs	r0, r3
 800058e:	f001 f93b 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_RESET);
 8000592:	4b5e      	ldr	r3, [pc, #376]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000594:	2200      	movs	r2, #0
 8000596:	2108      	movs	r1, #8
 8000598:	0018      	movs	r0, r3
 800059a:	f001 f935 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 800059e:	e0ae      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 4:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_RESET);
 80005a0:	4b5a      	ldr	r3, [pc, #360]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	2101      	movs	r1, #1
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 f92e 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_RESET);
 80005ac:	4b57      	ldr	r3, [pc, #348]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	2102      	movs	r1, #2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 f928 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_SET);
 80005b8:	4b54      	ldr	r3, [pc, #336]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	2104      	movs	r1, #4
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 f922 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_RESET);
 80005c4:	4b51      	ldr	r3, [pc, #324]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	2108      	movs	r1, #8
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 f91c 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 80005d0:	e095      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 5:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_SET);
 80005d2:	4b4e      	ldr	r3, [pc, #312]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 f915 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_RESET);
 80005de:	4b4b      	ldr	r3, [pc, #300]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	2102      	movs	r1, #2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f001 f90f 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_SET);
 80005ea:	4b48      	ldr	r3, [pc, #288]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	2104      	movs	r1, #4
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f909 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_RESET);
 80005f6:	4b45      	ldr	r3, [pc, #276]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	2108      	movs	r1, #8
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 f903 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 8000602:	e07c      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 6:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_RESET);
 8000604:	4b41      	ldr	r3, [pc, #260]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	0018      	movs	r0, r3
 800060c:	f001 f8fc 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_SET);
 8000610:	4b3e      	ldr	r3, [pc, #248]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000612:	2201      	movs	r2, #1
 8000614:	2102      	movs	r1, #2
 8000616:	0018      	movs	r0, r3
 8000618:	f001 f8f6 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_SET);
 800061c:	4b3b      	ldr	r3, [pc, #236]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800061e:	2201      	movs	r2, #1
 8000620:	2104      	movs	r1, #4
 8000622:	0018      	movs	r0, r3
 8000624:	f001 f8f0 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_RESET);
 8000628:	4b38      	ldr	r3, [pc, #224]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800062a:	2200      	movs	r2, #0
 800062c:	2108      	movs	r1, #8
 800062e:	0018      	movs	r0, r3
 8000630:	f001 f8ea 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 8000634:	e063      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 7:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_SET);
 8000636:	4b35      	ldr	r3, [pc, #212]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	0018      	movs	r0, r3
 800063e:	f001 f8e3 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_SET);
 8000642:	4b32      	ldr	r3, [pc, #200]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000644:	2201      	movs	r2, #1
 8000646:	2102      	movs	r1, #2
 8000648:	0018      	movs	r0, r3
 800064a:	f001 f8dd 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_SET);
 800064e:	4b2f      	ldr	r3, [pc, #188]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000650:	2201      	movs	r2, #1
 8000652:	2104      	movs	r1, #4
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f8d7 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_RESET);
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800065c:	2200      	movs	r2, #0
 800065e:	2108      	movs	r1, #8
 8000660:	0018      	movs	r0, r3
 8000662:	f001 f8d1 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 8000666:	e04a      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 8:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_RESET);
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800066a:	2200      	movs	r2, #0
 800066c:	2101      	movs	r1, #1
 800066e:	0018      	movs	r0, r3
 8000670:	f001 f8ca 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_RESET);
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000676:	2200      	movs	r2, #0
 8000678:	2102      	movs	r1, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f001 f8c4 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_RESET);
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 8000682:	2200      	movs	r2, #0
 8000684:	2104      	movs	r1, #4
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f8be 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_SET);
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800068e:	2201      	movs	r2, #1
 8000690:	2108      	movs	r1, #8
 8000692:	0018      	movs	r0, r3
 8000694:	f001 f8b8 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 8000698:	e031      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		case 9:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_SET);
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 800069c:	2201      	movs	r2, #1
 800069e:	2101      	movs	r1, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 f8b1 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_RESET);
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f8ab 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_RESET);
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f8a5 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_SET);
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	2108      	movs	r1, #8
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 f89f 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 80006ca:	e018      	b.n	80006fe <_Z18writeSegmentNumberi+0x24a>
		default:
			HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin, GPIO_PIN_SET);
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	2101      	movs	r1, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 f898 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D1_Pin, GPIO_PIN_SET);
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80006da:	2201      	movs	r2, #1
 80006dc:	2102      	movs	r1, #2
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f892 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D2_Pin, GPIO_PIN_SET);
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	2104      	movs	r1, #4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f88c 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_D3_Pin, GPIO_PIN_SET);
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <_Z18writeSegmentNumberi+0x258>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	2108      	movs	r1, #8
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 f886 	bl	8001808 <HAL_GPIO_WritePin>
			break;
 80006fc:	46c0      	nop			; (mov r8, r8)

	}

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b002      	add	sp, #8
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	08003d7c 	.word	0x08003d7c
 800070c:	48000400 	.word	0x48000400

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fc93 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f837 	bl	800078c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 fa67 	bl	8000bf0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000722:	f000 fa47 	bl	8000bb4 <_ZL11MX_DMA_Initv>
  MX_USB_PCD_Init();
 8000726:	f000 fa1b 	bl	8000b60 <_ZL15MX_USB_PCD_Initv>
  MX_I2C1_Init();
 800072a:	f000 f89d 	bl	8000868 <_ZL12MX_I2C1_Initv>
  MX_TIM15_Init();
 800072e:	f000 f9b3 	bl	8000a98 <_ZL13MX_TIM15_Initv>
  MX_TIM1_Init();
 8000732:	f000 f8e5 	bl	8000900 <_ZL12MX_TIM1_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  PCF85363A myRTC(hi2c1);
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <main+0x74>)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fe59 	bl	80003f4 <_ZN9PCF85363AC1ER19__I2C_HandleTypeDef>
  int seconds = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]


  int num = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]

  while (1)
  {

	  seconds = myRTC.GetSeconds();
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff fe7c 	bl	800044a <_ZN9PCF85363A10GetSecondsEv>
 8000752:	0003      	movs	r3, r0
 8000754:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <main+0x78>)
 800075c:	0019      	movs	r1, r3
 800075e:	0010      	movs	r0, r2
 8000760:	f001 f86f 	bl	8001842 <HAL_GPIO_TogglePin>
	  writeSegmentNumber(seconds % 10);
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	210a      	movs	r1, #10
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fe3d 	bl	80003e8 <__aeabi_idivmod>
 800076e:	000b      	movs	r3, r1
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fe9f 	bl	80004b4 <_Z18writeSegmentNumberi>
	  num++;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(50);
 800077c:	2032      	movs	r0, #50	; 0x32
 800077e:	f000 fcc3 	bl	8001108 <HAL_Delay>
	  seconds = myRTC.GetSeconds();
 8000782:	e7e2      	b.n	800074a <main+0x3a>
 8000784:	20000028 	.word	0x20000028
 8000788:	48000400 	.word	0x48000400

0800078c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b099      	sub	sp, #100	; 0x64
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	242c      	movs	r4, #44	; 0x2c
 8000794:	193b      	adds	r3, r7, r4
 8000796:	0018      	movs	r0, r3
 8000798:	2334      	movs	r3, #52	; 0x34
 800079a:	001a      	movs	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f003 fad9 	bl	8003d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a2:	231c      	movs	r3, #28
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	0018      	movs	r0, r3
 80007a8:	2310      	movs	r3, #16
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 fad1 	bl	8003d54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b2:	003b      	movs	r3, r7
 80007b4:	0018      	movs	r0, r3
 80007b6:	231c      	movs	r3, #28
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f003 faca 	bl	8003d54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 80007c0:	0021      	movs	r1, r4
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2223      	movs	r2, #35	; 0x23
 80007c6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2201      	movs	r2, #1
 80007cc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2201      	movs	r2, #1
 80007d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2210      	movs	r2, #16
 80007de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fe67 	bl	80024bc <HAL_RCC_OscConfig>
 80007ee:	0003      	movs	r3, r0
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	4193      	sbcs	r3, r2
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <_Z18SystemClock_Configv+0x72>
  {
    Error_Handler();
 80007fa:	f000 fa93 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	211c      	movs	r1, #28
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2207      	movs	r2, #7
 8000804:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2201      	movs	r2, #1
 800080a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2101      	movs	r1, #1
 800081c:	0018      	movs	r0, r3
 800081e:	f002 f9d3 	bl	8002bc8 <HAL_RCC_ClockConfig>
 8000822:	0003      	movs	r3, r0
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	4193      	sbcs	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800082e:	f000 fa79 	bl	8000d24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000832:	003b      	movs	r3, r7
 8000834:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <_Z18SystemClock_Configv+0xd8>)
 8000836:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800083e:	003b      	movs	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	003b      	movs	r3, r7
 8000846:	0018      	movs	r0, r3
 8000848:	f002 fb0c 	bl	8002e64 <HAL_RCCEx_PeriphCLKConfig>
 800084c:	0003      	movs	r3, r0
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	4193      	sbcs	r3, r2
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8000858:	f000 fa64 	bl	8000d24 <Error_Handler>
  }
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b019      	add	sp, #100	; 0x64
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	00020020 	.word	0x00020020

08000868 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 800086e:	4a22      	ldr	r2, [pc, #136]	; (80008f8 <_ZL12MX_I2C1_Initv+0x90>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <_ZL12MX_I2C1_Initv+0x94>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 ffe7 	bl	8001878 <HAL_I2C_Init>
 80008aa:	0003      	movs	r3, r0
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	4193      	sbcs	r3, r2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 80008b6:	f000 fa35 	bl	8000d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 80008bc:	2100      	movs	r1, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fc3a 	bl	8002138 <HAL_I2CEx_ConfigAnalogFilter>
 80008c4:	0003      	movs	r3, r0
 80008c6:	1e5a      	subs	r2, r3, #1
 80008c8:	4193      	sbcs	r3, r2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 80008d0:	f000 fa28 	bl	8000d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <_ZL12MX_I2C1_Initv+0x8c>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fc79 	bl	80021d0 <HAL_I2CEx_ConfigDigitalFilter>
 80008de:	0003      	movs	r3, r0
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	4193      	sbcs	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 80008ea:	f000 fa1b 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000028 	.word	0x20000028
 80008f8:	40005400 	.word	0x40005400
 80008fc:	2000090e 	.word	0x2000090e

08000900 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b096      	sub	sp, #88	; 0x58
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	2348      	movs	r3, #72	; 0x48
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	0018      	movs	r0, r3
 800090c:	2310      	movs	r3, #16
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f003 fa1f 	bl	8003d54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	2340      	movs	r3, #64	; 0x40
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	0018      	movs	r0, r3
 800091c:	2308      	movs	r3, #8
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f003 fa17 	bl	8003d54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	2324      	movs	r3, #36	; 0x24
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	231c      	movs	r3, #28
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f003 fa0f 	bl	8003d54 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	2320      	movs	r3, #32
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f003 fa08 	bl	8003d54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000946:	4a53      	ldr	r2, [pc, #332]	; (8000a94 <_ZL12MX_TIM1_Initv+0x194>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25-1;
 800094a:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 800094c:	2218      	movs	r2, #24
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000956:	4b4e      	ldr	r3, [pc, #312]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000958:	2263      	movs	r2, #99	; 0x63
 800095a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000962:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b49      	ldr	r3, [pc, #292]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000970:	0018      	movs	r0, r3
 8000972:	f002 fb75 	bl	8003060 <HAL_TIM_Base_Init>
 8000976:	0003      	movs	r3, r0
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	4193      	sbcs	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8000982:	f000 f9cf 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2148      	movs	r1, #72	; 0x48
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f002 fcd0 	bl	800333c <HAL_TIM_ConfigClockSource>
 800099c:	0003      	movs	r3, r0
 800099e:	1e5a      	subs	r2, r3, #1
 80009a0:	4193      	sbcs	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80009a8:	f000 f9bc 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ac:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f002 fba6 	bl	8003100 <HAL_TIM_PWM_Init>
 80009b4:	0003      	movs	r3, r0
 80009b6:	1e5a      	subs	r2, r3, #1
 80009b8:	4193      	sbcs	r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80009c0:	f000 f9b0 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2140      	movs	r1, #64	; 0x40
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f003 f899 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	0003      	movs	r3, r0
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	4193      	sbcs	r3, r2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <_ZL12MX_TIM1_Initv+0xee>
  {
    Error_Handler();
 80009ea:	f000 f99b 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2124      	movs	r1, #36	; 0x24
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2260      	movs	r2, #96	; 0x60
 80009f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1a:	1879      	adds	r1, r7, r1
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 fbc5 	bl	80031b0 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	0003      	movs	r3, r0
 8000a28:	1e5a      	subs	r2, r3, #1
 8000a2a:	4193      	sbcs	r3, r2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <_ZL12MX_TIM1_Initv+0x136>
  {
    Error_Handler();
 8000a32:	f000 f977 	bl	8000d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	0192      	lsls	r2, r2, #6
 8000a5a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a62:	1d3a      	adds	r2, r7, #4
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f003 f8af 	bl	8003bcc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	4193      	sbcs	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8000a7a:	f000 f953 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <_ZL12MX_TIM1_Initv+0x190>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fa29 	bl	8000ed8 <HAL_TIM_MspPostInit>

}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b016      	add	sp, #88	; 0x58
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	2000007c 	.word	0x2000007c
 8000a94:	40012c00 	.word	0x40012c00

08000a98 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	18fb      	adds	r3, r7, r3
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f003 f953 	bl	8003d54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aae:	003b      	movs	r3, r7
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f003 f94c 	bl	8003d54 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000abe:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <_ZL13MX_TIM15_Initv+0xc0>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000ad0:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <_ZL13MX_TIM15_Initv+0xc4>)
 8000ad2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f002 fab9 	bl	8003060 <HAL_TIM_Base_Init>
 8000aee:	0003      	movs	r3, r0
 8000af0:	1e5a      	subs	r2, r3, #1
 8000af2:	4193      	sbcs	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <_ZL13MX_TIM15_Initv+0x66>
  {
    Error_Handler();
 8000afa:	f000 f913 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	2108      	movs	r1, #8
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	0152      	lsls	r2, r2, #5
 8000b06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000b08:	187a      	adds	r2, r7, r1
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 fc14 	bl	800333c <HAL_TIM_ConfigClockSource>
 8000b14:	0003      	movs	r3, r0
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	4193      	sbcs	r3, r2
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <_ZL13MX_TIM15_Initv+0x8c>
  {
    Error_Handler();
 8000b20:	f000 f900 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	003b      	movs	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b30:	003a      	movs	r2, r7
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_ZL13MX_TIM15_Initv+0xbc>)
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 ffea 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	1e5a      	subs	r2, r3, #1
 8000b40:	4193      	sbcs	r3, r2
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <_ZL13MX_TIM15_Initv+0xb4>
  {
    Error_Handler();
 8000b48:	f000 f8ec 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b006      	add	sp, #24
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000c4 	.word	0x200000c4
 8000b58:	40014000 	.word	0x40014000
 8000b5c:	0000ffff 	.word	0x0000ffff

08000b60 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_ZL15MX_USB_PCD_Initv+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_ZL15MX_USB_PCD_Initv+0x4c>)
 8000b90:	0018      	movs	r0, r3
 8000b92:	f001 fb69 	bl	8002268 <HAL_PCD_Init>
 8000b96:	0003      	movs	r3, r0
 8000b98:	1e5a      	subs	r2, r3, #1
 8000b9a:	4193      	sbcs	r3, r2
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <_ZL15MX_USB_PCD_Initv+0x46>
  {
    Error_Handler();
 8000ba2:	f000 f8bf 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000150 	.word	0x20000150
 8000bb0:	40005c00 	.word	0x40005c00

08000bb4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <_ZL11MX_DMA_Initv+0x38>)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <_ZL11MX_DMA_Initv+0x38>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <_ZL11MX_DMA_Initv+0x38>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f000 fb66 	bl	80012a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f000 fb78 	bl	80012d2 <HAL_NVIC_EnableIRQ>

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000

08000bf0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	240c      	movs	r4, #12
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	2314      	movs	r3, #20
 8000bfe:	001a      	movs	r2, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	f003 f8a7 	bl	8003d54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c08:	695a      	ldr	r2, [r3, #20]
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	03c9      	lsls	r1, r1, #15
 8000c10:	430a      	orrs	r2, r1
 8000c12:	615a      	str	r2, [r3, #20]
 8000c14:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	03db      	lsls	r3, r3, #15
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b3d      	ldr	r3, [pc, #244]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c24:	695a      	ldr	r2, [r3, #20]
 8000c26:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	0289      	lsls	r1, r1, #10
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	615a      	str	r2, [r3, #20]
 8000c30:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	029b      	lsls	r3, r3, #10
 8000c38:	4013      	ands	r3, r2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c40:	695a      	ldr	r2, [r3, #20]
 8000c42:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	02c9      	lsls	r1, r1, #11
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <_ZL12MX_GPIO_Initv+0x128>)
 8000c4e:	695a      	ldr	r2, [r3, #20]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	02db      	lsls	r3, r3, #11
 8000c54:	4013      	ands	r3, r2
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_D0_Pin|SEG_D1_Pin|SEG_D2_Pin|LED_BLINK_Pin
 8000c5a:	4930      	ldr	r1, [pc, #192]	; (8000d1c <_ZL12MX_GPIO_Initv+0x12c>)
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <_ZL12MX_GPIO_Initv+0x130>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fdd1 	bl	8001808 <HAL_GPIO_WritePin>
                          |SEG_D3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	0099      	lsls	r1, r3, #2
 8000c6a:	2390      	movs	r3, #144	; 0x90
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	2200      	movs	r2, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fdc9 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	220a      	movs	r2, #10
 8000c7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2201      	movs	r2, #1
 8000c86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	193a      	adds	r2, r7, r4
 8000c8a:	2390      	movs	r3, #144	; 0x90
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 fc41 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_D0_Pin SEG_D1_Pin SEG_D2_Pin SEG_D3_Pin */
  GPIO_InitStruct.Pin = SEG_D0_Pin|SEG_D1_Pin|SEG_D2_Pin|SEG_D3_Pin;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	220f      	movs	r2, #15
 8000c9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <_ZL12MX_GPIO_Initv+0x130>)
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	0010      	movs	r0, r2
 8000cb6:	f000 fc2f 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLINK_Pin */
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 8000cba:	0021      	movs	r1, r4
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	0212      	lsls	r2, r2, #8
 8000cc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	000c      	movs	r4, r1
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2201      	movs	r2, #1
 8000cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <_ZL12MX_GPIO_Initv+0x130>)
 8000cdc:	0019      	movs	r1, r3
 8000cde:	0010      	movs	r0, r2
 8000ce0:	f000 fc1a 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8000ce4:	0021      	movs	r1, r4
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8000d00:	187a      	adds	r2, r7, r1
 8000d02:	2390      	movs	r3, #144	; 0x90
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	0011      	movs	r1, r2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fc05 	bl	8001518 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b009      	add	sp, #36	; 0x24
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	0000800f 	.word	0x0000800f
 8000d20:	48000400 	.word	0x48000400

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x44>)
 8000d38:	699a      	ldr	r2, [r3, #24]
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_MspInit+0x44>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_MspInit+0x44>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	2201      	movs	r2, #1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x44>)
 8000d50:	69da      	ldr	r2, [r3, #28]
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_MspInit+0x44>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0549      	lsls	r1, r1, #21
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	61da      	str	r2, [r3, #28]
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_MspInit+0x44>)
 8000d5e:	69da      	ldr	r2, [r3, #28]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	055b      	lsls	r3, r3, #21
 8000d64:	4013      	ands	r3, r2
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b08b      	sub	sp, #44	; 0x2c
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	2414      	movs	r4, #20
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	0018      	movs	r0, r3
 8000d86:	2314      	movs	r3, #20
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f002 ffe2 	bl	8003d54 <memset>
  if(hi2c->Instance==I2C1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <HAL_I2C_MspInit+0x90>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d131      	bne.n	8000dfe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_I2C_MspInit+0x94>)
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_I2C_MspInit+0x94>)
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	02c9      	lsls	r1, r1, #11
 8000da4:	430a      	orrs	r2, r1
 8000da6:	615a      	str	r2, [r3, #20]
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_I2C_MspInit+0x94>)
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	02db      	lsls	r3, r3, #11
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db6:	0021      	movs	r1, r4
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	22c0      	movs	r2, #192	; 0xc0
 8000dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2212      	movs	r2, #18
 8000dc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_I2C_MspInit+0x98>)
 8000dda:	0019      	movs	r1, r3
 8000ddc:	0010      	movs	r0, r2
 8000dde:	f000 fb9b 	bl	8001518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_I2C_MspInit+0x94>)
 8000de4:	69da      	ldr	r2, [r3, #28]
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_I2C_MspInit+0x94>)
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	0389      	lsls	r1, r1, #14
 8000dec:	430a      	orrs	r2, r1
 8000dee:	61da      	str	r2, [r3, #28]
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_I2C_MspInit+0x94>)
 8000df2:	69da      	ldr	r2, [r3, #28]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	039b      	lsls	r3, r3, #14
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b00b      	add	sp, #44	; 0x2c
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <HAL_TIM_Base_MspInit+0xb0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d136      	bne.n	8000e94 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb4>)
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb4>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	0109      	lsls	r1, r1, #4
 8000e30:	430a      	orrs	r2, r1
 8000e32:	619a      	str	r2, [r3, #24]
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb4>)
 8000e36:	699a      	ldr	r2, [r3, #24]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e44:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <HAL_TIM_Base_MspInit+0xbc>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e4a:	2210      	movs	r2, #16
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	0052      	lsls	r2, r2, #1
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	00d2      	lsls	r2, r2, #3
 8000e68:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 fa47 	bl	800130c <HAL_DMA_Init>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000e82:	f7ff ff4f 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_TIM_Base_MspInit+0xb8>)
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e92:	e012      	b.n	8000eba <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM15)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_TIM_Base_MspInit+0xc0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10d      	bne.n	8000eba <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb4>)
 8000ea0:	699a      	ldr	r2, [r3, #24]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb4>)
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	0249      	lsls	r1, r1, #9
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	619a      	str	r2, [r3, #24]
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_TIM_Base_MspInit+0xb4>)
 8000eae:	699a      	ldr	r2, [r3, #24]
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	025b      	lsls	r3, r3, #9
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	40012c00 	.word	0x40012c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	2000010c 	.word	0x2000010c
 8000ed0:	4002001c 	.word	0x4002001c
 8000ed4:	40014000 	.word	0x40014000

08000ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	240c      	movs	r4, #12
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	2314      	movs	r3, #20
 8000ee8:	001a      	movs	r2, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	f002 ff32 	bl	8003d54 <memset>
  if(htim->Instance==TIM1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <HAL_TIM_MspPostInit+0x78>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d125      	bne.n	8000f46 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_TIM_MspPostInit+0x7c>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_TIM_MspPostInit+0x7c>)
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	0289      	lsls	r1, r1, #10
 8000f04:	430a      	orrs	r2, r1
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_TIM_MspPostInit+0x7c>)
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_STEP_Pin;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	0052      	lsls	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	0021      	movs	r1, r4
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2202      	movs	r2, #2
 8000f24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2202      	movs	r2, #2
 8000f36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_STEP_GPIO_Port, &GPIO_InitStruct);
 8000f38:	187a      	adds	r2, r7, r1
 8000f3a:	2390      	movs	r3, #144	; 0x90
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	0011      	movs	r1, r2
 8000f40:	0018      	movs	r0, r3
 8000f42:	f000 fae9 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b009      	add	sp, #36	; 0x24
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	40012c00 	.word	0x40012c00
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_PCD_MspInit+0x38>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10d      	bne.n	8000f86 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_PCD_MspInit+0x3c>)
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_PCD_MspInit+0x3c>)
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	0409      	lsls	r1, r1, #16
 8000f74:	430a      	orrs	r2, r1
 8000f76:	61da      	str	r2, [r3, #28]
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_PCD_MspInit+0x3c>)
 8000f7a:	69da      	ldr	r2, [r3, #28]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40005c00 	.word	0x40005c00
 8000f94:	40021000 	.word	0x40021000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f888 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <DMA1_Channel2_3_IRQHandler+0x14>)
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 f9e4 	bl	800139c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	2000010c 	.word	0x2000010c

08000fe0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff0:	f7ff fff6 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800101a:	f002 fe77 	bl	8003d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101e:	f7ff fb77 	bl	8000710 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   r0, =_estack
 8001024:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001030:	08003ddc 	.word	0x08003ddc
  ldr r2, =_sbss
 8001034:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001038:	20000448 	.word	0x20000448

0800103c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_COMP_IRQHandler>
	...

08001040 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_Init+0x24>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_Init+0x24>)
 800104a:	2110      	movs	r1, #16
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f809 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001056:	f7ff fe6b 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x5c>)
 8001072:	681c      	ldr	r4, [r3, #0]
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_InitTick+0x60>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	0019      	movs	r1, r3
 800107a:	23fa      	movs	r3, #250	; 0xfa
 800107c:	0098      	lsls	r0, r3, #2
 800107e:	f7ff f843 	bl	8000108 <__udivsi3>
 8001082:	0003      	movs	r3, r0
 8001084:	0019      	movs	r1, r3
 8001086:	0020      	movs	r0, r4
 8001088:	f7ff f83e 	bl	8000108 <__udivsi3>
 800108c:	0003      	movs	r3, r0
 800108e:	0018      	movs	r0, r3
 8001090:	f000 f92f 	bl	80012f2 <HAL_SYSTICK_Config>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e00f      	b.n	80010bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d80b      	bhi.n	80010ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	2301      	movs	r3, #1
 80010a6:	425b      	negs	r3, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 f8fc 	bl	80012a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_InitTick+0x64>)
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b003      	add	sp, #12
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	001a      	movs	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x20>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	18d2      	adds	r2, r2, r3
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_IncTick+0x20>)
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000444 	.word	0x20000444

080010f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <HAL_GetTick+0x10>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000444 	.word	0x20000444

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff fff0 	bl	80010f4 <HAL_GetTick>
 8001114:	0003      	movs	r3, r0
 8001116:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	001a      	movs	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	189b      	adds	r3, r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	f7ff ffe0 	bl	80010f4 <HAL_GetTick>
 8001134:	0002      	movs	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	20000008 	.word	0x20000008

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	0002      	movs	r2, r0
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b7f      	cmp	r3, #127	; 0x7f
 8001162:	d809      	bhi.n	8001178 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	231f      	movs	r3, #31
 800116c:	401a      	ands	r2, r3
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_EnableIRQ+0x30>)
 8001170:	2101      	movs	r1, #1
 8001172:	4091      	lsls	r1, r2
 8001174:	000a      	movs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
  }
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b7f      	cmp	r3, #127	; 0x7f
 8001198:	d828      	bhi.n	80011ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <__NVIC_SetPriority+0xd4>)
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	33c0      	adds	r3, #192	; 0xc0
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	589b      	ldr	r3, [r3, r2]
 80011aa:	1dfa      	adds	r2, r7, #7
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	0011      	movs	r1, r2
 80011b0:	2203      	movs	r2, #3
 80011b2:	400a      	ands	r2, r1
 80011b4:	00d2      	lsls	r2, r2, #3
 80011b6:	21ff      	movs	r1, #255	; 0xff
 80011b8:	4091      	lsls	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	43d2      	mvns	r2, r2
 80011be:	401a      	ands	r2, r3
 80011c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	22ff      	movs	r2, #255	; 0xff
 80011c8:	401a      	ands	r2, r3
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	4003      	ands	r3, r0
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d8:	481f      	ldr	r0, [pc, #124]	; (8001258 <__NVIC_SetPriority+0xd4>)
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	430a      	orrs	r2, r1
 80011e4:	33c0      	adds	r3, #192	; 0xc0
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ea:	e031      	b.n	8001250 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <__NVIC_SetPriority+0xd8>)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	0019      	movs	r1, r3
 80011f4:	230f      	movs	r3, #15
 80011f6:	400b      	ands	r3, r1
 80011f8:	3b08      	subs	r3, #8
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3306      	adds	r3, #6
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	3304      	adds	r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	1dfa      	adds	r2, r7, #7
 8001208:	7812      	ldrb	r2, [r2, #0]
 800120a:	0011      	movs	r1, r2
 800120c:	2203      	movs	r2, #3
 800120e:	400a      	ands	r2, r1
 8001210:	00d2      	lsls	r2, r2, #3
 8001212:	21ff      	movs	r1, #255	; 0xff
 8001214:	4091      	lsls	r1, r2
 8001216:	000a      	movs	r2, r1
 8001218:	43d2      	mvns	r2, r2
 800121a:	401a      	ands	r2, r3
 800121c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	019b      	lsls	r3, r3, #6
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	401a      	ands	r2, r3
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	0018      	movs	r0, r3
 800122c:	2303      	movs	r3, #3
 800122e:	4003      	ands	r3, r0
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <__NVIC_SetPriority+0xd8>)
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	001c      	movs	r4, r3
 800123c:	230f      	movs	r3, #15
 800123e:	4023      	ands	r3, r4
 8001240:	3b08      	subs	r3, #8
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	430a      	orrs	r2, r1
 8001246:	3306      	adds	r3, #6
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	18c3      	adds	r3, r0, r3
 800124c:	3304      	adds	r3, #4
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b003      	add	sp, #12
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	045b      	lsls	r3, r3, #17
 8001270:	429a      	cmp	r2, r3
 8001272:	d301      	bcc.n	8001278 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001274:	2301      	movs	r3, #1
 8001276:	e010      	b.n	800129a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <SysTick_Config+0x44>)
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	3a01      	subs	r2, #1
 800127e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001280:	2301      	movs	r3, #1
 8001282:	425b      	negs	r3, r3
 8001284:	2103      	movs	r1, #3
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ff7c 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x44>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x44>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	210f      	movs	r1, #15
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	1c02      	adds	r2, r0, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ff5d 	bl	8001184 <__NVIC_SetPriority>
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b004      	add	sp, #16
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	0002      	movs	r2, r0
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff ff33 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ffaf 	bl	8001260 <SysTick_Config>
 8001302:	0003      	movs	r3, r0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e036      	b.n	8001390 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2221      	movs	r2, #33	; 0x21
 8001326:	2102      	movs	r1, #2
 8001328:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_DMA_Init+0x8c>)
 8001336:	4013      	ands	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	0018      	movs	r0, r3
 8001374:	f000 f8b4 	bl	80014e0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2221      	movs	r2, #33	; 0x21
 8001382:	2101      	movs	r1, #1
 8001384:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b004      	add	sp, #16
 8001396:	bd80      	pop	{r7, pc}
 8001398:	ffffc00f 	.word	0xffffc00f

0800139c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	2204      	movs	r2, #4
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	d024      	beq.n	800140e <HAL_DMA_IRQHandler+0x72>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d020      	beq.n	800140e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2220      	movs	r2, #32
 80013d4:	4013      	ands	r3, r2
 80013d6:	d107      	bne.n	80013e8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2104      	movs	r1, #4
 80013e4:	438a      	bics	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	2104      	movs	r1, #4
 80013f2:	4091      	lsls	r1, r2
 80013f4:	000a      	movs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d100      	bne.n	8001402 <HAL_DMA_IRQHandler+0x66>
 8001400:	e06a      	b.n	80014d8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	0010      	movs	r0, r2
 800140a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800140c:	e064      	b.n	80014d8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	2202      	movs	r2, #2
 8001414:	409a      	lsls	r2, r3
 8001416:	0013      	movs	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	d02b      	beq.n	8001476 <HAL_DMA_IRQHandler+0xda>
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2202      	movs	r2, #2
 8001422:	4013      	ands	r3, r2
 8001424:	d027      	beq.n	8001476 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2220      	movs	r2, #32
 800142e:	4013      	ands	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	210a      	movs	r1, #10
 800143e:	438a      	bics	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2221      	movs	r2, #33	; 0x21
 8001446:	2101      	movs	r1, #1
 8001448:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001452:	2102      	movs	r1, #2
 8001454:	4091      	lsls	r1, r2
 8001456:	000a      	movs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2220      	movs	r2, #32
 800145e:	2100      	movs	r1, #0
 8001460:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	2b00      	cmp	r3, #0
 8001468:	d036      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	0010      	movs	r0, r2
 8001472:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001474:	e030      	b.n	80014d8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2208      	movs	r2, #8
 800147c:	409a      	lsls	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	d028      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x13c>
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2208      	movs	r2, #8
 800148a:	4013      	ands	r3, r2
 800148c:	d024      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	210e      	movs	r1, #14
 800149a:	438a      	bics	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	2101      	movs	r1, #1
 80014a8:	4091      	lsls	r1, r2
 80014aa:	000a      	movs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2221      	movs	r2, #33	; 0x21
 80014b8:	2101      	movs	r1, #1
 80014ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	2100      	movs	r1, #0
 80014c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	0010      	movs	r0, r2
 80014d4:	4798      	blx	r3
    }
  }
}
 80014d6:	e7ff      	b.n	80014d8 <HAL_DMA_IRQHandler+0x13c>
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b004      	add	sp, #16
 80014de:	bd80      	pop	{r7, pc}

080014e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <DMA_CalcBaseAndBitshift+0x30>)
 80014ee:	4694      	mov	ip, r2
 80014f0:	4463      	add	r3, ip
 80014f2:	2114      	movs	r1, #20
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7fe fe07 	bl	8000108 <__udivsi3>
 80014fa:	0003      	movs	r3, r0
 80014fc:	009a      	lsls	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <DMA_CalcBaseAndBitshift+0x34>)
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}
 8001510:	bffdfff8 	.word	0xbffdfff8
 8001514:	40020000 	.word	0x40020000

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e155      	b.n	80017d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4091      	lsls	r1, r2
 8001532:	000a      	movs	r2, r1
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d100      	bne.n	8001540 <HAL_GPIO_Init+0x28>
 800153e:	e146      	b.n	80017ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2203      	movs	r2, #3
 8001546:	4013      	ands	r3, r2
 8001548:	2b01      	cmp	r3, #1
 800154a:	d005      	beq.n	8001558 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2203      	movs	r2, #3
 8001552:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001554:	2b02      	cmp	r3, #2
 8001556:	d130      	bne.n	80015ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	409a      	lsls	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	43da      	mvns	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	409a      	lsls	r2, r3
 800157a:	0013      	movs	r3, r2
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158e:	2201      	movs	r2, #1
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	43da      	mvns	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	2201      	movs	r2, #1
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2203      	movs	r2, #3
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d017      	beq.n	80015f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	409a      	lsls	r2, r3
 80015e8:	0013      	movs	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2203      	movs	r2, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d123      	bne.n	800164a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3208      	adds	r2, #8
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	58d3      	ldr	r3, [r2, r3]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2207      	movs	r2, #7
 8001614:	4013      	ands	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2107      	movs	r1, #7
 800162e:	400b      	ands	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	08da      	lsrs	r2, r3, #3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3208      	adds	r2, #8
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	6939      	ldr	r1, [r7, #16]
 8001648:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2203      	movs	r2, #3
 8001668:	401a      	ands	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	029b      	lsls	r3, r3, #10
 8001686:	4013      	ands	r3, r2
 8001688:	d100      	bne.n	800168c <HAL_GPIO_Init+0x174>
 800168a:	e0a0      	b.n	80017ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168c:	4b57      	ldr	r3, [pc, #348]	; (80017ec <HAL_GPIO_Init+0x2d4>)
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	4b56      	ldr	r3, [pc, #344]	; (80017ec <HAL_GPIO_Init+0x2d4>)
 8001692:	2101      	movs	r1, #1
 8001694:	430a      	orrs	r2, r1
 8001696:	619a      	str	r2, [r3, #24]
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <HAL_GPIO_Init+0x2d4>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a4:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_GPIO_Init+0x2d8>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	589b      	ldr	r3, [r3, r2]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2203      	movs	r2, #3
 80016b6:	4013      	ands	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	409a      	lsls	r2, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	43da      	mvns	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	2390      	movs	r3, #144	; 0x90
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x1ee>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a47      	ldr	r2, [pc, #284]	; (80017f4 <HAL_GPIO_Init+0x2dc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x1ea>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2e0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x1e6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x2e4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x1e2>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a44      	ldr	r2, [pc, #272]	; (8001800 <HAL_GPIO_Init+0x2e8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x1de>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x1f0>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x1f0>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x1f0>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x1f0>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x1f0>
 8001706:	2300      	movs	r3, #0
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	2103      	movs	r1, #3
 800170c:	400a      	ands	r2, r1
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4093      	lsls	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001718:	4935      	ldr	r1, [pc, #212]	; (80017f0 <HAL_GPIO_Init+0x2d8>)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	035b      	lsls	r3, r3, #13
 800173e:	4013      	ands	r3, r2
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43da      	mvns	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	039b      	lsls	r3, r3, #14
 8001768:	4013      	ands	r3, r2
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43da      	mvns	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	4013      	ands	r3, r2
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43da      	mvns	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	4013      	ands	r3, r2
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_GPIO_Init+0x2ec>)
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	40da      	lsrs	r2, r3
 80017dc:	1e13      	subs	r3, r2, #0
 80017de:	d000      	beq.n	80017e2 <HAL_GPIO_Init+0x2ca>
 80017e0:	e6a2      	b.n	8001528 <HAL_GPIO_Init+0x10>
  } 
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b006      	add	sp, #24
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000
 80017f4:	48000400 	.word	0x48000400
 80017f8:	48000800 	.word	0x48000800
 80017fc:	48000c00 	.word	0x48000c00
 8001800:	48001000 	.word	0x48001000
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	0008      	movs	r0, r1
 8001812:	0011      	movs	r1, r2
 8001814:	1cbb      	adds	r3, r7, #2
 8001816:	1c02      	adds	r2, r0, #0
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	1c7b      	adds	r3, r7, #1
 800181c:	1c0a      	adds	r2, r1, #0
 800181e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001820:	1c7b      	adds	r3, r7, #1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001828:	1cbb      	adds	r3, r7, #2
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	000a      	movs	r2, r1
 800184c:	1cbb      	adds	r3, r7, #2
 800184e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001856:	1cbb      	adds	r3, r7, #2
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	041a      	lsls	r2, r3, #16
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	1cb9      	adds	r1, r7, #2
 8001866:	8809      	ldrh	r1, [r1, #0]
 8001868:	400b      	ands	r3, r1
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b004      	add	sp, #16
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e082      	b.n	8001990 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2241      	movs	r2, #65	; 0x41
 800188e:	5c9b      	ldrb	r3, [r3, r2]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2240      	movs	r2, #64	; 0x40
 800189a:	2100      	movs	r1, #0
 800189c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff fa69 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2241      	movs	r2, #65	; 0x41
 80018aa:	2124      	movs	r1, #36	; 0x24
 80018ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	438a      	bics	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4934      	ldr	r1, [pc, #208]	; (8001998 <HAL_I2C_Init+0x120>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4931      	ldr	r1, [pc, #196]	; (800199c <HAL_I2C_Init+0x124>)
 80018d8:	400a      	ands	r2, r1
 80018da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d108      	bne.n	80018f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0209      	lsls	r1, r1, #8
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	e007      	b.n	8001906 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2184      	movs	r1, #132	; 0x84
 8001900:	0209      	lsls	r1, r1, #8
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d104      	bne.n	8001918 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2280      	movs	r2, #128	; 0x80
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	491f      	ldr	r1, [pc, #124]	; (80019a0 <HAL_I2C_Init+0x128>)
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	491a      	ldr	r1, [pc, #104]	; (800199c <HAL_I2C_Init+0x124>)
 8001934:	400a      	ands	r2, r1
 8001936:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	431a      	orrs	r2, r3
 8001942:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69d9      	ldr	r1, [r3, #28]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2241      	movs	r2, #65	; 0x41
 800197c:	2120      	movs	r1, #32
 800197e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2242      	movs	r2, #66	; 0x42
 800198a:	2100      	movs	r1, #0
 800198c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}
 8001998:	f0ffffff 	.word	0xf0ffffff
 800199c:	ffff7fff 	.word	0xffff7fff
 80019a0:	02008000 	.word	0x02008000

080019a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	000c      	movs	r4, r1
 80019ae:	0010      	movs	r0, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	230a      	movs	r3, #10
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	1c22      	adds	r2, r4, #0
 80019b8:	801a      	strh	r2, [r3, #0]
 80019ba:	2308      	movs	r3, #8
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	1c02      	adds	r2, r0, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	1dbb      	adds	r3, r7, #6
 80019c4:	1c0a      	adds	r2, r1, #0
 80019c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2241      	movs	r2, #65	; 0x41
 80019cc:	5c9b      	ldrb	r3, [r3, r2]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d000      	beq.n	80019d6 <HAL_I2C_Mem_Read+0x32>
 80019d4:	e110      	b.n	8001bf8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_I2C_Mem_Read+0x42>
 80019dc:	232c      	movs	r3, #44	; 0x2c
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e103      	b.n	8001bfa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2240      	movs	r2, #64	; 0x40
 80019f6:	5c9b      	ldrb	r3, [r3, r2]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_I2C_Mem_Read+0x5c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0fc      	b.n	8001bfa <HAL_I2C_Mem_Read+0x256>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	2101      	movs	r1, #1
 8001a06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a08:	f7ff fb74 	bl	80010f4 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	0219      	lsls	r1, r3, #8
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2319      	movs	r3, #25
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f000 f979 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0e7      	b.n	8001bfa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2241      	movs	r2, #65	; 0x41
 8001a2e:	2122      	movs	r1, #34	; 0x22
 8001a30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2242      	movs	r2, #66	; 0x42
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	222c      	movs	r2, #44	; 0x2c
 8001a4a:	18ba      	adds	r2, r7, r2
 8001a4c:	8812      	ldrh	r2, [r2, #0]
 8001a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a56:	1dbb      	adds	r3, r7, #6
 8001a58:	881c      	ldrh	r4, [r3, #0]
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	230a      	movs	r3, #10
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	8819      	ldrh	r1, [r3, #0]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	0023      	movs	r3, r4
 8001a72:	f000 f8cb 	bl	8001c0c <I2C_RequestMemoryRead>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2240      	movs	r2, #64	; 0x40
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0b9      	b.n	8001bfa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2bff      	cmp	r3, #255	; 0xff
 8001a8e:	d911      	bls.n	8001ab4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	22ff      	movs	r2, #255	; 0xff
 8001a94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	045c      	lsls	r4, r3, #17
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	8819      	ldrh	r1, [r3, #0]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <HAL_I2C_Mem_Read+0x260>)
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	0023      	movs	r3, r4
 8001aae:	f000 fb09 	bl	80020c4 <I2C_TransferConfig>
 8001ab2:	e012      	b.n	8001ada <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	049c      	lsls	r4, r3, #18
 8001ac8:	230a      	movs	r3, #10
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	8819      	ldrh	r1, [r3, #0]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_I2C_Mem_Read+0x260>)
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	0023      	movs	r3, r4
 8001ad6:	f000 faf5 	bl	80020c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	f000 f914 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e082      	b.n	8001bfa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d03a      	beq.n	8001ba6 <HAL_I2C_Mem_Read+0x202>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d136      	bne.n	8001ba6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	0013      	movs	r3, r2
 8001b42:	2200      	movs	r2, #0
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	f000 f8e5 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	1e03      	subs	r3, r0, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e053      	b.n	8001bfa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2bff      	cmp	r3, #255	; 0xff
 8001b5a:	d911      	bls.n	8001b80 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	22ff      	movs	r2, #255	; 0xff
 8001b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	045c      	lsls	r4, r3, #17
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	8819      	ldrh	r1, [r3, #0]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	2300      	movs	r3, #0
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	0023      	movs	r3, r4
 8001b7a:	f000 faa3 	bl	80020c4 <I2C_TransferConfig>
 8001b7e:	e012      	b.n	8001ba6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	049c      	lsls	r4, r3, #18
 8001b94:	230a      	movs	r3, #10
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	f000 fa8f 	bl	80020c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d194      	bne.n	8001ada <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f940 	bl	8001e3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e01a      	b.n	8001bfa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	490c      	ldr	r1, [pc, #48]	; (8001c08 <HAL_I2C_Mem_Read+0x264>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2241      	movs	r2, #65	; 0x41
 8001be0:	2120      	movs	r1, #32
 8001be2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2242      	movs	r2, #66	; 0x42
 8001be8:	2100      	movs	r1, #0
 8001bea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2240      	movs	r2, #64	; 0x40
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001bf8:	2302      	movs	r3, #2
  }
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b007      	add	sp, #28
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	80002400 	.word	0x80002400
 8001c08:	fe00e800 	.word	0xfe00e800

08001c0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	000c      	movs	r4, r1
 8001c16:	0010      	movs	r0, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	250a      	movs	r5, #10
 8001c1c:	197b      	adds	r3, r7, r5
 8001c1e:	1c22      	adds	r2, r4, #0
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	2308      	movs	r3, #8
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	1c02      	adds	r2, r0, #0
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	1dbb      	adds	r3, r7, #6
 8001c2c:	1c0a      	adds	r2, r1, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c30:	1dbb      	adds	r3, r7, #6
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	197b      	adds	r3, r7, r5
 8001c38:	8819      	ldrh	r1, [r3, #0]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <I2C_RequestMemoryRead+0xc0>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2300      	movs	r3, #0
 8001c42:	f000 fa3f 	bl	80020c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	6a39      	ldr	r1, [r7, #32]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 f8af 	bl	8001db0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d001      	beq.n	8001c5a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e033      	b.n	8001cc2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c5a:	1dbb      	adds	r3, r7, #6
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c62:	2308      	movs	r3, #8
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c70:	e019      	b.n	8001ca6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c72:	2308      	movs	r3, #8
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	6a39      	ldr	r1, [r7, #32]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f890 	bl	8001db0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d001      	beq.n	8001c98 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e014      	b.n	8001cc2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c98:	2308      	movs	r3, #8
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca6:	6a3a      	ldr	r2, [r7, #32]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	0013      	movs	r3, r2
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2140      	movs	r1, #64	; 0x40
 8001cb4:	f000 f82e 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d001      	beq.n	8001cc0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	80002000 	.word	0x80002000

08001cd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d103      	bne.n	8001cee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d007      	beq.n	8001d0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	619a      	str	r2, [r3, #24]
  }
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d24:	e030      	b.n	8001d88 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	d02d      	beq.n	8001d88 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2c:	f7ff f9e2 	bl	80010f4 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d302      	bcc.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d122      	bne.n	8001d88 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	425a      	negs	r2, r3
 8001d52:	4153      	adcs	r3, r2
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	001a      	movs	r2, r3
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d113      	bne.n	8001d88 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	2220      	movs	r2, #32
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2241      	movs	r2, #65	; 0x41
 8001d70:	2120      	movs	r1, #32
 8001d72:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2242      	movs	r2, #66	; 0x42
 8001d78:	2100      	movs	r1, #0
 8001d7a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2240      	movs	r2, #64	; 0x40
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e00f      	b.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	4013      	ands	r3, r2
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	425a      	negs	r2, r3
 8001d98:	4153      	adcs	r3, r2
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d0bf      	beq.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b004      	add	sp, #16
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dbc:	e032      	b.n	8001e24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f000 f87d 	bl	8001ec4 <I2C_IsErrorOccurred>
 8001dca:	1e03      	subs	r3, r0, #0
 8001dcc:	d001      	beq.n	8001dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e030      	b.n	8001e34 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	d025      	beq.n	8001e24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd8:	f7ff f98c 	bl	80010f4 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d302      	bcc.n	8001dee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11a      	bne.n	8001e24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d013      	beq.n	8001e24 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	2220      	movs	r2, #32
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2241      	movs	r2, #65	; 0x41
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2242      	movs	r2, #66	; 0x42
 8001e14:	2100      	movs	r1, #0
 8001e16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e007      	b.n	8001e34 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d1c5      	bne.n	8001dbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b004      	add	sp, #16
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e48:	e02f      	b.n	8001eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f837 	bl	8001ec4 <I2C_IsErrorOccurred>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d001      	beq.n	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e02d      	b.n	8001eba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5e:	f7ff f949 	bl	80010f4 <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d302      	bcc.n	8001e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d11a      	bne.n	8001eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d013      	beq.n	8001eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	2220      	movs	r2, #32
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2241      	movs	r2, #65	; 0x41
 8001e92:	2120      	movs	r1, #32
 8001e94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2242      	movs	r2, #66	; 0x42
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e007      	b.n	8001eba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d1c8      	bne.n	8001e4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed0:	2327      	movs	r3, #39	; 0x27
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2210      	movs	r2, #16
 8001eec:	4013      	ands	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <I2C_IsErrorOccurred+0x2e>
 8001ef0:	e082      	b.n	8001ff8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001efa:	e060      	b.n	8001fbe <I2C_IsErrorOccurred+0xfa>
 8001efc:	2427      	movs	r4, #39	; 0x27
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	193a      	adds	r2, r7, r4
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	d058      	beq.n	8001fbe <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f0c:	f7ff f8f2 	bl	80010f4 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d306      	bcc.n	8001f2a <I2C_IsErrorOccurred+0x66>
 8001f1c:	193b      	adds	r3, r7, r4
 8001f1e:	193a      	adds	r2, r7, r4
 8001f20:	7812      	ldrb	r2, [r2, #0]
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d149      	bne.n	8001fbe <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f38:	2013      	movs	r0, #19
 8001f3a:	183b      	adds	r3, r7, r0
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	2142      	movs	r1, #66	; 0x42
 8001f40:	5c52      	ldrb	r2, [r2, r1]
 8001f42:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	401a      	ands	r2, r3
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d126      	bne.n	8001fa6 <I2C_IsErrorOccurred+0xe2>
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	01db      	lsls	r3, r3, #7
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d021      	beq.n	8001fa6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001f62:	183b      	adds	r3, r7, r0
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d01d      	beq.n	8001fa6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	01c9      	lsls	r1, r1, #7
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f7c:	f7ff f8ba 	bl	80010f4 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f84:	e00f      	b.n	8001fa6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f86:	f7ff f8b5 	bl	80010f4 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b19      	cmp	r3, #25
 8001f92:	d908      	bls.n	8001fa6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2220      	movs	r2, #32
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f9c:	2327      	movs	r3, #39	; 0x27
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]

              break;
 8001fa4:	e00b      	b.n	8001fbe <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2220      	movs	r2, #32
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2127      	movs	r1, #39	; 0x27
 8001fb2:	187a      	adds	r2, r7, r1
 8001fb4:	1879      	adds	r1, r7, r1
 8001fb6:	7809      	ldrb	r1, [r1, #0]
 8001fb8:	7011      	strb	r1, [r2, #0]
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d1e3      	bne.n	8001f86 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d004      	beq.n	8001fd6 <I2C_IsErrorOccurred+0x112>
 8001fcc:	2327      	movs	r3, #39	; 0x27
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d092      	beq.n	8001efc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fd6:	2327      	movs	r3, #39	; 0x27
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	2204      	movs	r2, #4
 8001fec:	4313      	orrs	r3, r2
 8001fee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ff0:	2327      	movs	r3, #39	; 0x27
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4013      	ands	r3, r2
 8002008:	d00c      	beq.n	8002024 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	2201      	movs	r2, #1
 800200e:	4313      	orrs	r3, r2
 8002010:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0052      	lsls	r2, r2, #1
 800201a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800201c:	2327      	movs	r3, #39	; 0x27
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4013      	ands	r3, r2
 800202c:	d00c      	beq.n	8002048 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	2208      	movs	r2, #8
 8002032:	4313      	orrs	r3, r2
 8002034:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	00d2      	lsls	r2, r2, #3
 800203e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002040:	2327      	movs	r3, #39	; 0x27
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d00c      	beq.n	800206c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	2202      	movs	r2, #2
 8002056:	4313      	orrs	r3, r2
 8002058:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002064:	2327      	movs	r3, #39	; 0x27
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800206c:	2327      	movs	r3, #39	; 0x27
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01d      	beq.n	80020b2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff fe29 	bl	8001cd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	490d      	ldr	r1, [pc, #52]	; (80020c0 <I2C_IsErrorOccurred+0x1fc>)
 800208a:	400a      	ands	r2, r1
 800208c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2241      	movs	r2, #65	; 0x41
 800209e:	2120      	movs	r1, #32
 80020a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2242      	movs	r2, #66	; 0x42
 80020a6:	2100      	movs	r1, #0
 80020a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	2100      	movs	r1, #0
 80020b0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80020b2:	2327      	movs	r3, #39	; 0x27
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	781b      	ldrb	r3, [r3, #0]
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b00b      	add	sp, #44	; 0x2c
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	fe00e800 	.word	0xfe00e800

080020c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	0008      	movs	r0, r1
 80020ce:	0011      	movs	r1, r2
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	240a      	movs	r4, #10
 80020d4:	193b      	adds	r3, r7, r4
 80020d6:	1c02      	adds	r2, r0, #0
 80020d8:	801a      	strh	r2, [r3, #0]
 80020da:	2009      	movs	r0, #9
 80020dc:	183b      	adds	r3, r7, r0
 80020de:	1c0a      	adds	r2, r1, #0
 80020e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	059b      	lsls	r3, r3, #22
 80020e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ea:	183b      	adds	r3, r7, r0
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	0419      	lsls	r1, r3, #16
 80020f0:	23ff      	movs	r3, #255	; 0xff
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	4313      	orrs	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800210e:	0d51      	lsrs	r1, r2, #21
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	00d2      	lsls	r2, r2, #3
 8002114:	400a      	ands	r2, r1
 8002116:	4907      	ldr	r1, [pc, #28]	; (8002134 <I2C_TransferConfig+0x70>)
 8002118:	430a      	orrs	r2, r1
 800211a:	43d2      	mvns	r2, r2
 800211c:	401a      	ands	r2, r3
 800211e:	0011      	movs	r1, r2
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b007      	add	sp, #28
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	03ff63ff 	.word	0x03ff63ff

08002138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2241      	movs	r2, #65	; 0x41
 8002146:	5c9b      	ldrb	r3, [r3, r2]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	d138      	bne.n	80021c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002158:	2302      	movs	r3, #2
 800215a:	e032      	b.n	80021c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2240      	movs	r2, #64	; 0x40
 8002160:	2101      	movs	r1, #1
 8002162:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2241      	movs	r2, #65	; 0x41
 8002168:	2124      	movs	r1, #36	; 0x24
 800216a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	438a      	bics	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4911      	ldr	r1, [pc, #68]	; (80021cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2101      	movs	r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2241      	movs	r2, #65	; 0x41
 80021b0:	2120      	movs	r1, #32
 80021b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
  }
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b002      	add	sp, #8
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	ffffefff 	.word	0xffffefff

080021d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2241      	movs	r2, #65	; 0x41
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d139      	bne.n	800225a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e033      	b.n	800225c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	2101      	movs	r1, #1
 80021fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2241      	movs	r2, #65	; 0x41
 8002200:	2124      	movs	r1, #36	; 0x24
 8002202:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	438a      	bics	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2241      	movs	r2, #65	; 0x41
 800224a:	2120      	movs	r1, #32
 800224c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2240      	movs	r2, #64	; 0x40
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800225a:	2302      	movs	r3, #2
  }
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b004      	add	sp, #16
 8002262:	bd80      	pop	{r7, pc}
 8002264:	fffff0ff 	.word	0xfffff0ff

08002268 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b08b      	sub	sp, #44	; 0x2c
 800226c:	af06      	add	r7, sp, #24
 800226e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0f0      	b.n	800245c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a79      	ldr	r2, [pc, #484]	; (8002464 <HAL_PCD_Init+0x1fc>)
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	23aa      	movs	r3, #170	; 0xaa
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	2100      	movs	r1, #0
 800228e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f7fe fe60 	bl	8000f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a72      	ldr	r2, [pc, #456]	; (8002464 <HAL_PCD_Init+0x1fc>)
 800229c:	2103      	movs	r1, #3
 800229e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f001 fcef 	bl	8003c88 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022aa:	230f      	movs	r3, #15
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e049      	b.n	8002348 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b4:	200f      	movs	r0, #15
 80022b6:	183b      	adds	r3, r7, r0
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	0013      	movs	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	189b      	adds	r3, r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	18cb      	adds	r3, r1, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	0013      	movs	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	189b      	adds	r3, r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	183a      	adds	r2, r7, r0
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e4:	183b      	adds	r3, r7, r0
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	0013      	movs	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	189b      	adds	r3, r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	18cb      	adds	r3, r1, r3
 80022f6:	3303      	adds	r3, #3
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022fc:	183b      	adds	r3, r7, r0
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	0013      	movs	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	189b      	adds	r3, r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	18cb      	adds	r3, r1, r3
 800230c:	3338      	adds	r3, #56	; 0x38
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002312:	183b      	adds	r3, r7, r0
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	0013      	movs	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	189b      	adds	r3, r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	18cb      	adds	r3, r1, r3
 8002322:	333c      	adds	r3, #60	; 0x3c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002328:	183b      	adds	r3, r7, r0
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	0013      	movs	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	189b      	adds	r3, r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	18cb      	adds	r3, r1, r3
 8002338:	3340      	adds	r3, #64	; 0x40
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233e:	183b      	adds	r3, r7, r0
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	183b      	adds	r3, r7, r0
 8002344:	3201      	adds	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	210f      	movs	r1, #15
 800234a:	187b      	adds	r3, r7, r1
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3ae      	bcc.n	80022b4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	187b      	adds	r3, r7, r1
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	e056      	b.n	800240c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235e:	240f      	movs	r4, #15
 8002360:	193b      	adds	r3, r7, r4
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	236a      	movs	r3, #106	; 0x6a
 8002368:	33ff      	adds	r3, #255	; 0xff
 800236a:	0019      	movs	r1, r3
 800236c:	0013      	movs	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	189b      	adds	r3, r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	18c3      	adds	r3, r0, r3
 8002376:	185b      	adds	r3, r3, r1
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800237c:	193b      	adds	r3, r7, r4
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	23b4      	movs	r3, #180	; 0xb4
 8002384:	0059      	lsls	r1, r3, #1
 8002386:	0013      	movs	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	189b      	adds	r3, r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	18c3      	adds	r3, r0, r3
 8002390:	185b      	adds	r3, r3, r1
 8002392:	193a      	adds	r2, r7, r4
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002398:	193b      	adds	r3, r7, r4
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	236c      	movs	r3, #108	; 0x6c
 80023a0:	33ff      	adds	r3, #255	; 0xff
 80023a2:	0019      	movs	r1, r3
 80023a4:	0013      	movs	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	189b      	adds	r3, r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	18c3      	adds	r3, r0, r3
 80023ae:	185b      	adds	r3, r3, r1
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	23bc      	movs	r3, #188	; 0xbc
 80023bc:	0059      	lsls	r1, r3, #1
 80023be:	0013      	movs	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	189b      	adds	r3, r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	18c3      	adds	r3, r0, r3
 80023c8:	185b      	adds	r3, r3, r1
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	23be      	movs	r3, #190	; 0xbe
 80023d6:	0059      	lsls	r1, r3, #1
 80023d8:	0013      	movs	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	18c3      	adds	r3, r0, r3
 80023e2:	185b      	adds	r3, r3, r1
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	23c0      	movs	r3, #192	; 0xc0
 80023f0:	0059      	lsls	r1, r3, #1
 80023f2:	0013      	movs	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	18c3      	adds	r3, r0, r3
 80023fc:	185b      	adds	r3, r3, r1
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002402:	193b      	adds	r3, r7, r4
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	193b      	adds	r3, r7, r4
 8002408:	3201      	adds	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	230f      	movs	r3, #15
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d3a1      	bcc.n	800235e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	466a      	mov	r2, sp
 8002422:	0011      	movs	r1, r2
 8002424:	001a      	movs	r2, r3
 8002426:	3210      	adds	r2, #16
 8002428:	ca70      	ldmia	r2!, {r4, r5, r6}
 800242a:	c170      	stmia	r1!, {r4, r5, r6}
 800242c:	ca30      	ldmia	r2!, {r4, r5}
 800242e:	c130      	stmia	r1!, {r4, r5}
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f001 fc41 	bl	8003cbc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2224      	movs	r2, #36	; 0x24
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_PCD_Init+0x1fc>)
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d103      	bne.n	800245a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 f807 	bl	8002468 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b005      	add	sp, #20
 8002462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002464:	000002a9 	.word	0x000002a9

08002468 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	23ba      	movs	r3, #186	; 0xba
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	2101      	movs	r1, #1
 800247e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	23b8      	movs	r3, #184	; 0xb8
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	2100      	movs	r1, #0
 8002488:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2254      	movs	r2, #84	; 0x54
 800248e:	5a9b      	ldrh	r3, [r3, r2]
 8002490:	b29b      	uxth	r3, r3
 8002492:	2201      	movs	r2, #1
 8002494:	4313      	orrs	r3, r2
 8002496:	b299      	uxth	r1, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2254      	movs	r2, #84	; 0x54
 800249c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2254      	movs	r2, #84	; 0x54
 80024a2:	5a9b      	ldrh	r3, [r3, r2]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2202      	movs	r2, #2
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b299      	uxth	r1, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2254      	movs	r2, #84	; 0x54
 80024b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b004      	add	sp, #16
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f000 fb76 	bl	8002bbc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	d100      	bne.n	80024dc <HAL_RCC_OscConfig+0x20>
 80024da:	e08e      	b.n	80025fa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024dc:	4bc5      	ldr	r3, [pc, #788]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	220c      	movs	r2, #12
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00e      	beq.n	8002506 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024e8:	4bc2      	ldr	r3, [pc, #776]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	220c      	movs	r2, #12
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d117      	bne.n	8002524 <HAL_RCC_OscConfig+0x68>
 80024f4:	4bbf      	ldr	r3, [pc, #764]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	23c0      	movs	r3, #192	; 0xc0
 80024fa:	025b      	lsls	r3, r3, #9
 80024fc:	401a      	ands	r2, r3
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	429a      	cmp	r2, r3
 8002504:	d10e      	bne.n	8002524 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002506:	4bbb      	ldr	r3, [pc, #748]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	029b      	lsls	r3, r3, #10
 800250e:	4013      	ands	r3, r2
 8002510:	d100      	bne.n	8002514 <HAL_RCC_OscConfig+0x58>
 8002512:	e071      	b.n	80025f8 <HAL_RCC_OscConfig+0x13c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d000      	beq.n	800251e <HAL_RCC_OscConfig+0x62>
 800251c:	e06c      	b.n	80025f8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f000 fb4c 	bl	8002bbc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_RCC_OscConfig+0x80>
 800252c:	4bb1      	ldr	r3, [pc, #708]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4bb0      	ldr	r3, [pc, #704]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	0249      	lsls	r1, r1, #9
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e02f      	b.n	800259c <HAL_RCC_OscConfig+0xe0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0xa2>
 8002544:	4bab      	ldr	r3, [pc, #684]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4baa      	ldr	r3, [pc, #680]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800254a:	49ab      	ldr	r1, [pc, #684]	; (80027f8 <HAL_RCC_OscConfig+0x33c>)
 800254c:	400a      	ands	r2, r1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	4ba8      	ldr	r3, [pc, #672]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4ba7      	ldr	r3, [pc, #668]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002556:	49a9      	ldr	r1, [pc, #676]	; (80027fc <HAL_RCC_OscConfig+0x340>)
 8002558:	400a      	ands	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e01e      	b.n	800259c <HAL_RCC_OscConfig+0xe0>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d10e      	bne.n	8002584 <HAL_RCC_OscConfig+0xc8>
 8002566:	4ba3      	ldr	r3, [pc, #652]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4ba2      	ldr	r3, [pc, #648]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	02c9      	lsls	r1, r1, #11
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	4b9f      	ldr	r3, [pc, #636]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	0249      	lsls	r1, r1, #9
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xe0>
 8002584:	4b9b      	ldr	r3, [pc, #620]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b9a      	ldr	r3, [pc, #616]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800258a:	499b      	ldr	r1, [pc, #620]	; (80027f8 <HAL_RCC_OscConfig+0x33c>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b98      	ldr	r3, [pc, #608]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002596:	4999      	ldr	r1, [pc, #612]	; (80027fc <HAL_RCC_OscConfig+0x340>)
 8002598:	400a      	ands	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d014      	beq.n	80025ce <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe fda6 	bl	80010f4 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ae:	f7fe fda1 	bl	80010f4 <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	; 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e2fd      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c0:	4b8c      	ldr	r3, [pc, #560]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4013      	ands	r3, r2
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0xf2>
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fd91 	bl	80010f4 <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe fd8c 	bl	80010f4 <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e2e8      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	4b82      	ldr	r3, [pc, #520]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	029b      	lsls	r3, r3, #10
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x11c>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2202      	movs	r2, #2
 8002600:	4013      	ands	r3, r2
 8002602:	d100      	bne.n	8002606 <HAL_RCC_OscConfig+0x14a>
 8002604:	e06c      	b.n	80026e0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002606:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	220c      	movs	r2, #12
 800260c:	4013      	ands	r3, r2
 800260e:	d00e      	beq.n	800262e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002610:	4b78      	ldr	r3, [pc, #480]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	220c      	movs	r2, #12
 8002616:	4013      	ands	r3, r2
 8002618:	2b08      	cmp	r3, #8
 800261a:	d11f      	bne.n	800265c <HAL_RCC_OscConfig+0x1a0>
 800261c:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	23c0      	movs	r3, #192	; 0xc0
 8002622:	025b      	lsls	r3, r3, #9
 8002624:	401a      	ands	r2, r3
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	429a      	cmp	r2, r3
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b71      	ldr	r3, [pc, #452]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2202      	movs	r2, #2
 8002634:	4013      	ands	r3, r2
 8002636:	d005      	beq.n	8002644 <HAL_RCC_OscConfig+0x188>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e2bb      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b6b      	ldr	r3, [pc, #428]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	22f8      	movs	r2, #248	; 0xf8
 800264a:	4393      	bics	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00da      	lsls	r2, r3, #3
 8002654:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e041      	b.n	80026e0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d024      	beq.n	80026ae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b62      	ldr	r3, [pc, #392]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800266a:	2101      	movs	r1, #1
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fd40 	bl	80010f4 <HAL_GetTick>
 8002674:	0003      	movs	r3, r0
 8002676:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe fd3b 	bl	80010f4 <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e297      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2202      	movs	r2, #2
 8002692:	4013      	ands	r3, r2
 8002694:	d0f1      	beq.n	800267a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	22f8      	movs	r2, #248	; 0xf8
 800269c:	4393      	bics	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	00da      	lsls	r2, r3, #3
 80026a6:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e018      	b.n	80026e0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	438a      	bics	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fe fd1b 	bl	80010f4 <HAL_GetTick>
 80026be:	0003      	movs	r3, r0
 80026c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe fd16 	bl	80010f4 <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e272      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2202      	movs	r2, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	d1f1      	bne.n	80026c4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2208      	movs	r2, #8
 80026e6:	4013      	ands	r3, r2
 80026e8:	d036      	beq.n	8002758 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80026f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fcf9 	bl	80010f4 <HAL_GetTick>
 8002702:	0003      	movs	r3, r0
 8002704:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe fcf4 	bl	80010f4 <HAL_GetTick>
 800270c:	0002      	movs	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e250      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2202      	movs	r2, #2
 8002720:	4013      	ands	r3, r2
 8002722:	d0f1      	beq.n	8002708 <HAL_RCC_OscConfig+0x24c>
 8002724:	e018      	b.n	8002758 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272a:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800272c:	2101      	movs	r1, #1
 800272e:	438a      	bics	r2, r1
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fcdf 	bl	80010f4 <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe fcda 	bl	80010f4 <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e236      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	d1f1      	bne.n	800273c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2204      	movs	r2, #4
 800275e:	4013      	ands	r3, r2
 8002760:	d100      	bne.n	8002764 <HAL_RCC_OscConfig+0x2a8>
 8002762:	e0b5      	b.n	80028d0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002764:	201f      	movs	r0, #31
 8002766:	183b      	adds	r3, r7, r0
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	055b      	lsls	r3, r3, #21
 8002774:	4013      	ands	r3, r2
 8002776:	d110      	bne.n	800279a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	0549      	lsls	r1, r1, #21
 8002782:	430a      	orrs	r2, r1
 8002784:	61da      	str	r2, [r3, #28]
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002794:	183b      	adds	r3, r7, r0
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_OscConfig+0x344>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	d11a      	bne.n	80027dc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_RCC_OscConfig+0x344>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_RCC_OscConfig+0x344>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0049      	lsls	r1, r1, #1
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b4:	f7fe fc9e 	bl	80010f4 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe fc99 	bl	80010f4 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e1f5      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_OscConfig+0x344>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4013      	ands	r3, r2
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10f      	bne.n	8002804 <HAL_RCC_OscConfig+0x348>
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80027e6:	6a1a      	ldr	r2, [r3, #32]
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <HAL_RCC_OscConfig+0x338>)
 80027ea:	2101      	movs	r1, #1
 80027ec:	430a      	orrs	r2, r1
 80027ee:	621a      	str	r2, [r3, #32]
 80027f0:	e036      	b.n	8002860 <HAL_RCC_OscConfig+0x3a4>
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	40021000 	.word	0x40021000
 80027f8:	fffeffff 	.word	0xfffeffff
 80027fc:	fffbffff 	.word	0xfffbffff
 8002800:	40007000 	.word	0x40007000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x36a>
 800280c:	4bca      	ldr	r3, [pc, #808]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	4bc9      	ldr	r3, [pc, #804]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002812:	2101      	movs	r1, #1
 8002814:	438a      	bics	r2, r1
 8002816:	621a      	str	r2, [r3, #32]
 8002818:	4bc7      	ldr	r3, [pc, #796]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800281a:	6a1a      	ldr	r2, [r3, #32]
 800281c:	4bc6      	ldr	r3, [pc, #792]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800281e:	2104      	movs	r1, #4
 8002820:	438a      	bics	r2, r1
 8002822:	621a      	str	r2, [r3, #32]
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x3a4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x38c>
 800282e:	4bc2      	ldr	r3, [pc, #776]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002830:	6a1a      	ldr	r2, [r3, #32]
 8002832:	4bc1      	ldr	r3, [pc, #772]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002834:	2104      	movs	r1, #4
 8002836:	430a      	orrs	r2, r1
 8002838:	621a      	str	r2, [r3, #32]
 800283a:	4bbf      	ldr	r3, [pc, #764]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	4bbe      	ldr	r3, [pc, #760]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002840:	2101      	movs	r1, #1
 8002842:	430a      	orrs	r2, r1
 8002844:	621a      	str	r2, [r3, #32]
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x3a4>
 8002848:	4bbb      	ldr	r3, [pc, #748]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	4bba      	ldr	r3, [pc, #744]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800284e:	2101      	movs	r1, #1
 8002850:	438a      	bics	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	4bb8      	ldr	r3, [pc, #736]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002856:	6a1a      	ldr	r2, [r3, #32]
 8002858:	4bb7      	ldr	r3, [pc, #732]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800285a:	2104      	movs	r1, #4
 800285c:	438a      	bics	r2, r1
 800285e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d014      	beq.n	8002892 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe fc44 	bl	80010f4 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	e009      	b.n	8002886 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fc3f 	bl	80010f4 <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	4aaf      	ldr	r2, [pc, #700]	; (8002b3c <HAL_RCC_OscConfig+0x680>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e19a      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	4bac      	ldr	r3, [pc, #688]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	2202      	movs	r2, #2
 800288c:	4013      	ands	r3, r2
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x3b6>
 8002890:	e013      	b.n	80028ba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fc2f 	bl	80010f4 <HAL_GetTick>
 8002896:	0003      	movs	r3, r0
 8002898:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	e009      	b.n	80028b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe fc2a 	bl	80010f4 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	4aa5      	ldr	r2, [pc, #660]	; (8002b3c <HAL_RCC_OscConfig+0x680>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e185      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	4ba1      	ldr	r3, [pc, #644]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	2202      	movs	r2, #2
 80028b6:	4013      	ands	r3, r2
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ba:	231f      	movs	r3, #31
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b9c      	ldr	r3, [pc, #624]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	4b9b      	ldr	r3, [pc, #620]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80028ca:	499d      	ldr	r1, [pc, #628]	; (8002b40 <HAL_RCC_OscConfig+0x684>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	4013      	ands	r3, r2
 80028d8:	d063      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d12a      	bne.n	8002938 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028e2:	4b95      	ldr	r3, [pc, #596]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80028e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e6:	4b94      	ldr	r3, [pc, #592]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80028e8:	2104      	movs	r1, #4
 80028ea:	430a      	orrs	r2, r1
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028ee:	4b92      	ldr	r3, [pc, #584]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80028f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f2:	4b91      	ldr	r3, [pc, #580]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80028f4:	2101      	movs	r1, #1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fbfb 	bl	80010f4 <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002904:	f7fe fbf6 	bl	80010f4 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e152      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002916:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	2202      	movs	r2, #2
 800291c:	4013      	ands	r3, r2
 800291e:	d0f1      	beq.n	8002904 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002920:	4b85      	ldr	r3, [pc, #532]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	22f8      	movs	r2, #248	; 0xf8
 8002926:	4393      	bics	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	00da      	lsls	r2, r3, #3
 8002930:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002932:	430a      	orrs	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
 8002936:	e034      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	3305      	adds	r3, #5
 800293e:	d111      	bne.n	8002964 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002940:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002944:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002946:	2104      	movs	r1, #4
 8002948:	438a      	bics	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800294c:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	22f8      	movs	r2, #248	; 0xf8
 8002952:	4393      	bics	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	00da      	lsls	r2, r3, #3
 800295c:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800295e:	430a      	orrs	r2, r1
 8002960:	635a      	str	r2, [r3, #52]	; 0x34
 8002962:	e01e      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002964:	4b74      	ldr	r3, [pc, #464]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002968:	4b73      	ldr	r3, [pc, #460]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800296a:	2104      	movs	r1, #4
 800296c:	430a      	orrs	r2, r1
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002970:	4b71      	ldr	r3, [pc, #452]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002974:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002976:	2101      	movs	r1, #1
 8002978:	438a      	bics	r2, r1
 800297a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297c:	f7fe fbba 	bl	80010f4 <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002986:	f7fe fbb5 	bl	80010f4 <HAL_GetTick>
 800298a:	0002      	movs	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e111      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002998:	4b67      	ldr	r3, [pc, #412]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2202      	movs	r2, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	d1f1      	bne.n	8002986 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2220      	movs	r2, #32
 80029a8:	4013      	ands	r3, r2
 80029aa:	d05c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029ac:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	220c      	movs	r2, #12
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d00e      	beq.n	80029d6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029b8:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	220c      	movs	r2, #12
 80029be:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d114      	bne.n	80029ee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029c4:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	23c0      	movs	r3, #192	; 0xc0
 80029ca:	025b      	lsls	r3, r3, #9
 80029cc:	401a      	ands	r2, r3
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	025b      	lsls	r3, r3, #9
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d10b      	bne.n	80029ee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029d6:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	4013      	ands	r3, r2
 80029e0:	d040      	beq.n	8002a64 <HAL_RCC_OscConfig+0x5a8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d03c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0e6      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01b      	beq.n	8002a2e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029f6:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80029f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fa:	4b4f      	ldr	r3, [pc, #316]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	0249      	lsls	r1, r1, #9
 8002a00:	430a      	orrs	r2, r1
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fb76 	bl	80010f4 <HAL_GetTick>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a0e:	f7fe fb71 	bl	80010f4 <HAL_GetTick>
 8002a12:	0002      	movs	r2, r0
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0cd      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a20:	4b45      	ldr	r3, [pc, #276]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x552>
 8002a2c:	e01b      	b.n	8002a66 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a2e:	4b42      	ldr	r3, [pc, #264]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002a34:	4943      	ldr	r1, [pc, #268]	; (8002b44 <HAL_RCC_OscConfig+0x688>)
 8002a36:	400a      	ands	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fb5b 	bl	80010f4 <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a44:	f7fe fb56 	bl	80010f4 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0b2      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a56:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	029b      	lsls	r3, r3, #10
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x588>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a64:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d100      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5b4>
 8002a6e:	e0a4      	b.n	8002bba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a70:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	220c      	movs	r2, #12
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d100      	bne.n	8002a7e <HAL_RCC_OscConfig+0x5c2>
 8002a7c:	e078      	b.n	8002b70 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d14c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002a8c:	492e      	ldr	r1, [pc, #184]	; (8002b48 <HAL_RCC_OscConfig+0x68c>)
 8002a8e:	400a      	ands	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fb2f 	bl	80010f4 <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fb2a 	bl	80010f4 <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e086      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	049b      	lsls	r3, r3, #18
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	220f      	movs	r2, #15
 8002ac0:	4393      	bics	r3, r2
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002aca:	430a      	orrs	r2, r1
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <HAL_RCC_OscConfig+0x690>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	0449      	lsls	r1, r1, #17
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe fafd 	bl	80010f4 <HAL_GetTick>
 8002afa:	0003      	movs	r3, r0
 8002afc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7fe faf8 	bl	80010f4 <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e054      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	049b      	lsls	r3, r3, #18
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x644>
 8002b1e:	e04c      	b.n	8002bba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_RCC_OscConfig+0x67c>)
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <HAL_RCC_OscConfig+0x68c>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fae2 	bl	80010f4 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x6a6>
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	00001388 	.word	0x00001388
 8002b40:	efffffff 	.word	0xefffffff
 8002b44:	fffeffff 	.word	0xfffeffff
 8002b48:	feffffff 	.word	0xfeffffff
 8002b4c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe fad0 	bl	80010f4 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e02c      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b62:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_RCC_OscConfig+0x708>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	049b      	lsls	r3, r3, #18
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x694>
 8002b6e:	e024      	b.n	8002bba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e01f      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_RCC_OscConfig+0x708>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_RCC_OscConfig+0x708>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	23c0      	movs	r3, #192	; 0xc0
 8002b8c:	025b      	lsls	r3, r3, #9
 8002b8e:	401a      	ands	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d10e      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	23f0      	movs	r3, #240	; 0xf0
 8002baa:	039b      	lsls	r3, r3, #14
 8002bac:	401a      	ands	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b008      	add	sp, #32
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0bf      	b.n	8002d5c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b61      	ldr	r3, [pc, #388]	; (8002d64 <HAL_RCC_ClockConfig+0x19c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d911      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_ClockConfig+0x19c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <HAL_RCC_ClockConfig+0x19c>)
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfc:	4b59      	ldr	r3, [pc, #356]	; (8002d64 <HAL_RCC_ClockConfig+0x19c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0a6      	b.n	8002d5c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d015      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d006      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c22:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002c28:	21e0      	movs	r1, #224	; 0xe0
 8002c2a:	00c9      	lsls	r1, r1, #3
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b4d      	ldr	r3, [pc, #308]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	22f0      	movs	r2, #240	; 0xf0
 8002c36:	4393      	bics	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d04c      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	029b      	lsls	r3, r3, #10
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d120      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07a      	b.n	8002d5c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	049b      	lsls	r3, r3, #18
 8002c76:	4013      	ands	r3, r2
 8002c78:	d114      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06e      	b.n	8002d5c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	029b      	lsls	r3, r3, #10
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e062      	b.n	8002d5c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e05b      	b.n	8002d5c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca4:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4393      	bics	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fa1c 	bl	80010f4 <HAL_GetTick>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc0:	e009      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc2:	f7fe fa17 	bl	80010f4 <HAL_GetTick>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <HAL_RCC_ClockConfig+0x1a4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e042      	b.n	8002d5c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	220c      	movs	r2, #12
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1ec      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_RCC_ClockConfig+0x19c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	4013      	ands	r3, r2
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d211      	bcs.n	8002d1a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_ClockConfig+0x19c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_RCC_ClockConfig+0x19c>)
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_RCC_ClockConfig+0x19c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4013      	ands	r3, r2
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e020      	b.n	8002d5c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4013      	ands	r3, r2
 8002d22:	d009      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <HAL_RCC_ClockConfig+0x1a8>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d38:	f000 f820 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d3c:	0001      	movs	r1, r0
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x1a0>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	220f      	movs	r2, #15
 8002d46:	4013      	ands	r3, r2
 8002d48:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x1ac>)
 8002d4a:	5cd3      	ldrb	r3, [r2, r3]
 8002d4c:	000a      	movs	r2, r1
 8002d4e:	40da      	lsrs	r2, r3
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1b0>)
 8002d52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d54:	2003      	movs	r0, #3
 8002d56:	f7fe f987 	bl	8001068 <HAL_InitTick>
  
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b004      	add	sp, #16
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	00001388 	.word	0x00001388
 8002d70:	fffff8ff 	.word	0xfffff8ff
 8002d74:	08003da4 	.word	0x08003da4
 8002d78:	20000000 	.word	0x20000000

08002d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	220c      	movs	r2, #12
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d046      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0xb8>
 8002da6:	d848      	bhi.n	8002e3a <HAL_RCC_GetSysClockFreq+0xbe>
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d002      	beq.n	8002db2 <HAL_RCC_GetSysClockFreq+0x36>
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d003      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x3c>
 8002db0:	e043      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db2:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002db4:	613b      	str	r3, [r7, #16]
      break;
 8002db6:	e043      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	0c9b      	lsrs	r3, r3, #18
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	220f      	movs	r2, #15
 8002dcc:	4013      	ands	r3, r2
 8002dce:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002dd0:	5cd3      	ldrb	r3, [r2, r3]
 8002dd2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	23c0      	movs	r3, #192	; 0xc0
 8002dd8:	025b      	lsls	r3, r3, #9
 8002dda:	401a      	ands	r2, r3
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	025b      	lsls	r3, r3, #9
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	481a      	ldr	r0, [pc, #104]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002de8:	f7fd f98e 	bl	8000108 <__udivsi3>
 8002dec:	0003      	movs	r3, r0
 8002dee:	001a      	movs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4353      	muls	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e01a      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	23c0      	movs	r3, #192	; 0xc0
 8002dfc:	025b      	lsls	r3, r3, #9
 8002dfe:	401a      	ands	r2, r3
 8002e00:	23c0      	movs	r3, #192	; 0xc0
 8002e02:	025b      	lsls	r3, r3, #9
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d109      	bne.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4814      	ldr	r0, [pc, #80]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e0c:	f7fd f97c 	bl	8000108 <__udivsi3>
 8002e10:	0003      	movs	r3, r0
 8002e12:	001a      	movs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4353      	muls	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	4810      	ldr	r0, [pc, #64]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002e20:	f7fd f972 	bl	8000108 <__udivsi3>
 8002e24:	0003      	movs	r3, r0
 8002e26:	001a      	movs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4353      	muls	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	613b      	str	r3, [r7, #16]
      break;
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002e36:	613b      	str	r3, [r7, #16]
      break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002e3c:	613b      	str	r3, [r7, #16]
      break;
 8002e3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e40:	693b      	ldr	r3, [r7, #16]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b006      	add	sp, #24
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	017d7840 	.word	0x017d7840
 8002e54:	08003db4 	.word	0x08003db4
 8002e58:	08003dc4 	.word	0x08003dc4
 8002e5c:	02dc6c00 	.word	0x02dc6c00
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	025b      	lsls	r3, r3, #9
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e80:	e08e      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e82:	2017      	movs	r0, #23
 8002e84:	183b      	adds	r3, r7, r0
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b6e      	ldr	r3, [pc, #440]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	055b      	lsls	r3, r3, #21
 8002e92:	4013      	ands	r3, r2
 8002e94:	d110      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	4b6a      	ldr	r3, [pc, #424]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0549      	lsls	r1, r1, #21
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	61da      	str	r2, [r3, #28]
 8002ea4:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	055b      	lsls	r3, r3, #21
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	183b      	adds	r3, r7, r0
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	4b63      	ldr	r3, [pc, #396]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d11a      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec4:	4b60      	ldr	r3, [pc, #384]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b5f      	ldr	r3, [pc, #380]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002eca:	2180      	movs	r1, #128	; 0x80
 8002ecc:	0049      	lsls	r1, r1, #1
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe f90f 	bl	80010f4 <HAL_GetTick>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	e008      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002edc:	f7fe f90a 	bl	80010f4 <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0a6      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002efa:	4b52      	ldr	r3, [pc, #328]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	23c0      	movs	r3, #192	; 0xc0
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4013      	ands	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d034      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	23c0      	movs	r3, #192	; 0xc0
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d02c      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f1c:	4b49      	ldr	r3, [pc, #292]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a4a      	ldr	r2, [pc, #296]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	4b46      	ldr	r3, [pc, #280]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	0249      	lsls	r1, r1, #9
 8002f30:	430a      	orrs	r2, r1
 8002f32:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f34:	4b43      	ldr	r3, [pc, #268]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f3a:	4945      	ldr	r1, [pc, #276]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe f8d1 	bl	80010f4 <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	e009      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe f8cc 	bl	80010f4 <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	4a3c      	ldr	r2, [pc, #240]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e067      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	2202      	movs	r2, #2
 8002f72:	4013      	ands	r3, r2
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f76:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f8a:	2317      	movs	r3, #23
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f9a:	492f      	ldr	r1, [pc, #188]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	2203      	movs	r2, #3
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	4a23      	ldr	r2, [pc, #140]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	2210      	movs	r2, #16
 8002fec:	4393      	bics	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	029b      	lsls	r3, r3, #10
 8003002:	4013      	ands	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	4393      	bics	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699a      	ldr	r2, [r3, #24]
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003016:	430a      	orrs	r2, r1
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	2240      	movs	r2, #64	; 0x40
 800302c:	4393      	bics	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003036:	430a      	orrs	r2, r1
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b006      	add	sp, #24
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	fffffcff 	.word	0xfffffcff
 8003050:	fffeffff 	.word	0xfffeffff
 8003054:	00001388 	.word	0x00001388
 8003058:	efffffff 	.word	0xefffffff
 800305c:	fffcffff 	.word	0xfffcffff

08003060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e042      	b.n	80030f8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	223d      	movs	r2, #61	; 0x3d
 8003076:	5c9b      	ldrb	r3, [r3, r2]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	223c      	movs	r2, #60	; 0x3c
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f7fd fec3 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	223d      	movs	r2, #61	; 0x3d
 8003092:	2102      	movs	r1, #2
 8003094:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	0019      	movs	r1, r3
 80030a0:	0010      	movs	r0, r2
 80030a2:	f000 fa1f 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2246      	movs	r2, #70	; 0x46
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	223e      	movs	r2, #62	; 0x3e
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	223f      	movs	r2, #63	; 0x3f
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2241      	movs	r2, #65	; 0x41
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2242      	movs	r2, #66	; 0x42
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2243      	movs	r2, #67	; 0x43
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2244      	movs	r2, #68	; 0x44
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2245      	movs	r2, #69	; 0x45
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	223d      	movs	r2, #61	; 0x3d
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e042      	b.n	8003198 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	223d      	movs	r2, #61	; 0x3d
 8003116:	5c9b      	ldrb	r3, [r3, r2]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	223c      	movs	r2, #60	; 0x3c
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f839 	bl	80031a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	223d      	movs	r2, #61	; 0x3d
 8003132:	2102      	movs	r1, #2
 8003134:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	0019      	movs	r1, r3
 8003140:	0010      	movs	r0, r2
 8003142:	f000 f9cf 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2246      	movs	r2, #70	; 0x46
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223e      	movs	r2, #62	; 0x3e
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	223f      	movs	r2, #63	; 0x3f
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2240      	movs	r2, #64	; 0x40
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2241      	movs	r2, #65	; 0x41
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2242      	movs	r2, #66	; 0x42
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2243      	movs	r2, #67	; 0x43
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2244      	movs	r2, #68	; 0x44
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2245      	movs	r2, #69	; 0x45
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	223d      	movs	r2, #61	; 0x3d
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031bc:	2317      	movs	r3, #23
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	223c      	movs	r2, #60	; 0x3c
 80031c8:	5c9b      	ldrb	r3, [r3, r2]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0ad      	b.n	800332e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	223c      	movs	r2, #60	; 0x3c
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d100      	bne.n	80031e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80031e0:	e076      	b.n	80032d0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d900      	bls.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x3a>
 80031e8:	e095      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x166>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d04e      	beq.n	800328e <HAL_TIM_PWM_ConfigChannel+0xde>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d900      	bls.n	80031f8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80031f6:	e08e      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x166>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x56>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d021      	beq.n	8003248 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003204:	e087      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	0011      	movs	r1, r2
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f9e8 	bl	80035e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2108      	movs	r1, #8
 8003220:	430a      	orrs	r2, r1
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2104      	movs	r1, #4
 8003230:	438a      	bics	r2, r1
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	619a      	str	r2, [r3, #24]
      break;
 8003246:	e06b      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	0011      	movs	r1, r2
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fa4f 	bl	80036f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0109      	lsls	r1, r1, #4
 8003264:	430a      	orrs	r2, r1
 8003266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4931      	ldr	r1, [pc, #196]	; (8003338 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003274:	400a      	ands	r2, r1
 8003276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6999      	ldr	r1, [r3, #24]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	619a      	str	r2, [r3, #24]
      break;
 800328c:	e048      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	0011      	movs	r1, r2
 8003296:	0018      	movs	r0, r3
 8003298:	f000 fab0 	bl	80037fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2108      	movs	r1, #8
 80032a8:	430a      	orrs	r2, r1
 80032aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2104      	movs	r1, #4
 80032b8:	438a      	bics	r2, r1
 80032ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69d9      	ldr	r1, [r3, #28]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	61da      	str	r2, [r3, #28]
      break;
 80032ce:	e027      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 fb15 	bl	8003908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	0109      	lsls	r1, r1, #4
 80032ec:	430a      	orrs	r2, r1
 80032ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	490f      	ldr	r1, [pc, #60]	; (8003338 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80032fc:	400a      	ands	r2, r1
 80032fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69d9      	ldr	r1, [r3, #28]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	021a      	lsls	r2, r3, #8
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
      break;
 8003314:	e004      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003316:	2317      	movs	r3, #23
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
      break;
 800331e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	223c      	movs	r2, #60	; 0x3c
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]

  return status;
 8003328:	2317      	movs	r3, #23
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	781b      	ldrb	r3, [r3, #0]
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b006      	add	sp, #24
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	fffffbff 	.word	0xfffffbff

0800333c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	230f      	movs	r3, #15
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	223c      	movs	r2, #60	; 0x3c
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIM_ConfigClockSource+0x20>
 8003358:	2302      	movs	r3, #2
 800335a:	e0bc      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x19a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	223c      	movs	r2, #60	; 0x3c
 8003360:	2101      	movs	r1, #1
 8003362:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223d      	movs	r2, #61	; 0x3d
 8003368:	2102      	movs	r1, #2
 800336a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2277      	movs	r2, #119	; 0x77
 8003378:	4393      	bics	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003380:	4013      	ands	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	0192      	lsls	r2, r2, #6
 8003394:	4293      	cmp	r3, r2
 8003396:	d040      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xde>
 8003398:	2280      	movs	r2, #128	; 0x80
 800339a:	0192      	lsls	r2, r2, #6
 800339c:	4293      	cmp	r3, r2
 800339e:	d900      	bls.n	80033a2 <HAL_TIM_ConfigClockSource+0x66>
 80033a0:	e088      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	0152      	lsls	r2, r2, #5
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d100      	bne.n	80033ac <HAL_TIM_ConfigClockSource+0x70>
 80033aa:	e088      	b.n	80034be <HAL_TIM_ConfigClockSource+0x182>
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	0152      	lsls	r2, r2, #5
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d900      	bls.n	80033b6 <HAL_TIM_ConfigClockSource+0x7a>
 80033b4:	e07e      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
 80033b6:	2b70      	cmp	r3, #112	; 0x70
 80033b8:	d018      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0xb0>
 80033ba:	d900      	bls.n	80033be <HAL_TIM_ConfigClockSource+0x82>
 80033bc:	e07a      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
 80033be:	2b60      	cmp	r3, #96	; 0x60
 80033c0:	d04f      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x126>
 80033c2:	d900      	bls.n	80033c6 <HAL_TIM_ConfigClockSource+0x8a>
 80033c4:	e076      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
 80033c6:	2b50      	cmp	r3, #80	; 0x50
 80033c8:	d03b      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x106>
 80033ca:	d900      	bls.n	80033ce <HAL_TIM_ConfigClockSource+0x92>
 80033cc:	e072      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d057      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x146>
 80033d2:	d900      	bls.n	80033d6 <HAL_TIM_ConfigClockSource+0x9a>
 80033d4:	e06e      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
 80033d6:	2b30      	cmp	r3, #48	; 0x30
 80033d8:	d063      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x166>
 80033da:	d86b      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d060      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x166>
 80033e0:	d868      	bhi.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d05d      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x166>
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d05b      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x166>
 80033ea:	e063      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f000 fb68 	bl	8003ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2277      	movs	r2, #119	; 0x77
 800340c:	4313      	orrs	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	609a      	str	r2, [r3, #8]
      break;
 8003418:	e052      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f000 fb51 	bl	8003ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	01c9      	lsls	r1, r1, #7
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
      break;
 8003440:	e03e      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	001a      	movs	r2, r3
 8003450:	f000 fac4 	bl	80039dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2150      	movs	r1, #80	; 0x50
 800345a:	0018      	movs	r0, r3
 800345c:	f000 fb1e 	bl	8003a9c <TIM_ITRx_SetConfig>
      break;
 8003460:	e02e      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	001a      	movs	r2, r3
 8003470:	f000 fae2 	bl	8003a38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2160      	movs	r1, #96	; 0x60
 800347a:	0018      	movs	r0, r3
 800347c:	f000 fb0e 	bl	8003a9c <TIM_ITRx_SetConfig>
      break;
 8003480:	e01e      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	001a      	movs	r2, r3
 8003490:	f000 faa4 	bl	80039dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2140      	movs	r1, #64	; 0x40
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fafe 	bl	8003a9c <TIM_ITRx_SetConfig>
      break;
 80034a0:	e00e      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	0019      	movs	r1, r3
 80034ac:	0010      	movs	r0, r2
 80034ae:	f000 faf5 	bl	8003a9c <TIM_ITRx_SetConfig>
      break;
 80034b2:	e005      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80034b4:	230f      	movs	r3, #15
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
      break;
 80034bc:	e000      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80034be:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	223d      	movs	r2, #61	; 0x3d
 80034c4:	2101      	movs	r1, #1
 80034c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	223c      	movs	r2, #60	; 0x3c
 80034cc:	2100      	movs	r1, #0
 80034ce:	5499      	strb	r1, [r3, r2]

  return status;
 80034d0:	230f      	movs	r3, #15
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	ffff00ff 	.word	0xffff00ff

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a34      	ldr	r2, [pc, #208]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d008      	beq.n	800350e <TIM_Base_SetConfig+0x2a>
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	05db      	lsls	r3, r3, #23
 8003502:	429a      	cmp	r2, r3
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0x2a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <TIM_Base_SetConfig+0xe8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2270      	movs	r2, #112	; 0x70
 8003512:	4393      	bics	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a29      	ldr	r2, [pc, #164]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d018      	beq.n	800355a <TIM_Base_SetConfig+0x76>
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	05db      	lsls	r3, r3, #23
 800352e:	429a      	cmp	r2, r3
 8003530:	d013      	beq.n	800355a <TIM_Base_SetConfig+0x76>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a25      	ldr	r2, [pc, #148]	; (80035cc <TIM_Base_SetConfig+0xe8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00f      	beq.n	800355a <TIM_Base_SetConfig+0x76>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a24      	ldr	r2, [pc, #144]	; (80035d0 <TIM_Base_SetConfig+0xec>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00b      	beq.n	800355a <TIM_Base_SetConfig+0x76>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <TIM_Base_SetConfig+0xf0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0x76>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <TIM_Base_SetConfig+0xf4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x76>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a21      	ldr	r2, [pc, #132]	; (80035dc <TIM_Base_SetConfig+0xf8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <TIM_Base_SetConfig+0xfc>)
 800355e:	4013      	ands	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2280      	movs	r2, #128	; 0x80
 8003570:	4393      	bics	r3, r2
 8003572:	001a      	movs	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00b      	beq.n	80035b2 <TIM_Base_SetConfig+0xce>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <TIM_Base_SetConfig+0xf0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <TIM_Base_SetConfig+0xce>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <TIM_Base_SetConfig+0xf4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_Base_SetConfig+0xce>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <TIM_Base_SetConfig+0xf8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d103      	bne.n	80035ba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	615a      	str	r2, [r3, #20]
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b004      	add	sp, #16
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40002000 	.word	0x40002000
 80035d4:	40014000 	.word	0x40014000
 80035d8:	40014400 	.word	0x40014400
 80035dc:	40014800 	.word	0x40014800
 80035e0:	fffffcff 	.word	0xfffffcff

080035e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	2201      	movs	r2, #1
 80035f4:	4393      	bics	r3, r2
 80035f6:	001a      	movs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2270      	movs	r2, #112	; 0x70
 8003612:	4393      	bics	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2203      	movs	r2, #3
 800361a:	4393      	bics	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2202      	movs	r2, #2
 800362c:	4393      	bics	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <TIM_OC1_SetConfig+0xf8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_OC1_SetConfig+0x76>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <TIM_OC1_SetConfig+0xfc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_OC1_SetConfig+0x76>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <TIM_OC1_SetConfig+0x100>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_OC1_SetConfig+0x76>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <TIM_OC1_SetConfig+0x104>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10c      	bne.n	8003674 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2208      	movs	r2, #8
 800365e:	4393      	bics	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2204      	movs	r2, #4
 8003670:	4393      	bics	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a19      	ldr	r2, [pc, #100]	; (80036dc <TIM_OC1_SetConfig+0xf8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00b      	beq.n	8003694 <TIM_OC1_SetConfig+0xb0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <TIM_OC1_SetConfig+0xfc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <TIM_OC1_SetConfig+0xb0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <TIM_OC1_SetConfig+0x100>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_OC1_SetConfig+0xb0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <TIM_OC1_SetConfig+0x104>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d111      	bne.n	80036b8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <TIM_OC1_SetConfig+0x108>)
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <TIM_OC1_SetConfig+0x10c>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b006      	add	sp, #24
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800
 80036ec:	fffffeff 	.word	0xfffffeff
 80036f0:	fffffdff 	.word	0xfffffdff

080036f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	2210      	movs	r2, #16
 8003704:	4393      	bics	r3, r2
 8003706:	001a      	movs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <TIM_OC2_SetConfig+0xe8>)
 8003722:	4013      	ands	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <TIM_OC2_SetConfig+0xec>)
 800372a:	4013      	ands	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2220      	movs	r2, #32
 800373e:	4393      	bics	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <TIM_OC2_SetConfig+0xf0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10d      	bne.n	8003772 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	4393      	bics	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2240      	movs	r2, #64	; 0x40
 800376e:	4393      	bics	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <TIM_OC2_SetConfig+0xf0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_OC2_SetConfig+0x9e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <TIM_OC2_SetConfig+0xf4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_OC2_SetConfig+0x9e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <TIM_OC2_SetConfig+0xf8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC2_SetConfig+0x9e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <TIM_OC2_SetConfig+0xfc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d113      	bne.n	80037ba <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <TIM_OC2_SetConfig+0x100>)
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <TIM_OC2_SetConfig+0x104>)
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b006      	add	sp, #24
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	ffff8fff 	.word	0xffff8fff
 80037e0:	fffffcff 	.word	0xfffffcff
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40014400 	.word	0x40014400
 80037f0:	40014800 	.word	0x40014800
 80037f4:	fffffbff 	.word	0xfffffbff
 80037f8:	fffff7ff 	.word	0xfffff7ff

080037fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a35      	ldr	r2, [pc, #212]	; (80038e0 <TIM_OC3_SetConfig+0xe4>)
 800380c:	401a      	ands	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2270      	movs	r2, #112	; 0x70
 8003828:	4393      	bics	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2203      	movs	r2, #3
 8003830:	4393      	bics	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <TIM_OC3_SetConfig+0xe8>)
 8003842:	4013      	ands	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <TIM_OC3_SetConfig+0xec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d10d      	bne.n	8003876 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	4a23      	ldr	r2, [pc, #140]	; (80038ec <TIM_OC3_SetConfig+0xf0>)
 800385e:	4013      	ands	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	4a1f      	ldr	r2, [pc, #124]	; (80038f0 <TIM_OC3_SetConfig+0xf4>)
 8003872:	4013      	ands	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <TIM_OC3_SetConfig+0xec>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00b      	beq.n	8003896 <TIM_OC3_SetConfig+0x9a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <TIM_OC3_SetConfig+0xf8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <TIM_OC3_SetConfig+0x9a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <TIM_OC3_SetConfig+0xfc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d003      	beq.n	8003896 <TIM_OC3_SetConfig+0x9a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <TIM_OC3_SetConfig+0x100>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d113      	bne.n	80038be <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <TIM_OC3_SetConfig+0x104>)
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <TIM_OC3_SetConfig+0x108>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	621a      	str	r2, [r3, #32]
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b006      	add	sp, #24
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	fffffeff 	.word	0xfffffeff
 80038e4:	fffffdff 	.word	0xfffffdff
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	fffff7ff 	.word	0xfffff7ff
 80038f0:	fffffbff 	.word	0xfffffbff
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40014800 	.word	0x40014800
 8003900:	ffffefff 	.word	0xffffefff
 8003904:	ffffdfff 	.word	0xffffdfff

08003908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4a28      	ldr	r2, [pc, #160]	; (80039b8 <TIM_OC4_SetConfig+0xb0>)
 8003918:	401a      	ands	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a22      	ldr	r2, [pc, #136]	; (80039bc <TIM_OC4_SetConfig+0xb4>)
 8003934:	4013      	ands	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <TIM_OC4_SetConfig+0xb8>)
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <TIM_OC4_SetConfig+0xbc>)
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	031b      	lsls	r3, r3, #12
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <TIM_OC4_SetConfig+0xc0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_OC4_SetConfig+0x78>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a18      	ldr	r2, [pc, #96]	; (80039cc <TIM_OC4_SetConfig+0xc4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_OC4_SetConfig+0x78>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <TIM_OC4_SetConfig+0xc8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_OC4_SetConfig+0x78>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <TIM_OC4_SetConfig+0xcc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d109      	bne.n	8003994 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <TIM_OC4_SetConfig+0xd0>)
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b006      	add	sp, #24
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	ffffefff 	.word	0xffffefff
 80039bc:	ffff8fff 	.word	0xffff8fff
 80039c0:	fffffcff 	.word	0xfffffcff
 80039c4:	ffffdfff 	.word	0xffffdfff
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800
 80039d8:	ffffbfff 	.word	0xffffbfff

080039dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	2201      	movs	r2, #1
 80039f4:	4393      	bics	r3, r2
 80039f6:	001a      	movs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	22f0      	movs	r2, #240	; 0xf0
 8003a06:	4393      	bics	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	220a      	movs	r2, #10
 8003a18:	4393      	bics	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	621a      	str	r2, [r3, #32]
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b006      	add	sp, #24
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	2210      	movs	r2, #16
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <TIM_TI2_ConfigInputStage+0x60>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	031b      	lsls	r3, r3, #12
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	22a0      	movs	r2, #160	; 0xa0
 8003a74:	4393      	bics	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b006      	add	sp, #24
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	ffff0fff 	.word	0xffff0fff

08003a9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2270      	movs	r2, #112	; 0x70
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	2207      	movs	r2, #7
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	609a      	str	r2, [r3, #8]
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <TIM_ETR_SetConfig+0x3c>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b006      	add	sp, #24
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	ffff00ff 	.word	0xffff00ff

08003b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	223c      	movs	r2, #60	; 0x3c
 8003b1e:	5c9b      	ldrb	r3, [r3, r2]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e047      	b.n	8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	223c      	movs	r2, #60	; 0x3c
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	223d      	movs	r2, #61	; 0x3d
 8003b34:	2102      	movs	r1, #2
 8003b36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2270      	movs	r2, #112	; 0x70
 8003b4c:	4393      	bics	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00f      	beq.n	8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	05db      	lsls	r3, r3, #23
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d009      	beq.n	8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d10c      	bne.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	4393      	bics	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	223d      	movs	r2, #61	; 0x3d
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	223c      	movs	r2, #60	; 0x3c
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b004      	add	sp, #16
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40014000 	.word	0x40014000

08003bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	223c      	movs	r2, #60	; 0x3c
 8003bde:	5c9b      	ldrb	r3, [r3, r2]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e03e      	b.n	8003c66 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	223c      	movs	r2, #60	; 0x3c
 8003bec:	2101      	movs	r1, #1
 8003bee:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	22ff      	movs	r2, #255	; 0xff
 8003bf4:	4393      	bics	r3, r2
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003c04:	401a      	ands	r2, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003c12:	401a      	ands	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003c20:	401a      	ands	r2, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003c2e:	401a      	ands	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a11      	ldr	r2, [pc, #68]	; (8003c80 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003c3c:	401a      	ands	r2, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a0e      	ldr	r2, [pc, #56]	; (8003c84 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	223c      	movs	r2, #60	; 0x3c
 8003c60:	2100      	movs	r1, #0
 8003c62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b004      	add	sp, #16
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	fffffcff 	.word	0xfffffcff
 8003c74:	fffffbff 	.word	0xfffffbff
 8003c78:	fffff7ff 	.word	0xfffff7ff
 8003c7c:	ffffefff 	.word	0xffffefff
 8003c80:	ffffdfff 	.word	0xffffdfff
 8003c84:	ffffbfff 	.word	0xffffbfff

08003c88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <USB_DisableGlobalInt+0x30>)
 8003c92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2240      	movs	r2, #64	; 0x40
 8003c98:	5a9b      	ldrh	r3, [r3, r2]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	43d2      	mvns	r2, r2
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	b299      	uxth	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2240      	movs	r2, #64	; 0x40
 8003cac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b004      	add	sp, #16
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	0000bf80 	.word	0x0000bf80

08003cbc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	b590      	push	{r4, r7, lr}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	2004      	movs	r0, #4
 8003cc8:	2410      	movs	r4, #16
 8003cca:	1900      	adds	r0, r0, r4
 8003ccc:	2408      	movs	r4, #8
 8003cce:	46a4      	mov	ip, r4
 8003cd0:	44bc      	add	ip, r7
 8003cd2:	4460      	add	r0, ip
 8003cd4:	6001      	str	r1, [r0, #0]
 8003cd6:	6042      	str	r2, [r0, #4]
 8003cd8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2240      	movs	r2, #64	; 0x40
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2240      	movs	r2, #64	; 0x40
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2244      	movs	r2, #68	; 0x44
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2250      	movs	r2, #80	; 0x50
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b003      	add	sp, #12
 8003d02:	bc90      	pop	{r4, r7}
 8003d04:	bc08      	pop	{r3}
 8003d06:	b004      	add	sp, #16
 8003d08:	4718      	bx	r3
	...

08003d0c <__libc_init_array>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	2600      	movs	r6, #0
 8003d10:	4d0c      	ldr	r5, [pc, #48]	; (8003d44 <__libc_init_array+0x38>)
 8003d12:	4c0d      	ldr	r4, [pc, #52]	; (8003d48 <__libc_init_array+0x3c>)
 8003d14:	1b64      	subs	r4, r4, r5
 8003d16:	10a4      	asrs	r4, r4, #2
 8003d18:	42a6      	cmp	r6, r4
 8003d1a:	d109      	bne.n	8003d30 <__libc_init_array+0x24>
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	f000 f821 	bl	8003d64 <_init>
 8003d22:	4d0a      	ldr	r5, [pc, #40]	; (8003d4c <__libc_init_array+0x40>)
 8003d24:	4c0a      	ldr	r4, [pc, #40]	; (8003d50 <__libc_init_array+0x44>)
 8003d26:	1b64      	subs	r4, r4, r5
 8003d28:	10a4      	asrs	r4, r4, #2
 8003d2a:	42a6      	cmp	r6, r4
 8003d2c:	d105      	bne.n	8003d3a <__libc_init_array+0x2e>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	00b3      	lsls	r3, r6, #2
 8003d32:	58eb      	ldr	r3, [r5, r3]
 8003d34:	4798      	blx	r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7ee      	b.n	8003d18 <__libc_init_array+0xc>
 8003d3a:	00b3      	lsls	r3, r6, #2
 8003d3c:	58eb      	ldr	r3, [r5, r3]
 8003d3e:	4798      	blx	r3
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7f2      	b.n	8003d2a <__libc_init_array+0x1e>
 8003d44:	08003dd4 	.word	0x08003dd4
 8003d48:	08003dd4 	.word	0x08003dd4
 8003d4c:	08003dd4 	.word	0x08003dd4
 8003d50:	08003dd8 	.word	0x08003dd8

08003d54 <memset>:
 8003d54:	0003      	movs	r3, r0
 8003d56:	1882      	adds	r2, r0, r2
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d100      	bne.n	8003d5e <memset+0xa>
 8003d5c:	4770      	bx	lr
 8003d5e:	7019      	strb	r1, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	e7f9      	b.n	8003d58 <memset+0x4>

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
